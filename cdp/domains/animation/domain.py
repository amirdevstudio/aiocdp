# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from cdp.domains import (
    mappers
)
from cdp.utils import (
    UNDEFINED,
    is_defined
)
from dataclasses import (
    dataclass
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.animation.types import (
    GetCurrentTimeReturnType,
    GetPlaybackRateReturnType,
    ResolveAnimationReturnType
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IFutureResponse
    )


@dataclass
class Animation(BaseDomain):
    def disable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'Animation.disable',
            params,
            False
        )

    def enable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'Animation.enable',
            params,
            False
        )

    def get_current_time(
            self,
            id_: 'str'
    ) -> 'IFutureResponse[GetCurrentTimeReturnType]':
        params = {
            'id': id_,
        }

        return self._send_command(
            'Animation.getCurrentTime',
            params,
            True,
            lambda data: from_dict(
                GetCurrentTimeReturnType,
                data,
                'camel'
            )
        )

    def get_playback_rate(
            self
    ) -> 'IFutureResponse[GetPlaybackRateReturnType]':
        params = {}

        return self._send_command(
            'Animation.getPlaybackRate',
            params,
            True,
            lambda data: from_dict(
                GetPlaybackRateReturnType,
                data,
                'camel'
            )
        )

    def release_animations(
            self,
            animations: 'list'
    ) -> 'IFutureResponse[None]':
        params = {
            'animations': animations,
        }

        return self._send_command(
            'Animation.releaseAnimations',
            params,
            False
        )

    def resolve_animation(
            self,
            animation_id: 'str'
    ) -> 'IFutureResponse[ResolveAnimationReturnType]':
        params = {
            'animationId': animation_id,
        }

        return self._send_command(
            'Animation.resolveAnimation',
            params,
            True,
            lambda data: from_dict(
                ResolveAnimationReturnType,
                data,
                'camel'
            )
        )

    def seek_animations(
            self,
            animations: 'list',
            current_time: 'float'
    ) -> 'IFutureResponse[None]':
        params = {
            'animations': animations,
            'currentTime': current_time,
        }

        return self._send_command(
            'Animation.seekAnimations',
            params,
            False
        )

    def set_paused(
            self,
            animations: 'list',
            paused: 'bool'
    ) -> 'IFutureResponse[None]':
        params = {
            'animations': animations,
            'paused': paused,
        }

        return self._send_command(
            'Animation.setPaused',
            params,
            False
        )

    def set_playback_rate(
            self,
            playback_rate: 'float'
    ) -> 'IFutureResponse[None]':
        params = {
            'playbackRate': playback_rate,
        }

        return self._send_command(
            'Animation.setPlaybackRate',
            params,
            False
        )

    def set_timing(
            self,
            animation_id: 'str',
            duration: 'float',
            delay: 'float'
    ) -> 'IFutureResponse[None]':
        params = {
            'animationId': animation_id,
            'duration': duration,
            'delay': delay,
        }

        return self._send_command(
            'Animation.setTiming',
            params,
            False
        )
