# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from cdp.domains import (
    mappers
)
from cdp.utils import (
    UNDEFINED,
    is_defined
)
from dataclasses import (
    dataclass
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.autofill.types import (
    BackendNodeId,
    CreditCard,
    FrameId
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IFutureResponse
    )


@dataclass
class Autofill(BaseDomain):
    def trigger(
            self,
            field_id: 'BackendNodeId',
            card: 'CreditCard',
            frame_id: 'FrameId' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {
            'fieldId': to_dict(
                field_id,
                'camel'
            ),
            'card': to_dict(
                card,
                'camel'
            ),
        }

        if is_defined(frame_id):
            params['frameId'] = to_dict(
                frame_id,
                'camel'
            )

        return self._send_command(
            'Autofill.trigger',
            params,
            False
        )

    def set_addresses(
            self,
            addresses: 'list'
    ) -> 'IFutureResponse[None]':
        params = {
            'addresses': addresses,
        }

        return self._send_command(
            'Autofill.setAddresses',
            params,
            False
        )

    def disable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'Autofill.disable',
            params,
            False
        )

    def enable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'Autofill.enable',
            params,
            False
        )
