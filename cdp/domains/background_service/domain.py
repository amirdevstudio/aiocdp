# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from cdp.domains import (
    mappers
)
from cdp.utils import (
    UNDEFINED,
    is_defined
)
from dataclasses import (
    dataclass
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.background_service.types import (
    ServiceName
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IFutureResponse
    )


@dataclass
class BackgroundService(BaseDomain):
    def start_observing(
            self,
            service: 'ServiceName'
    ) -> 'IFutureResponse[None]':
        params = {
            'service': to_dict(
                service,
                'camel'
            ),
        }

        return self._send_command(
            'BackgroundService.startObserving',
            params,
            False
        )

    def stop_observing(
            self,
            service: 'ServiceName'
    ) -> 'IFutureResponse[None]':
        params = {
            'service': to_dict(
                service,
                'camel'
            ),
        }

        return self._send_command(
            'BackgroundService.stopObserving',
            params,
            False
        )

    def set_recording(
            self,
            should_record: 'bool',
            service: 'ServiceName'
    ) -> 'IFutureResponse[None]':
        params = {
            'shouldRecord': should_record,
            'service': to_dict(
                service,
                'camel'
            ),
        }

        return self._send_command(
            'BackgroundService.setRecording',
            params,
            False
        )

    def clear_events(
            self,
            service: 'ServiceName'
    ) -> 'IFutureResponse[None]':
        params = {
            'service': to_dict(
                service,
                'camel'
            ),
        }

        return self._send_command(
            'BackgroundService.clearEvents',
            params,
            False
        )
