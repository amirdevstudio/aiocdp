# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from dataclasses import (
    dataclass
)
from cdp.utils import (
    is_defined,
    UNDEFINED
)
from cdp.domains.io.types import (
    ReadReturnT,
    ResolveBlobReturnT,
    StreamHandle
)
from cdp.domains.runtime.types import (
    RemoteObjectId
)


@dataclass
class IO(BaseDomain):
    def close(
            self,
            handle: StreamHandle
    ) -> None:
        params = {
            'handle': handle,
        }

        return self._send_command(
            'IO.close',
            params
        )

    def read(
            self,
            handle: StreamHandle,
            offset: int = UNDEFINED,
            size: int = UNDEFINED
    ) -> 'ReadReturnT':
        params = {
            'handle': handle,
        }

        if is_defined(offset):
            params['offset'] = offset

        if is_defined(size):
            params['size'] = size

        return self._send_command(
            'IO.read',
            params
        )

    def resolve_blob(
            self,
            object_id: RemoteObjectId
    ) -> 'ResolveBlobReturnT':
        params = {
            'objectId': object_id,
        }

        return self._send_command(
            'IO.resolveBlob',
            params
        )
