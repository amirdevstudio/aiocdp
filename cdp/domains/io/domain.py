# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from dataclasses import (
    dataclass
)
from cdp.utils import (
    is_defined,
    UNDEFINED
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.mapper import (
    from_dict,
    to_dict
)
from cdp.domains.io.types import (
    ReadReturnT,
    ResolveBlobReturnT,
    StreamHandle
)
from cdp.domains.runtime.types import (
    RemoteObjectId
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IResponse
    )


@dataclass
class IO(BaseDomain):
    def close(
            self,
            handle: 'StreamHandle'
    ) -> 'IResponse[None]':
        params = {
            'handle': handle,
        }

        return self._send_command(
            'IO.close',
            params,
            False
        )

    def read(
            self,
            handle: 'StreamHandle',
            offset: 'int' = UNDEFINED,
            size: 'int' = UNDEFINED
    ) -> 'IResponse[ReadReturnT]':
        params = {
            'handle': handle,
        }

        if is_defined(offset):
            params['offset'] = offset

        if is_defined(size):
            params['size'] = size

        return self._send_command(
            'IO.read',
            params,
            True,
            lambda data: from_dict(
                ReadReturnT,
                data,
                'camel'
            )
        )

    def resolve_blob(
            self,
            object_id: 'RemoteObjectId'
    ) -> 'IResponse[ResolveBlobReturnT]':
        params = {
            'objectId': object_id,
        }

        return self._send_command(
            'IO.resolveBlob',
            params,
            True,
            lambda data: from_dict(
                ResolveBlobReturnT,
                data,
                'camel'
            )
        )
