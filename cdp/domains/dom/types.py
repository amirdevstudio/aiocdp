# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from typing import (
    Any,
    Literal,
    TYPE_CHECKING
)
from dataclasses import (
    dataclass
)

NodeId = int
BackendNodeId = int
Quad = list[float]
PseudoType = Literal[
    'first-line',
    'first-letter',
    'before',
    'after',
    'marker',
    'backdrop',
    'selection',
    'target-text',
    'spelling-error',
    'grammar-error',
    'highlight',
    'first-line-inherited',
    'scrollbar',
    'scrollbar-thumb',
    'scrollbar-button',
    'scrollbar-track',
    'scrollbar-track-piece',
    'scrollbar-corner',
    'resizer',
    'input-list-button',
    'view-transition',
    'view-transition-group',
    'view-transition-image-pair',
    'view-transition-old',
    'view-transition-new'
]
ShadowRootType = Literal[
    'user-agent',
    'open',
    'closed'
]
CompatibilityMode = Literal[
    'QuirksMode',
    'LimitedQuirksMode',
    'NoQuirksMode'
]
PhysicalAxes = Literal[
    'Horizontal',
    'Vertical',
    'Both'
]
LogicalAxes = Literal[
    'Inline',
    'Block',
    'Both'
]

@dataclass
class BackendNode:
    node_type: int
    node_name: str
    backend_node_id: 'BackendNodeId'


@dataclass
class Node:
    node_id: 'NodeId'
    parent_id: 'NodeId'
    backend_node_id: 'BackendNodeId'
    node_type: int
    node_name: str
    local_name: str
    node_value: str
    child_node_count: int
    children: list['Node']
    attributes: list[str]
    document_url: str
    base_url: str
    public_id: str
    system_id: str
    internal_subset: str
    xml_version: str
    name: str
    value: str
    pseudo_type: 'PseudoType'
    pseudo_identifier: str
    shadow_root_type: 'ShadowRootType'
    frame_id: 'FrameId'
    content_document: 'Node'
    shadow_roots: list['Node']
    template_content: 'Node'
    pseudo_elements: list['Node']
    imported_document: 'Node'
    distributed_nodes: list['BackendNode']
    is_svg: bool
    compatibility_mode: 'CompatibilityMode'
    assigned_slot: 'BackendNode'


@dataclass
class RGBA:
    r: int
    g: int
    b: int
    a: float


@dataclass
class BoxModel:
    content: 'Quad'
    padding: 'Quad'
    border: 'Quad'
    margin: 'Quad'
    width: int
    height: int
    shape_outside: 'ShapeOutsideInfo'


@dataclass
class ShapeOutsideInfo:
    bounds: 'Quad'
    shape: list[Any]
    margin_shape: list[Any]


@dataclass
class Rect:
    x: float
    y: float
    width: float
    height: float


@dataclass
class CSSComputedStyleProperty:
    name: str
    value: str


@dataclass
class CollectClassNamesFromSubtreeReturnType:
    class_names: list


@dataclass
class CopyToReturnType:
    node_id: 'NodeId'


@dataclass
class DescribeNodeReturnType:
    node: 'Node'


@dataclass
class GetAttributesReturnType:
    attributes: list


@dataclass
class GetBoxModelReturnType:
    model: 'BoxModel'


@dataclass
class GetContentQuadsReturnType:
    quads: list


@dataclass
class GetDocumentReturnType:
    root: 'Node'


@dataclass
class GetFlattenedDocumentReturnType:
    nodes: list


@dataclass
class GetNodesForSubtreeByStyleReturnType:
    node_ids: list


@dataclass
class GetNodeForLocationReturnType:
    backend_node_id: 'BackendNodeId'
    frame_id: 'FrameId'
    node_id: 'NodeId'


@dataclass
class GetOuterHTMLReturnType:
    outer_html: str


@dataclass
class GetRelayoutBoundaryReturnType:
    node_id: 'NodeId'


@dataclass
class GetSearchResultsReturnType:
    node_ids: list


@dataclass
class MoveToReturnType:
    node_id: 'NodeId'


@dataclass
class PerformSearchReturnType:
    search_id: str
    result_count: int


@dataclass
class PushNodeByPathToFrontendReturnType:
    node_id: 'NodeId'


@dataclass
class PushNodesByBackendIdsToFrontendReturnType:
    node_ids: list


@dataclass
class QuerySelectorReturnType:
    node_id: 'NodeId'


@dataclass
class QuerySelectorAllReturnType:
    node_ids: list


@dataclass
class GetTopLayerElementsReturnType:
    node_ids: list


@dataclass
class RequestNodeReturnType:
    node_id: 'NodeId'


@dataclass
class ResolveNodeReturnType:
    object: 'RemoteObject'


@dataclass
class GetNodeStackTracesReturnType:
    creation: 'StackTrace'


@dataclass
class GetFileInfoReturnType:
    path: str


@dataclass
class SetNodeNameReturnType:
    node_id: 'NodeId'


@dataclass
class GetFrameOwnerReturnType:
    backend_node_id: 'BackendNodeId'
    node_id: 'NodeId'


@dataclass
class GetContainerForNodeReturnType:
    node_id: 'NodeId'


@dataclass
class GetQueryingDescendantsForContainerReturnType:
    node_ids: list
