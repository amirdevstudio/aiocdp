# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from dataclasses import (
    dataclass
)
from cdp.utils import (
    is_defined,
    UNDEFINED
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.mapper import (
    from_dict,
    to_dict
)
from cdp.domains.dom.types import (
    BackendNodeId,
    CollectClassNamesFromSubtreeReturnT,
    CopyToReturnT,
    DescribeNodeReturnT,
    GetAttributesReturnT,
    GetBoxModelReturnT,
    GetContainerForNodeReturnT,
    GetContentQuadsReturnT,
    GetDocumentReturnT,
    GetFileInfoReturnT,
    GetFlattenedDocumentReturnT,
    GetFrameOwnerReturnT,
    GetNodeForLocationReturnT,
    GetNodeStackTracesReturnT,
    GetNodesForSubtreeByStyleReturnT,
    GetOuterHTMLReturnT,
    GetQueryingDescendantsForContainerReturnT,
    GetRelayoutBoundaryReturnT,
    GetSearchResultsReturnT,
    GetTopLayerElementsReturnT,
    LogicalAxes,
    MoveToReturnT,
    NodeId,
    PerformSearchReturnT,
    PhysicalAxes,
    PushNodeByPathToFrontendReturnT,
    PushNodesByBackendIdsToFrontendReturnT,
    QuerySelectorAllReturnT,
    QuerySelectorReturnT,
    Rect,
    RequestNodeReturnT,
    ResolveNodeReturnT,
    SetNodeNameReturnT
)
from cdp.domains.runtime.types import (
    ExecutionContextId,
    RemoteObjectId
)
from cdp.domains.page.types import (
    FrameId
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IFutureResponse
    )


@dataclass
class DOM(BaseDomain):
    def collect_class_names_from_subtree(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[CollectClassNamesFromSubtreeReturnT]':
        params = {
            'nodeId': node_id,
        }

        return self._send_command(
            'DOM.collectClassNamesFromSubtree',
            params,
            True,
            lambda data: from_dict(
                CollectClassNamesFromSubtreeReturnT,
                data,
                'camel'
            )
        )

    def copy_to(
            self,
            node_id: 'NodeId',
            target_node_id: 'NodeId',
            insert_before_node_id: 'NodeId' = UNDEFINED
    ) -> 'IFutureResponse[CopyToReturnT]':
        params = {
            'nodeId': node_id,
            'targetNodeId': target_node_id,
        }

        if is_defined(insert_before_node_id):
            params['insertBeforeNodeId'] = insert_before_node_id

        return self._send_command(
            'DOM.copyTo',
            params,
            True,
            lambda data: from_dict(
                CopyToReturnT,
                data,
                'camel'
            )
        )

    def describe_node(
            self,
            node_id: 'NodeId' = UNDEFINED,
            backend_node_id: 'BackendNodeId' = UNDEFINED,
            object_id: 'RemoteObjectId' = UNDEFINED,
            depth: 'int' = UNDEFINED,
            pierce: 'bool' = UNDEFINED
    ) -> 'IFutureResponse[DescribeNodeReturnT]':
        params = {}

        if is_defined(node_id):
            params['nodeId'] = node_id

        if is_defined(backend_node_id):
            params['backendNodeId'] = backend_node_id

        if is_defined(object_id):
            params['objectId'] = object_id

        if is_defined(depth):
            params['depth'] = depth

        if is_defined(pierce):
            params['pierce'] = pierce

        return self._send_command(
            'DOM.describeNode',
            params,
            True,
            lambda data: from_dict(
                DescribeNodeReturnT,
                data,
                'camel'
            )
        )

    def scroll_into_view_if_needed(
            self,
            node_id: 'NodeId' = UNDEFINED,
            backend_node_id: 'BackendNodeId' = UNDEFINED,
            object_id: 'RemoteObjectId' = UNDEFINED,
            rect: 'Rect' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {}

        if is_defined(node_id):
            params['nodeId'] = node_id

        if is_defined(backend_node_id):
            params['backendNodeId'] = backend_node_id

        if is_defined(object_id):
            params['objectId'] = object_id

        if is_defined(rect):
            params['rect'] = to_dict(
                rect,
                'camel'
            )

        return self._send_command(
            'DOM.scrollIntoViewIfNeeded',
            params,
            False
        )

    def disable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'DOM.disable',
            params,
            False
        )

    def discard_search_results(
            self,
            search_id: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'searchId': search_id,
        }

        return self._send_command(
            'DOM.discardSearchResults',
            params,
            False
        )

    def enable(
            self,
            include_whitespace: 'str' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {}

        if is_defined(include_whitespace):
            params['includeWhitespace'] = include_whitespace

        return self._send_command(
            'DOM.enable',
            params,
            False
        )

    def focus(
            self,
            node_id: 'NodeId' = UNDEFINED,
            backend_node_id: 'BackendNodeId' = UNDEFINED,
            object_id: 'RemoteObjectId' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {}

        if is_defined(node_id):
            params['nodeId'] = node_id

        if is_defined(backend_node_id):
            params['backendNodeId'] = backend_node_id

        if is_defined(object_id):
            params['objectId'] = object_id

        return self._send_command(
            'DOM.focus',
            params,
            False
        )

    def get_attributes(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[GetAttributesReturnT]':
        params = {
            'nodeId': node_id,
        }

        return self._send_command(
            'DOM.getAttributes',
            params,
            True,
            lambda data: from_dict(
                GetAttributesReturnT,
                data,
                'camel'
            )
        )

    def get_box_model(
            self,
            node_id: 'NodeId' = UNDEFINED,
            backend_node_id: 'BackendNodeId' = UNDEFINED,
            object_id: 'RemoteObjectId' = UNDEFINED
    ) -> 'IFutureResponse[GetBoxModelReturnT]':
        params = {}

        if is_defined(node_id):
            params['nodeId'] = node_id

        if is_defined(backend_node_id):
            params['backendNodeId'] = backend_node_id

        if is_defined(object_id):
            params['objectId'] = object_id

        return self._send_command(
            'DOM.getBoxModel',
            params,
            True,
            lambda data: from_dict(
                GetBoxModelReturnT,
                data,
                'camel'
            )
        )

    def get_content_quads(
            self,
            node_id: 'NodeId' = UNDEFINED,
            backend_node_id: 'BackendNodeId' = UNDEFINED,
            object_id: 'RemoteObjectId' = UNDEFINED
    ) -> 'IFutureResponse[GetContentQuadsReturnT]':
        params = {}

        if is_defined(node_id):
            params['nodeId'] = node_id

        if is_defined(backend_node_id):
            params['backendNodeId'] = backend_node_id

        if is_defined(object_id):
            params['objectId'] = object_id

        return self._send_command(
            'DOM.getContentQuads',
            params,
            True,
            lambda data: from_dict(
                GetContentQuadsReturnT,
                data,
                'camel'
            )
        )

    def get_document(
            self,
            depth: 'int' = UNDEFINED,
            pierce: 'bool' = UNDEFINED
    ) -> 'IFutureResponse[GetDocumentReturnT]':
        params = {}

        if is_defined(depth):
            params['depth'] = depth

        if is_defined(pierce):
            params['pierce'] = pierce

        return self._send_command(
            'DOM.getDocument',
            params,
            True,
            lambda data: from_dict(
                GetDocumentReturnT,
                data,
                'camel'
            )
        )

    def get_flattened_document(
            self,
            depth: 'int' = UNDEFINED,
            pierce: 'bool' = UNDEFINED
    ) -> 'IFutureResponse[GetFlattenedDocumentReturnT]':
        params = {}

        if is_defined(depth):
            params['depth'] = depth

        if is_defined(pierce):
            params['pierce'] = pierce

        return self._send_command(
            'DOM.getFlattenedDocument',
            params,
            True,
            lambda data: from_dict(
                GetFlattenedDocumentReturnT,
                data,
                'camel'
            )
        )

    def get_nodes_for_subtree_by_style(
            self,
            node_id: 'NodeId',
            computed_styles: 'list',
            pierce: 'bool' = UNDEFINED
    ) -> 'IFutureResponse[GetNodesForSubtreeByStyleReturnT]':
        params = {
            'nodeId': node_id,
            'computedStyles': [
                to_dict(item, 'camel')
                for item in computed_styles
            ],
        }

        if is_defined(pierce):
            params['pierce'] = pierce

        return self._send_command(
            'DOM.getNodesForSubtreeByStyle',
            params,
            True,
            lambda data: from_dict(
                GetNodesForSubtreeByStyleReturnT,
                data,
                'camel'
            )
        )

    def get_node_for_location(
            self,
            x: 'int',
            y: 'int',
            include_user_agent_shadow_dom: 'bool' = UNDEFINED,
            ignore_pointer_events_none: 'bool' = UNDEFINED
    ) -> 'IFutureResponse[GetNodeForLocationReturnT]':
        params = {
            'x': x,
            'y': y,
        }

        if is_defined(include_user_agent_shadow_dom):
            params['includeUserAgentShadowDOM'] = include_user_agent_shadow_dom

        if is_defined(ignore_pointer_events_none):
            params['ignorePointerEventsNone'] = ignore_pointer_events_none

        return self._send_command(
            'DOM.getNodeForLocation',
            params,
            True,
            lambda data: from_dict(
                GetNodeForLocationReturnT,
                data,
                'camel'
            )
        )

    def get_outer_html(
            self,
            node_id: 'NodeId' = UNDEFINED,
            backend_node_id: 'BackendNodeId' = UNDEFINED,
            object_id: 'RemoteObjectId' = UNDEFINED
    ) -> 'IFutureResponse[GetOuterHTMLReturnT]':
        params = {}

        if is_defined(node_id):
            params['nodeId'] = node_id

        if is_defined(backend_node_id):
            params['backendNodeId'] = backend_node_id

        if is_defined(object_id):
            params['objectId'] = object_id

        return self._send_command(
            'DOM.getOuterHTML',
            params,
            True,
            lambda data: from_dict(
                GetOuterHTMLReturnT,
                data,
                'camel'
            )
        )

    def get_relayout_boundary(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[GetRelayoutBoundaryReturnT]':
        params = {
            'nodeId': node_id,
        }

        return self._send_command(
            'DOM.getRelayoutBoundary',
            params,
            True,
            lambda data: from_dict(
                GetRelayoutBoundaryReturnT,
                data,
                'camel'
            )
        )

    def get_search_results(
            self,
            search_id: 'str',
            from_index: 'int',
            to_index: 'int'
    ) -> 'IFutureResponse[GetSearchResultsReturnT]':
        params = {
            'searchId': search_id,
            'fromIndex': from_index,
            'toIndex': to_index,
        }

        return self._send_command(
            'DOM.getSearchResults',
            params,
            True,
            lambda data: from_dict(
                GetSearchResultsReturnT,
                data,
                'camel'
            )
        )

    def hide_highlight(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'DOM.hideHighlight',
            params,
            False
        )

    def highlight_node(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'DOM.highlightNode',
            params,
            False
        )

    def highlight_rect(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'DOM.highlightRect',
            params,
            False
        )

    def mark_undoable_state(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'DOM.markUndoableState',
            params,
            False
        )

    def move_to(
            self,
            node_id: 'NodeId',
            target_node_id: 'NodeId',
            insert_before_node_id: 'NodeId' = UNDEFINED
    ) -> 'IFutureResponse[MoveToReturnT]':
        params = {
            'nodeId': node_id,
            'targetNodeId': target_node_id,
        }

        if is_defined(insert_before_node_id):
            params['insertBeforeNodeId'] = insert_before_node_id

        return self._send_command(
            'DOM.moveTo',
            params,
            True,
            lambda data: from_dict(
                MoveToReturnT,
                data,
                'camel'
            )
        )

    def perform_search(
            self,
            query: 'str',
            include_user_agent_shadow_dom: 'bool' = UNDEFINED
    ) -> 'IFutureResponse[PerformSearchReturnT]':
        params = {
            'query': query,
        }

        if is_defined(include_user_agent_shadow_dom):
            params['includeUserAgentShadowDOM'] = include_user_agent_shadow_dom

        return self._send_command(
            'DOM.performSearch',
            params,
            True,
            lambda data: from_dict(
                PerformSearchReturnT,
                data,
                'camel'
            )
        )

    def push_node_by_path_to_frontend(
            self,
            path: 'str'
    ) -> 'IFutureResponse[PushNodeByPathToFrontendReturnT]':
        params = {
            'path': path,
        }

        return self._send_command(
            'DOM.pushNodeByPathToFrontend',
            params,
            True,
            lambda data: from_dict(
                PushNodeByPathToFrontendReturnT,
                data,
                'camel'
            )
        )

    def push_nodes_by_backend_ids_to_frontend(
            self,
            backend_node_ids: 'list'
    ) -> 'IFutureResponse[PushNodesByBackendIdsToFrontendReturnT]':
        params = {
            'backendNodeIds': backend_node_ids,
        }

        return self._send_command(
            'DOM.pushNodesByBackendIdsToFrontend',
            params,
            True,
            lambda data: from_dict(
                PushNodesByBackendIdsToFrontendReturnT,
                data,
                'camel'
            )
        )

    def query_selector(
            self,
            node_id: 'NodeId',
            selector: 'str'
    ) -> 'IFutureResponse[QuerySelectorReturnT]':
        params = {
            'nodeId': node_id,
            'selector': selector,
        }

        return self._send_command(
            'DOM.querySelector',
            params,
            True,
            lambda data: from_dict(
                QuerySelectorReturnT,
                data,
                'camel'
            )
        )

    def query_selector_all(
            self,
            node_id: 'NodeId',
            selector: 'str'
    ) -> 'IFutureResponse[QuerySelectorAllReturnT]':
        params = {
            'nodeId': node_id,
            'selector': selector,
        }

        return self._send_command(
            'DOM.querySelectorAll',
            params,
            True,
            lambda data: from_dict(
                QuerySelectorAllReturnT,
                data,
                'camel'
            )
        )

    def get_top_layer_elements(
            self
    ) -> 'IFutureResponse[GetTopLayerElementsReturnT]':
        params = {}

        return self._send_command(
            'DOM.getTopLayerElements',
            params,
            True,
            lambda data: from_dict(
                GetTopLayerElementsReturnT,
                data,
                'camel'
            )
        )

    def redo(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'DOM.redo',
            params,
            False
        )

    def remove_attribute(
            self,
            node_id: 'NodeId',
            name: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'nodeId': node_id,
            'name': name,
        }

        return self._send_command(
            'DOM.removeAttribute',
            params,
            False
        )

    def remove_node(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[None]':
        params = {
            'nodeId': node_id,
        }

        return self._send_command(
            'DOM.removeNode',
            params,
            False
        )

    def request_child_nodes(
            self,
            node_id: 'NodeId',
            depth: 'int' = UNDEFINED,
            pierce: 'bool' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {
            'nodeId': node_id,
        }

        if is_defined(depth):
            params['depth'] = depth

        if is_defined(pierce):
            params['pierce'] = pierce

        return self._send_command(
            'DOM.requestChildNodes',
            params,
            False
        )

    def request_node(
            self,
            object_id: 'RemoteObjectId'
    ) -> 'IFutureResponse[RequestNodeReturnT]':
        params = {
            'objectId': object_id,
        }

        return self._send_command(
            'DOM.requestNode',
            params,
            True,
            lambda data: from_dict(
                RequestNodeReturnT,
                data,
                'camel'
            )
        )

    def resolve_node(
            self,
            node_id: 'NodeId' = UNDEFINED,
            backend_node_id: 'BackendNodeId' = UNDEFINED,
            object_group: 'str' = UNDEFINED,
            execution_context_id: 'ExecutionContextId' = UNDEFINED
    ) -> 'IFutureResponse[ResolveNodeReturnT]':
        params = {}

        if is_defined(node_id):
            params['nodeId'] = node_id

        if is_defined(backend_node_id):
            params['backendNodeId'] = backend_node_id

        if is_defined(object_group):
            params['objectGroup'] = object_group

        if is_defined(execution_context_id):
            params['executionContextId'] = execution_context_id

        return self._send_command(
            'DOM.resolveNode',
            params,
            True,
            lambda data: from_dict(
                ResolveNodeReturnT,
                data,
                'camel'
            )
        )

    def set_attribute_value(
            self,
            node_id: 'NodeId',
            name: 'str',
            value: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'nodeId': node_id,
            'name': name,
            'value': value,
        }

        return self._send_command(
            'DOM.setAttributeValue',
            params,
            False
        )

    def set_attributes_as_text(
            self,
            node_id: 'NodeId',
            text: 'str',
            name: 'str' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {
            'nodeId': node_id,
            'text': text,
        }

        if is_defined(name):
            params['name'] = name

        return self._send_command(
            'DOM.setAttributesAsText',
            params,
            False
        )

    def set_file_input_files(
            self,
            files: 'list',
            node_id: 'NodeId' = UNDEFINED,
            backend_node_id: 'BackendNodeId' = UNDEFINED,
            object_id: 'RemoteObjectId' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {
            'files': files,
        }

        if is_defined(node_id):
            params['nodeId'] = node_id

        if is_defined(backend_node_id):
            params['backendNodeId'] = backend_node_id

        if is_defined(object_id):
            params['objectId'] = object_id

        return self._send_command(
            'DOM.setFileInputFiles',
            params,
            False
        )

    def set_node_stack_traces_enabled(
            self,
            enable: 'bool'
    ) -> 'IFutureResponse[None]':
        params = {
            'enable': enable,
        }

        return self._send_command(
            'DOM.setNodeStackTracesEnabled',
            params,
            False
        )

    def get_node_stack_traces(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[GetNodeStackTracesReturnT]':
        params = {
            'nodeId': node_id,
        }

        return self._send_command(
            'DOM.getNodeStackTraces',
            params,
            True,
            lambda data: from_dict(
                GetNodeStackTracesReturnT,
                data,
                'camel'
            )
        )

    def get_file_info(
            self,
            object_id: 'RemoteObjectId'
    ) -> 'IFutureResponse[GetFileInfoReturnT]':
        params = {
            'objectId': object_id,
        }

        return self._send_command(
            'DOM.getFileInfo',
            params,
            True,
            lambda data: from_dict(
                GetFileInfoReturnT,
                data,
                'camel'
            )
        )

    def set_inspected_node(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[None]':
        params = {
            'nodeId': node_id,
        }

        return self._send_command(
            'DOM.setInspectedNode',
            params,
            False
        )

    def set_node_name(
            self,
            node_id: 'NodeId',
            name: 'str'
    ) -> 'IFutureResponse[SetNodeNameReturnT]':
        params = {
            'nodeId': node_id,
            'name': name,
        }

        return self._send_command(
            'DOM.setNodeName',
            params,
            True,
            lambda data: from_dict(
                SetNodeNameReturnT,
                data,
                'camel'
            )
        )

    def set_node_value(
            self,
            node_id: 'NodeId',
            value: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'nodeId': node_id,
            'value': value,
        }

        return self._send_command(
            'DOM.setNodeValue',
            params,
            False
        )

    def set_outer_html(
            self,
            node_id: 'NodeId',
            outer_html: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'nodeId': node_id,
            'outerHTML': outer_html,
        }

        return self._send_command(
            'DOM.setOuterHTML',
            params,
            False
        )

    def undo(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'DOM.undo',
            params,
            False
        )

    def get_frame_owner(
            self,
            frame_id: 'FrameId'
    ) -> 'IFutureResponse[GetFrameOwnerReturnT]':
        params = {
            'frameId': frame_id,
        }

        return self._send_command(
            'DOM.getFrameOwner',
            params,
            True,
            lambda data: from_dict(
                GetFrameOwnerReturnT,
                data,
                'camel'
            )
        )

    def get_container_for_node(
            self,
            node_id: 'NodeId',
            container_name: 'str' = UNDEFINED,
            physical_axes: 'PhysicalAxes' = UNDEFINED,
            logical_axes: 'LogicalAxes' = UNDEFINED
    ) -> 'IFutureResponse[GetContainerForNodeReturnT]':
        params = {
            'nodeId': node_id,
        }

        if is_defined(container_name):
            params['containerName'] = container_name

        if is_defined(physical_axes):
            params['physicalAxes'] = physical_axes

        if is_defined(logical_axes):
            params['logicalAxes'] = logical_axes

        return self._send_command(
            'DOM.getContainerForNode',
            params,
            True,
            lambda data: from_dict(
                GetContainerForNodeReturnT,
                data,
                'camel'
            )
        )

    def get_querying_descendants_for_container(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[GetQueryingDescendantsForContainerReturnT]':
        params = {
            'nodeId': node_id,
        }

        return self._send_command(
            'DOM.getQueryingDescendantsForContainer',
            params,
            True,
            lambda data: from_dict(
                GetQueryingDescendantsForContainerReturnT,
                data,
                'camel'
            )
        )
