# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from dataclasses import (
    dataclass
)
from cdp.utils import (
    is_defined,
    UNDEFINED
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.mapper import (
    from_dict,
    to_dict
)
from cdp.domains.headless_experimental.types import (
    BeginFrameReturnT,
    ScreenshotParams
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IFutureResponse
    )


@dataclass
class HeadlessExperimental(BaseDomain):
    def begin_frame(
            self,
            frame_time_ticks: 'float' = UNDEFINED,
            interval: 'float' = UNDEFINED,
            no_display_updates: 'bool' = UNDEFINED,
            screenshot: 'ScreenshotParams' = UNDEFINED
    ) -> 'IFutureResponse[BeginFrameReturnT]':
        params = {}

        if is_defined(frame_time_ticks):
            params['frameTimeTicks'] = frame_time_ticks

        if is_defined(interval):
            params['interval'] = interval

        if is_defined(no_display_updates):
            params['noDisplayUpdates'] = no_display_updates

        if is_defined(screenshot):
            params['screenshot'] = to_dict(
                screenshot,
                'camel'
            )

        return self._send_command(
            'HeadlessExperimental.beginFrame',
            params,
            True,
            lambda data: from_dict(
                BeginFrameReturnT,
                data,
                'camel'
            )
        )

    def disable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'HeadlessExperimental.disable',
            params,
            False
        )

    def enable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'HeadlessExperimental.enable',
            params,
            False
        )
