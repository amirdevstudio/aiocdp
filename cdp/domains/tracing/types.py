# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from typing import (
    Any,
    Literal,
    TYPE_CHECKING
)
from dataclasses import (
    dataclass
)
if TYPE_CHECKING:

MemoryDumpConfig = dict

StreamFormat = Literal[
    'json',
    'proto'
]

StreamCompression = Literal[
    'none',
    'gzip'
]

MemoryDumpLevelOfDetail = Literal[
    'background',
    'light',
    'detailed'
]

TracingBackend = Literal[
    'auto',
    'chrome',
    'system'
]


@dataclass
class TraceConfig:
    record_mode: str
    trace_buffer_size_in_kb: float
    enable_sampling: bool
    enable_systrace: bool
    enable_argument_filter: bool
    included_categories: list
    excluded_categories: list
    synthetic_delays: list
    memory_dump_config: 'MemoryDumpConfig'
    def to_dict(
        self,
        casing_strategy: Literal[
            'snake',
            'camel',
            'pascal'
        ] = 'snake'
    ):

        if casing_strategy == 'snake':
            return {
                'record_mode': self.record_mode,
                'trace_buffer_size_in_kb': self.trace_buffer_size_in_kb,
                'enable_sampling': self.enable_sampling,
                'enable_systrace': self.enable_systrace,
                'enable_argument_filter': self.enable_argument_filter,
                'included_categories': self.included_categories,
                'excluded_categories': self.excluded_categories,
                'synthetic_delays': self.synthetic_delays,
                'memory_dump_config': self.memory_dump_config.to_dict(
                    casing_strategy
                ),
            }
        if casing_strategy == 'camel':
            return {
                'recordMode': self.record_mode,
                'traceBufferSizeInKb': self.trace_buffer_size_in_kb,
                'enableSampling': self.enable_sampling,
                'enableSystrace': self.enable_systrace,
                'enableArgumentFilter': self.enable_argument_filter,
                'includedCategories': self.included_categories,
                'excludedCategories': self.excluded_categories,
                'syntheticDelays': self.synthetic_delays,
                'memoryDumpConfig': self.memory_dump_config.to_dict(
                    casing_strategy
                ),
            }
        if casing_strategy == 'pascal':
            return {
                'RecordMode': self.record_mode,
                'TraceBufferSizeInKb': self.trace_buffer_size_in_kb,
                'EnableSampling': self.enable_sampling,
                'EnableSystrace': self.enable_systrace,
                'EnableArgumentFilter': self.enable_argument_filter,
                'IncludedCategories': self.included_categories,
                'ExcludedCategories': self.excluded_categories,
                'SyntheticDelays': self.synthetic_delays,
                'MemoryDumpConfig': self.memory_dump_config.to_dict(
                    casing_strategy
                ),
            }


@dataclass
class GetCategoriesReturnT:
    categories: list


@dataclass
class RequestMemoryDumpReturnT:
    dump_guid: str
    success: bool
