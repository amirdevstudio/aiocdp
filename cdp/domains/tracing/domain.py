# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from cdp.domains import (
    mappers
)
from cdp.utils import (
    UNDEFINED,
    is_defined
)
from dataclasses import (
    dataclass
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.tracing.types import (
    GetCategoriesReturnType,
    MemoryDumpLevelOfDetail,
    RequestMemoryDumpReturnType,
    StreamCompression,
    StreamFormat,
    TraceConfig,
    TracingBackend
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IFutureResponse
    )


@dataclass
class Tracing(BaseDomain):
    def end(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'Tracing.end',
            params,
            False
        )

    def get_categories(
            self
    ) -> 'IFutureResponse[GetCategoriesReturnType]':
        params = {}

        return self._send_command(
            'Tracing.getCategories',
            params,
            True,
            lambda data: from_dict(
                GetCategoriesReturnType,
                data,
                'camel'
            )
        )

    def record_clock_sync_marker(
            self,
            sync_id: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'syncId': sync_id,
        }

        return self._send_command(
            'Tracing.recordClockSyncMarker',
            params,
            False
        )

    def request_memory_dump(
            self,
            deterministic: 'bool' = UNDEFINED,
            level_of_detail: 'MemoryDumpLevelOfDetail' = UNDEFINED
    ) -> 'IFutureResponse[RequestMemoryDumpReturnType]':
        params = {}

        if is_defined(deterministic):
            params['deterministic'] = deterministic

        if is_defined(level_of_detail):
            params['levelOfDetail'] = to_dict(
                level_of_detail,
                'camel'
            )

        return self._send_command(
            'Tracing.requestMemoryDump',
            params,
            True,
            lambda data: from_dict(
                RequestMemoryDumpReturnType,
                data,
                'camel'
            )
        )

    def start(
            self,
            categories: 'str' = UNDEFINED,
            options: 'str' = UNDEFINED,
            buffer_usage_reporting_interval: 'float' = UNDEFINED,
            transfer_mode: 'str' = UNDEFINED,
            stream_format: 'StreamFormat' = UNDEFINED,
            stream_compression: 'StreamCompression' = UNDEFINED,
            trace_config: 'TraceConfig' = UNDEFINED,
            perfetto_config: 'str' = UNDEFINED,
            tracing_backend: 'TracingBackend' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {}

        if is_defined(categories):
            params['categories'] = categories

        if is_defined(options):
            params['options'] = options

        if is_defined(buffer_usage_reporting_interval):
            params['bufferUsageReportingInterval'] = buffer_usage_reporting_interval

        if is_defined(transfer_mode):
            params['transferMode'] = transfer_mode

        if is_defined(stream_format):
            params['streamFormat'] = to_dict(
                stream_format,
                'camel'
            )

        if is_defined(stream_compression):
            params['streamCompression'] = to_dict(
                stream_compression,
                'camel'
            )

        if is_defined(trace_config):
            params['traceConfig'] = to_dict(
                trace_config,
                'camel'
            )

        if is_defined(perfetto_config):
            params['perfettoConfig'] = perfetto_config

        if is_defined(tracing_backend):
            params['tracingBackend'] = to_dict(
                tracing_backend,
                'camel'
            )

        return self._send_command(
            'Tracing.start',
            params,
            False
        )
