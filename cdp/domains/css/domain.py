# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from dataclasses import (
    dataclass
)
from cdp.utils import (
    is_defined,
    UNDEFINED
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.mapper import (
    from_dict,
    to_dict
)
from cdp.domains.css.types import (
    AddRuleReturnT,
    CollectClassNamesReturnT,
    CreateStyleSheetReturnT,
    GetBackgroundColorsReturnT,
    GetComputedStyleForNodeReturnT,
    GetInlineStylesForNodeReturnT,
    GetLayersForNodeReturnT,
    GetMatchedStylesForNodeReturnT,
    GetMediaQueriesReturnT,
    GetPlatformFontsForNodeReturnT,
    GetStyleSheetTextReturnT,
    SetContainerQueryTextReturnT,
    SetKeyframeKeyReturnT,
    SetMediaTextReturnT,
    SetRuleSelectorReturnT,
    SetScopeTextReturnT,
    SetStyleSheetTextReturnT,
    SetStyleTextsReturnT,
    SetSupportsTextReturnT,
    SourceRange,
    StopRuleUsageTrackingReturnT,
    StyleSheetId,
    TakeComputedStyleUpdatesReturnT,
    TakeCoverageDeltaReturnT
)
from cdp.domains.page.types import (
    FrameId
)
from cdp.domains.dom.types import (
    NodeId
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IFutureResponse
    )


@dataclass
class CSS(BaseDomain):
    def add_rule(
            self,
            style_sheet_id: 'StyleSheetId',
            rule_text: 'str',
            location: 'SourceRange'
    ) -> 'IFutureResponse[AddRuleReturnT]':
        params = {
            'styleSheetId': style_sheet_id,
            'ruleText': rule_text,
            'location': to_dict(
                location,
                'camel'
            ),
        }

        return self._send_command(
            'CSS.addRule',
            params,
            True,
            lambda data: from_dict(
                AddRuleReturnT,
                data,
                'camel'
            )
        )

    def collect_class_names(
            self,
            style_sheet_id: 'StyleSheetId'
    ) -> 'IFutureResponse[CollectClassNamesReturnT]':
        params = {
            'styleSheetId': style_sheet_id,
        }

        return self._send_command(
            'CSS.collectClassNames',
            params,
            True,
            lambda data: from_dict(
                CollectClassNamesReturnT,
                data,
                'camel'
            )
        )

    def create_style_sheet(
            self,
            frame_id: 'FrameId'
    ) -> 'IFutureResponse[CreateStyleSheetReturnT]':
        params = {
            'frameId': frame_id,
        }

        return self._send_command(
            'CSS.createStyleSheet',
            params,
            True,
            lambda data: from_dict(
                CreateStyleSheetReturnT,
                data,
                'camel'
            )
        )

    def disable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'CSS.disable',
            params,
            False
        )

    def enable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'CSS.enable',
            params,
            False
        )

    def force_pseudo_state(
            self,
            node_id: 'NodeId',
            forced_pseudo_classes: 'list'
    ) -> 'IFutureResponse[None]':
        params = {
            'nodeId': node_id,
            'forcedPseudoClasses': forced_pseudo_classes,
        }

        return self._send_command(
            'CSS.forcePseudoState',
            params,
            False
        )

    def get_background_colors(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[GetBackgroundColorsReturnT]':
        params = {
            'nodeId': node_id,
        }

        return self._send_command(
            'CSS.getBackgroundColors',
            params,
            True,
            lambda data: from_dict(
                GetBackgroundColorsReturnT,
                data,
                'camel'
            )
        )

    def get_computed_style_for_node(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[GetComputedStyleForNodeReturnT]':
        params = {
            'nodeId': node_id,
        }

        return self._send_command(
            'CSS.getComputedStyleForNode',
            params,
            True,
            lambda data: from_dict(
                GetComputedStyleForNodeReturnT,
                data,
                'camel'
            )
        )

    def get_inline_styles_for_node(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[GetInlineStylesForNodeReturnT]':
        params = {
            'nodeId': node_id,
        }

        return self._send_command(
            'CSS.getInlineStylesForNode',
            params,
            True,
            lambda data: from_dict(
                GetInlineStylesForNodeReturnT,
                data,
                'camel'
            )
        )

    def get_matched_styles_for_node(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[GetMatchedStylesForNodeReturnT]':
        params = {
            'nodeId': node_id,
        }

        return self._send_command(
            'CSS.getMatchedStylesForNode',
            params,
            True,
            lambda data: from_dict(
                GetMatchedStylesForNodeReturnT,
                data,
                'camel'
            )
        )

    def get_media_queries(
            self
    ) -> 'IFutureResponse[GetMediaQueriesReturnT]':
        params = {}

        return self._send_command(
            'CSS.getMediaQueries',
            params,
            True,
            lambda data: from_dict(
                GetMediaQueriesReturnT,
                data,
                'camel'
            )
        )

    def get_platform_fonts_for_node(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[GetPlatformFontsForNodeReturnT]':
        params = {
            'nodeId': node_id,
        }

        return self._send_command(
            'CSS.getPlatformFontsForNode',
            params,
            True,
            lambda data: from_dict(
                GetPlatformFontsForNodeReturnT,
                data,
                'camel'
            )
        )

    def get_style_sheet_text(
            self,
            style_sheet_id: 'StyleSheetId'
    ) -> 'IFutureResponse[GetStyleSheetTextReturnT]':
        params = {
            'styleSheetId': style_sheet_id,
        }

        return self._send_command(
            'CSS.getStyleSheetText',
            params,
            True,
            lambda data: from_dict(
                GetStyleSheetTextReturnT,
                data,
                'camel'
            )
        )

    def get_layers_for_node(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[GetLayersForNodeReturnT]':
        params = {
            'nodeId': node_id,
        }

        return self._send_command(
            'CSS.getLayersForNode',
            params,
            True,
            lambda data: from_dict(
                GetLayersForNodeReturnT,
                data,
                'camel'
            )
        )

    def track_computed_style_updates(
            self,
            properties_to_track: 'list'
    ) -> 'IFutureResponse[None]':
        params = {
            'propertiesToTrack': [
                to_dict(item, 'camel')
                for item in properties_to_track
            ],
        }

        return self._send_command(
            'CSS.trackComputedStyleUpdates',
            params,
            False
        )

    def take_computed_style_updates(
            self
    ) -> 'IFutureResponse[TakeComputedStyleUpdatesReturnT]':
        params = {}

        return self._send_command(
            'CSS.takeComputedStyleUpdates',
            params,
            True,
            lambda data: from_dict(
                TakeComputedStyleUpdatesReturnT,
                data,
                'camel'
            )
        )

    def set_effective_property_value_for_node(
            self,
            node_id: 'NodeId',
            property_name: 'str',
            value: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'nodeId': node_id,
            'propertyName': property_name,
            'value': value,
        }

        return self._send_command(
            'CSS.setEffectivePropertyValueForNode',
            params,
            False
        )

    def set_keyframe_key(
            self,
            style_sheet_id: 'StyleSheetId',
            range_: 'SourceRange',
            key_text: 'str'
    ) -> 'IFutureResponse[SetKeyframeKeyReturnT]':
        params = {
            'styleSheetId': style_sheet_id,
            'range': to_dict(
                range_,
                'camel'
            ),
            'keyText': key_text,
        }

        return self._send_command(
            'CSS.setKeyframeKey',
            params,
            True,
            lambda data: from_dict(
                SetKeyframeKeyReturnT,
                data,
                'camel'
            )
        )

    def set_media_text(
            self,
            style_sheet_id: 'StyleSheetId',
            range_: 'SourceRange',
            text: 'str'
    ) -> 'IFutureResponse[SetMediaTextReturnT]':
        params = {
            'styleSheetId': style_sheet_id,
            'range': to_dict(
                range_,
                'camel'
            ),
            'text': text,
        }

        return self._send_command(
            'CSS.setMediaText',
            params,
            True,
            lambda data: from_dict(
                SetMediaTextReturnT,
                data,
                'camel'
            )
        )

    def set_container_query_text(
            self,
            style_sheet_id: 'StyleSheetId',
            range_: 'SourceRange',
            text: 'str'
    ) -> 'IFutureResponse[SetContainerQueryTextReturnT]':
        params = {
            'styleSheetId': style_sheet_id,
            'range': to_dict(
                range_,
                'camel'
            ),
            'text': text,
        }

        return self._send_command(
            'CSS.setContainerQueryText',
            params,
            True,
            lambda data: from_dict(
                SetContainerQueryTextReturnT,
                data,
                'camel'
            )
        )

    def set_supports_text(
            self,
            style_sheet_id: 'StyleSheetId',
            range_: 'SourceRange',
            text: 'str'
    ) -> 'IFutureResponse[SetSupportsTextReturnT]':
        params = {
            'styleSheetId': style_sheet_id,
            'range': to_dict(
                range_,
                'camel'
            ),
            'text': text,
        }

        return self._send_command(
            'CSS.setSupportsText',
            params,
            True,
            lambda data: from_dict(
                SetSupportsTextReturnT,
                data,
                'camel'
            )
        )

    def set_scope_text(
            self,
            style_sheet_id: 'StyleSheetId',
            range_: 'SourceRange',
            text: 'str'
    ) -> 'IFutureResponse[SetScopeTextReturnT]':
        params = {
            'styleSheetId': style_sheet_id,
            'range': to_dict(
                range_,
                'camel'
            ),
            'text': text,
        }

        return self._send_command(
            'CSS.setScopeText',
            params,
            True,
            lambda data: from_dict(
                SetScopeTextReturnT,
                data,
                'camel'
            )
        )

    def set_rule_selector(
            self,
            style_sheet_id: 'StyleSheetId',
            range_: 'SourceRange',
            selector: 'str'
    ) -> 'IFutureResponse[SetRuleSelectorReturnT]':
        params = {
            'styleSheetId': style_sheet_id,
            'range': to_dict(
                range_,
                'camel'
            ),
            'selector': selector,
        }

        return self._send_command(
            'CSS.setRuleSelector',
            params,
            True,
            lambda data: from_dict(
                SetRuleSelectorReturnT,
                data,
                'camel'
            )
        )

    def set_style_sheet_text(
            self,
            style_sheet_id: 'StyleSheetId',
            text: 'str'
    ) -> 'IFutureResponse[SetStyleSheetTextReturnT]':
        params = {
            'styleSheetId': style_sheet_id,
            'text': text,
        }

        return self._send_command(
            'CSS.setStyleSheetText',
            params,
            True,
            lambda data: from_dict(
                SetStyleSheetTextReturnT,
                data,
                'camel'
            )
        )

    def set_style_texts(
            self,
            edits: 'list'
    ) -> 'IFutureResponse[SetStyleTextsReturnT]':
        params = {
            'edits': [
                to_dict(item, 'camel')
                for item in edits
            ],
        }

        return self._send_command(
            'CSS.setStyleTexts',
            params,
            True,
            lambda data: from_dict(
                SetStyleTextsReturnT,
                data,
                'camel'
            )
        )

    def start_rule_usage_tracking(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'CSS.startRuleUsageTracking',
            params,
            False
        )

    def stop_rule_usage_tracking(
            self
    ) -> 'IFutureResponse[StopRuleUsageTrackingReturnT]':
        params = {}

        return self._send_command(
            'CSS.stopRuleUsageTracking',
            params,
            True,
            lambda data: from_dict(
                StopRuleUsageTrackingReturnT,
                data,
                'camel'
            )
        )

    def take_coverage_delta(
            self
    ) -> 'IFutureResponse[TakeCoverageDeltaReturnT]':
        params = {}

        return self._send_command(
            'CSS.takeCoverageDelta',
            params,
            True,
            lambda data: from_dict(
                TakeCoverageDeltaReturnT,
                data,
                'camel'
            )
        )

    def set_local_fonts_enabled(
            self,
            enabled: 'bool'
    ) -> 'IFutureResponse[None]':
        params = {
            'enabled': enabled,
        }

        return self._send_command(
            'CSS.setLocalFontsEnabled',
            params,
            False
        )
