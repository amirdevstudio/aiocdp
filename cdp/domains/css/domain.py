# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from cdp.domains import (
    mappers
)
from cdp.utils import (
    UNDEFINED,
    is_defined
)
from dataclasses import (
    dataclass
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.css.types import (
    AddRuleReturnType,
    CollectClassNamesReturnType,
    CreateStyleSheetReturnType,
    FrameId,
    GetBackgroundColorsReturnType,
    GetComputedStyleForNodeReturnType,
    GetInlineStylesForNodeReturnType,
    GetLayersForNodeReturnType,
    GetMatchedStylesForNodeReturnType,
    GetMediaQueriesReturnType,
    GetPlatformFontsForNodeReturnType,
    GetStyleSheetTextReturnType,
    NodeId,
    SetContainerQueryTextReturnType,
    SetKeyframeKeyReturnType,
    SetMediaTextReturnType,
    SetRuleSelectorReturnType,
    SetScopeTextReturnType,
    SetStyleSheetTextReturnType,
    SetStyleTextsReturnType,
    SetSupportsTextReturnType,
    SourceRange,
    StopRuleUsageTrackingReturnType,
    StyleSheetId,
    TakeComputedStyleUpdatesReturnType,
    TakeCoverageDeltaReturnType
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IFutureResponse
    )


@dataclass
class CSS(BaseDomain):
    def add_rule(
            self,
            style_sheet_id: 'StyleSheetId',
            rule_text: 'str',
            location: 'SourceRange'
    ) -> 'IFutureResponse[AddRuleReturnType]':
        params = {
            'styleSheetId': to_dict(
                style_sheet_id,
                'camel'
            ),
            'ruleText': rule_text,
            'location': to_dict(
                location,
                'camel'
            ),
        }

        return self._send_command(
            'CSS.addRule',
            params,
            True,
            lambda data: from_dict(
                AddRuleReturnType,
                data,
                'camel'
            )
        )

    def collect_class_names(
            self,
            style_sheet_id: 'StyleSheetId'
    ) -> 'IFutureResponse[CollectClassNamesReturnType]':
        params = {
            'styleSheetId': to_dict(
                style_sheet_id,
                'camel'
            ),
        }

        return self._send_command(
            'CSS.collectClassNames',
            params,
            True,
            lambda data: from_dict(
                CollectClassNamesReturnType,
                data,
                'camel'
            )
        )

    def create_style_sheet(
            self,
            frame_id: 'FrameId'
    ) -> 'IFutureResponse[CreateStyleSheetReturnType]':
        params = {
            'frameId': to_dict(
                frame_id,
                'camel'
            ),
        }

        return self._send_command(
            'CSS.createStyleSheet',
            params,
            True,
            lambda data: from_dict(
                CreateStyleSheetReturnType,
                data,
                'camel'
            )
        )

    def disable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'CSS.disable',
            params,
            False
        )

    def enable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'CSS.enable',
            params,
            False
        )

    def force_pseudo_state(
            self,
            node_id: 'NodeId',
            forced_pseudo_classes: 'list'
    ) -> 'IFutureResponse[None]':
        params = {
            'nodeId': to_dict(
                node_id,
                'camel'
            ),
            'forcedPseudoClasses': forced_pseudo_classes,
        }

        return self._send_command(
            'CSS.forcePseudoState',
            params,
            False
        )

    def get_background_colors(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[GetBackgroundColorsReturnType]':
        params = {
            'nodeId': to_dict(
                node_id,
                'camel'
            ),
        }

        return self._send_command(
            'CSS.getBackgroundColors',
            params,
            True,
            lambda data: from_dict(
                GetBackgroundColorsReturnType,
                data,
                'camel'
            )
        )

    def get_computed_style_for_node(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[GetComputedStyleForNodeReturnType]':
        params = {
            'nodeId': to_dict(
                node_id,
                'camel'
            ),
        }

        return self._send_command(
            'CSS.getComputedStyleForNode',
            params,
            True,
            lambda data: from_dict(
                GetComputedStyleForNodeReturnType,
                data,
                'camel'
            )
        )

    def get_inline_styles_for_node(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[GetInlineStylesForNodeReturnType]':
        params = {
            'nodeId': to_dict(
                node_id,
                'camel'
            ),
        }

        return self._send_command(
            'CSS.getInlineStylesForNode',
            params,
            True,
            lambda data: from_dict(
                GetInlineStylesForNodeReturnType,
                data,
                'camel'
            )
        )

    def get_matched_styles_for_node(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[GetMatchedStylesForNodeReturnType]':
        params = {
            'nodeId': to_dict(
                node_id,
                'camel'
            ),
        }

        return self._send_command(
            'CSS.getMatchedStylesForNode',
            params,
            True,
            lambda data: from_dict(
                GetMatchedStylesForNodeReturnType,
                data,
                'camel'
            )
        )

    def get_media_queries(
            self
    ) -> 'IFutureResponse[GetMediaQueriesReturnType]':
        params = {}

        return self._send_command(
            'CSS.getMediaQueries',
            params,
            True,
            lambda data: from_dict(
                GetMediaQueriesReturnType,
                data,
                'camel'
            )
        )

    def get_platform_fonts_for_node(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[GetPlatformFontsForNodeReturnType]':
        params = {
            'nodeId': to_dict(
                node_id,
                'camel'
            ),
        }

        return self._send_command(
            'CSS.getPlatformFontsForNode',
            params,
            True,
            lambda data: from_dict(
                GetPlatformFontsForNodeReturnType,
                data,
                'camel'
            )
        )

    def get_style_sheet_text(
            self,
            style_sheet_id: 'StyleSheetId'
    ) -> 'IFutureResponse[GetStyleSheetTextReturnType]':
        params = {
            'styleSheetId': to_dict(
                style_sheet_id,
                'camel'
            ),
        }

        return self._send_command(
            'CSS.getStyleSheetText',
            params,
            True,
            lambda data: from_dict(
                GetStyleSheetTextReturnType,
                data,
                'camel'
            )
        )

    def get_layers_for_node(
            self,
            node_id: 'NodeId'
    ) -> 'IFutureResponse[GetLayersForNodeReturnType]':
        params = {
            'nodeId': to_dict(
                node_id,
                'camel'
            ),
        }

        return self._send_command(
            'CSS.getLayersForNode',
            params,
            True,
            lambda data: from_dict(
                GetLayersForNodeReturnType,
                data,
                'camel'
            )
        )

    def track_computed_style_updates(
            self,
            properties_to_track: 'list'
    ) -> 'IFutureResponse[None]':
        params = {
            'propertiesToTrack': properties_to_track,
        }

        return self._send_command(
            'CSS.trackComputedStyleUpdates',
            params,
            False
        )

    def take_computed_style_updates(
            self
    ) -> 'IFutureResponse[TakeComputedStyleUpdatesReturnType]':
        params = {}

        return self._send_command(
            'CSS.takeComputedStyleUpdates',
            params,
            True,
            lambda data: from_dict(
                TakeComputedStyleUpdatesReturnType,
                data,
                'camel'
            )
        )

    def set_effective_property_value_for_node(
            self,
            node_id: 'NodeId',
            property_name: 'str',
            value: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'nodeId': to_dict(
                node_id,
                'camel'
            ),
            'propertyName': property_name,
            'value': value,
        }

        return self._send_command(
            'CSS.setEffectivePropertyValueForNode',
            params,
            False
        )

    def set_keyframe_key(
            self,
            style_sheet_id: 'StyleSheetId',
            range_: 'SourceRange',
            key_text: 'str'
    ) -> 'IFutureResponse[SetKeyframeKeyReturnType]':
        params = {
            'styleSheetId': to_dict(
                style_sheet_id,
                'camel'
            ),
            'range': to_dict(
                range_,
                'camel'
            ),
            'keyText': key_text,
        }

        return self._send_command(
            'CSS.setKeyframeKey',
            params,
            True,
            lambda data: from_dict(
                SetKeyframeKeyReturnType,
                data,
                'camel'
            )
        )

    def set_media_text(
            self,
            style_sheet_id: 'StyleSheetId',
            range_: 'SourceRange',
            text: 'str'
    ) -> 'IFutureResponse[SetMediaTextReturnType]':
        params = {
            'styleSheetId': to_dict(
                style_sheet_id,
                'camel'
            ),
            'range': to_dict(
                range_,
                'camel'
            ),
            'text': text,
        }

        return self._send_command(
            'CSS.setMediaText',
            params,
            True,
            lambda data: from_dict(
                SetMediaTextReturnType,
                data,
                'camel'
            )
        )

    def set_container_query_text(
            self,
            style_sheet_id: 'StyleSheetId',
            range_: 'SourceRange',
            text: 'str'
    ) -> 'IFutureResponse[SetContainerQueryTextReturnType]':
        params = {
            'styleSheetId': to_dict(
                style_sheet_id,
                'camel'
            ),
            'range': to_dict(
                range_,
                'camel'
            ),
            'text': text,
        }

        return self._send_command(
            'CSS.setContainerQueryText',
            params,
            True,
            lambda data: from_dict(
                SetContainerQueryTextReturnType,
                data,
                'camel'
            )
        )

    def set_supports_text(
            self,
            style_sheet_id: 'StyleSheetId',
            range_: 'SourceRange',
            text: 'str'
    ) -> 'IFutureResponse[SetSupportsTextReturnType]':
        params = {
            'styleSheetId': to_dict(
                style_sheet_id,
                'camel'
            ),
            'range': to_dict(
                range_,
                'camel'
            ),
            'text': text,
        }

        return self._send_command(
            'CSS.setSupportsText',
            params,
            True,
            lambda data: from_dict(
                SetSupportsTextReturnType,
                data,
                'camel'
            )
        )

    def set_scope_text(
            self,
            style_sheet_id: 'StyleSheetId',
            range_: 'SourceRange',
            text: 'str'
    ) -> 'IFutureResponse[SetScopeTextReturnType]':
        params = {
            'styleSheetId': to_dict(
                style_sheet_id,
                'camel'
            ),
            'range': to_dict(
                range_,
                'camel'
            ),
            'text': text,
        }

        return self._send_command(
            'CSS.setScopeText',
            params,
            True,
            lambda data: from_dict(
                SetScopeTextReturnType,
                data,
                'camel'
            )
        )

    def set_rule_selector(
            self,
            style_sheet_id: 'StyleSheetId',
            range_: 'SourceRange',
            selector: 'str'
    ) -> 'IFutureResponse[SetRuleSelectorReturnType]':
        params = {
            'styleSheetId': to_dict(
                style_sheet_id,
                'camel'
            ),
            'range': to_dict(
                range_,
                'camel'
            ),
            'selector': selector,
        }

        return self._send_command(
            'CSS.setRuleSelector',
            params,
            True,
            lambda data: from_dict(
                SetRuleSelectorReturnType,
                data,
                'camel'
            )
        )

    def set_style_sheet_text(
            self,
            style_sheet_id: 'StyleSheetId',
            text: 'str'
    ) -> 'IFutureResponse[SetStyleSheetTextReturnType]':
        params = {
            'styleSheetId': to_dict(
                style_sheet_id,
                'camel'
            ),
            'text': text,
        }

        return self._send_command(
            'CSS.setStyleSheetText',
            params,
            True,
            lambda data: from_dict(
                SetStyleSheetTextReturnType,
                data,
                'camel'
            )
        )

    def set_style_texts(
            self,
            edits: 'list'
    ) -> 'IFutureResponse[SetStyleTextsReturnType]':
        params = {
            'edits': edits,
        }

        return self._send_command(
            'CSS.setStyleTexts',
            params,
            True,
            lambda data: from_dict(
                SetStyleTextsReturnType,
                data,
                'camel'
            )
        )

    def start_rule_usage_tracking(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'CSS.startRuleUsageTracking',
            params,
            False
        )

    def stop_rule_usage_tracking(
            self
    ) -> 'IFutureResponse[StopRuleUsageTrackingReturnType]':
        params = {}

        return self._send_command(
            'CSS.stopRuleUsageTracking',
            params,
            True,
            lambda data: from_dict(
                StopRuleUsageTrackingReturnType,
                data,
                'camel'
            )
        )

    def take_coverage_delta(
            self
    ) -> 'IFutureResponse[TakeCoverageDeltaReturnType]':
        params = {}

        return self._send_command(
            'CSS.takeCoverageDelta',
            params,
            True,
            lambda data: from_dict(
                TakeCoverageDeltaReturnType,
                data,
                'camel'
            )
        )

    def set_local_fonts_enabled(
            self,
            enabled: 'bool'
    ) -> 'IFutureResponse[None]':
        params = {
            'enabled': enabled,
        }

        return self._send_command(
            'CSS.setLocalFontsEnabled',
            params,
            False
        )
