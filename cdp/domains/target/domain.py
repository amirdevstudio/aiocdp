# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from cdp.domains import (
    mappers
)
from cdp.utils import (
    UNDEFINED,
    is_defined
)
from dataclasses import (
    dataclass
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.target.types import (
    AttachToBrowserTargetReturnType,
    AttachToTargetReturnType,
    BrowserContextID,
    CloseTargetReturnType,
    CreateBrowserContextReturnType,
    CreateTargetReturnType,
    GetBrowserContextsReturnType,
    GetTargetInfoReturnType,
    GetTargetsReturnType,
    SessionID,
    TargetFilter,
    TargetID
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IFutureResponse
    )


@dataclass
class Target(BaseDomain):
    def activate_target(
            self,
            target_id: 'TargetID'
    ) -> 'IFutureResponse[None]':
        params = {
            'targetId': to_dict(
                target_id,
                'camel'
            ),
        }

        return self._send_command(
            'Target.activateTarget',
            params,
            False
        )

    def attach_to_target(
            self,
            target_id: 'TargetID',
            flatten: 'bool' = UNDEFINED
    ) -> 'IFutureResponse[AttachToTargetReturnType]':
        params = {
            'targetId': to_dict(
                target_id,
                'camel'
            ),
        }

        if is_defined(flatten):
            params['flatten'] = flatten

        return self._send_command(
            'Target.attachToTarget',
            params,
            True,
            lambda data: from_dict(
                AttachToTargetReturnType,
                data,
                'camel'
            )
        )

    def attach_to_browser_target(
            self
    ) -> 'IFutureResponse[AttachToBrowserTargetReturnType]':
        params = {}

        return self._send_command(
            'Target.attachToBrowserTarget',
            params,
            True,
            lambda data: from_dict(
                AttachToBrowserTargetReturnType,
                data,
                'camel'
            )
        )

    def close_target(
            self,
            target_id: 'TargetID'
    ) -> 'IFutureResponse[CloseTargetReturnType]':
        params = {
            'targetId': to_dict(
                target_id,
                'camel'
            ),
        }

        return self._send_command(
            'Target.closeTarget',
            params,
            True,
            lambda data: from_dict(
                CloseTargetReturnType,
                data,
                'camel'
            )
        )

    def expose_dev_tools_protocol(
            self,
            target_id: 'TargetID',
            binding_name: 'str' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {
            'targetId': to_dict(
                target_id,
                'camel'
            ),
        }

        if is_defined(binding_name):
            params['bindingName'] = binding_name

        return self._send_command(
            'Target.exposeDevToolsProtocol',
            params,
            False
        )

    def create_browser_context(
            self,
            dispose_on_detach: 'bool' = UNDEFINED,
            proxy_server: 'str' = UNDEFINED,
            proxy_bypass_list: 'str' = UNDEFINED,
            origins_with_universal_network_access: 'list' = UNDEFINED
    ) -> 'IFutureResponse[CreateBrowserContextReturnType]':
        params = {}

        if is_defined(dispose_on_detach):
            params['disposeOnDetach'] = dispose_on_detach

        if is_defined(proxy_server):
            params['proxyServer'] = proxy_server

        if is_defined(proxy_bypass_list):
            params['proxyBypassList'] = proxy_bypass_list

        if is_defined(origins_with_universal_network_access):
            params['originsWithUniversalNetworkAccess'] = origins_with_universal_network_access

        return self._send_command(
            'Target.createBrowserContext',
            params,
            True,
            lambda data: from_dict(
                CreateBrowserContextReturnType,
                data,
                'camel'
            )
        )

    def get_browser_contexts(
            self
    ) -> 'IFutureResponse[GetBrowserContextsReturnType]':
        params = {}

        return self._send_command(
            'Target.getBrowserContexts',
            params,
            True,
            lambda data: from_dict(
                GetBrowserContextsReturnType,
                data,
                'camel'
            )
        )

    def create_target(
            self,
            url: 'str',
            width: 'int' = UNDEFINED,
            height: 'int' = UNDEFINED,
            browser_context_id: 'BrowserContextID' = UNDEFINED,
            enable_begin_frame_control: 'bool' = UNDEFINED,
            new_window: 'bool' = UNDEFINED,
            background: 'bool' = UNDEFINED,
            for_tab: 'bool' = UNDEFINED
    ) -> 'IFutureResponse[CreateTargetReturnType]':
        params = {
            'url': url,
        }

        if is_defined(width):
            params['width'] = width

        if is_defined(height):
            params['height'] = height

        if is_defined(browser_context_id):
            params['browserContextId'] = to_dict(
                browser_context_id,
                'camel'
            )

        if is_defined(enable_begin_frame_control):
            params['enableBeginFrameControl'] = enable_begin_frame_control

        if is_defined(new_window):
            params['newWindow'] = new_window

        if is_defined(background):
            params['background'] = background

        if is_defined(for_tab):
            params['forTab'] = for_tab

        return self._send_command(
            'Target.createTarget',
            params,
            True,
            lambda data: from_dict(
                CreateTargetReturnType,
                data,
                'camel'
            )
        )

    def detach_from_target(
            self,
            session_id: 'SessionID' = UNDEFINED,
            target_id: 'TargetID' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {}

        if is_defined(session_id):
            params['sessionId'] = to_dict(
                session_id,
                'camel'
            )

        if is_defined(target_id):
            params['targetId'] = to_dict(
                target_id,
                'camel'
            )

        return self._send_command(
            'Target.detachFromTarget',
            params,
            False
        )

    def dispose_browser_context(
            self,
            browser_context_id: 'BrowserContextID'
    ) -> 'IFutureResponse[None]':
        params = {
            'browserContextId': to_dict(
                browser_context_id,
                'camel'
            ),
        }

        return self._send_command(
            'Target.disposeBrowserContext',
            params,
            False
        )

    def get_target_info(
            self,
            target_id: 'TargetID' = UNDEFINED
    ) -> 'IFutureResponse[GetTargetInfoReturnType]':
        params = {}

        if is_defined(target_id):
            params['targetId'] = to_dict(
                target_id,
                'camel'
            )

        return self._send_command(
            'Target.getTargetInfo',
            params,
            True,
            lambda data: from_dict(
                GetTargetInfoReturnType,
                data,
                'camel'
            )
        )

    def get_targets(
            self,
            filter_: 'TargetFilter' = UNDEFINED
    ) -> 'IFutureResponse[GetTargetsReturnType]':
        params = {}

        if is_defined(filter_):
            params['filter'] = to_dict(
                filter_,
                'camel'
            )

        return self._send_command(
            'Target.getTargets',
            params,
            True,
            lambda data: from_dict(
                GetTargetsReturnType,
                data,
                'camel'
            )
        )

    def send_message_to_target(
            self,
            message: 'str',
            session_id: 'SessionID' = UNDEFINED,
            target_id: 'TargetID' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {
            'message': message,
        }

        if is_defined(session_id):
            params['sessionId'] = to_dict(
                session_id,
                'camel'
            )

        if is_defined(target_id):
            params['targetId'] = to_dict(
                target_id,
                'camel'
            )

        return self._send_command(
            'Target.sendMessageToTarget',
            params,
            False
        )

    def set_auto_attach(
            self,
            auto_attach: 'bool',
            wait_for_debugger_on_start: 'bool',
            flatten: 'bool' = UNDEFINED,
            filter_: 'TargetFilter' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {
            'autoAttach': auto_attach,
            'waitForDebuggerOnStart': wait_for_debugger_on_start,
        }

        if is_defined(flatten):
            params['flatten'] = flatten

        if is_defined(filter_):
            params['filter'] = to_dict(
                filter_,
                'camel'
            )

        return self._send_command(
            'Target.setAutoAttach',
            params,
            False
        )

    def auto_attach_related(
            self,
            target_id: 'TargetID',
            wait_for_debugger_on_start: 'bool',
            filter_: 'TargetFilter' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {
            'targetId': to_dict(
                target_id,
                'camel'
            ),
            'waitForDebuggerOnStart': wait_for_debugger_on_start,
        }

        if is_defined(filter_):
            params['filter'] = to_dict(
                filter_,
                'camel'
            )

        return self._send_command(
            'Target.autoAttachRelated',
            params,
            False
        )

    def set_discover_targets(
            self,
            discover: 'bool',
            filter_: 'TargetFilter' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {
            'discover': discover,
        }

        if is_defined(filter_):
            params['filter'] = to_dict(
                filter_,
                'camel'
            )

        return self._send_command(
            'Target.setDiscoverTargets',
            params,
            False
        )

    def set_remote_locations(
            self,
            locations: 'list'
    ) -> 'IFutureResponse[None]':
        params = {
            'locations': locations,
        }

        return self._send_command(
            'Target.setRemoteLocations',
            params,
            False
        )
