# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from dataclasses import (
    dataclass
)
from cdp.utils import (
    is_defined,
    UNDEFINED
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.mapper import (
    from_dict,
    to_dict
)
from cdp.domains.service_worker.types import (
    RegistrationID
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IFutureResponse
    )


@dataclass
class ServiceWorker(BaseDomain):
    def deliver_push_message(
            self,
            origin: 'str',
            registration_id: 'RegistrationID',
            data: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'origin': origin,
            'registrationId': registration_id,
            'data': data,
        }

        return self._send_command(
            'ServiceWorker.deliverPushMessage',
            params,
            False
        )

    def disable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'ServiceWorker.disable',
            params,
            False
        )

    def dispatch_sync_event(
            self,
            origin: 'str',
            registration_id: 'RegistrationID',
            tag: 'str',
            last_chance: 'bool'
    ) -> 'IFutureResponse[None]':
        params = {
            'origin': origin,
            'registrationId': registration_id,
            'tag': tag,
            'lastChance': last_chance,
        }

        return self._send_command(
            'ServiceWorker.dispatchSyncEvent',
            params,
            False
        )

    def dispatch_periodic_sync_event(
            self,
            origin: 'str',
            registration_id: 'RegistrationID',
            tag: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'origin': origin,
            'registrationId': registration_id,
            'tag': tag,
        }

        return self._send_command(
            'ServiceWorker.dispatchPeriodicSyncEvent',
            params,
            False
        )

    def enable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'ServiceWorker.enable',
            params,
            False
        )

    def inspect_worker(
            self,
            version_id: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'versionId': version_id,
        }

        return self._send_command(
            'ServiceWorker.inspectWorker',
            params,
            False
        )

    def set_force_update_on_page_load(
            self,
            force_update_on_page_load: 'bool'
    ) -> 'IFutureResponse[None]':
        params = {
            'forceUpdateOnPageLoad': force_update_on_page_load,
        }

        return self._send_command(
            'ServiceWorker.setForceUpdateOnPageLoad',
            params,
            False
        )

    def skip_waiting(
            self,
            scope_url: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'scopeURL': scope_url,
        }

        return self._send_command(
            'ServiceWorker.skipWaiting',
            params,
            False
        )

    def start_worker(
            self,
            scope_url: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'scopeURL': scope_url,
        }

        return self._send_command(
            'ServiceWorker.startWorker',
            params,
            False
        )

    def stop_all_workers(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'ServiceWorker.stopAllWorkers',
            params,
            False
        )

    def stop_worker(
            self,
            version_id: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'versionId': version_id,
        }

        return self._send_command(
            'ServiceWorker.stopWorker',
            params,
            False
        )

    def unregister(
            self,
            scope_url: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'scopeURL': scope_url,
        }

        return self._send_command(
            'ServiceWorker.unregister',
            params,
            False
        )

    def update_registration(
            self,
            scope_url: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'scopeURL': scope_url,
        }

        return self._send_command(
            'ServiceWorker.updateRegistration',
            params,
            False
        )
