# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from cdp.domains import (
    mappers
)
from cdp.utils import (
    UNDEFINED,
    is_defined
)
from dataclasses import (
    dataclass
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.dom_storage.types import (
    GetDOMStorageItemsReturnType,
    StorageId
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IFutureResponse
    )


@dataclass
class DOMStorage(BaseDomain):
    def clear(
            self,
            storage_id: 'StorageId'
    ) -> 'IFutureResponse[None]':
        params = {
            'storageId': to_dict(
                storage_id,
                'camel'
            ),
        }

        return self._send_command(
            'DOMStorage.clear',
            params,
            False
        )

    def disable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'DOMStorage.disable',
            params,
            False
        )

    def enable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'DOMStorage.enable',
            params,
            False
        )

    def get_dom_storage_items(
            self,
            storage_id: 'StorageId'
    ) -> 'IFutureResponse[GetDOMStorageItemsReturnType]':
        params = {
            'storageId': to_dict(
                storage_id,
                'camel'
            ),
        }

        return self._send_command(
            'DOMStorage.getDOMStorageItems',
            params,
            True,
            lambda data: from_dict(
                GetDOMStorageItemsReturnType,
                data,
                'camel'
            )
        )

    def remove_dom_storage_item(
            self,
            storage_id: 'StorageId',
            key: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'storageId': to_dict(
                storage_id,
                'camel'
            ),
            'key': key,
        }

        return self._send_command(
            'DOMStorage.removeDOMStorageItem',
            params,
            False
        )

    def set_dom_storage_item(
            self,
            storage_id: 'StorageId',
            key: 'str',
            value: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'storageId': to_dict(
                storage_id,
                'camel'
            ),
            'key': key,
            'value': value,
        }

        return self._send_command(
            'DOMStorage.setDOMStorageItem',
            params,
            False
        )
