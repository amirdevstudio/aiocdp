# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains import (
    mappers
)
from cdp.utils import (
    is_defined
)
from typing import (
    TYPE_CHECKING
)
if TYPE_CHECKING:
    from cdp.domains.accessibility.types import (
        AXNode,
        AXProperty,
        AXRelatedNode,
        AXValue,
        AXValueSource
    )


def _ax_value_source__to_camel_dict(o: AXValueSource) -> dict:
    mapper_keys = {
        'type': (
            'accessibility.AXValueSourceType',
            'to_dict',
            'camel'
        ),
        'value': (
            'accessibility.AXValue',
            'to_dict',
            'camel'
        ),
        'attributeValue': (
            'accessibility.AXValue',
            'to_dict',
            'camel'
        ),
        'nativeSource': (
            'accessibility.AXValueNativeSourceType',
            'to_dict',
            'camel'
        ),
        'nativeSourceValue': (
            'accessibility.AXValue',
            'to_dict',
            'camel'
        ),
    }
    result = {
        'type': (
            mappers.get_mapper(mapper_keys['type'])(
            o.type
        )
        ),
    }

    if is_defined(o.value):
        result['value'] = mappers.get_mapper(mapper_keys['value'])(
            o.value
        )

    if is_defined(o.attribute):
        result['attribute'] = o.attribute

    if is_defined(o.attribute_value):
        result['attributeValue'] = mappers.get_mapper(mapper_keys['attributeValue'])(
            o.attribute_value
        )

    if is_defined(o.superseded):
        result['superseded'] = o.superseded

    if is_defined(o.native_source):
        result['nativeSource'] = mappers.get_mapper(mapper_keys['nativeSource'])(
            o.native_source
        )

    if is_defined(o.native_source_value):
        result['nativeSourceValue'] = mappers.get_mapper(mapper_keys['nativeSourceValue'])(
            o.native_source_value
        )

    if is_defined(o.invalid):
        result['invalid'] = o.invalid

    if is_defined(o.invalid_reason):
        result['invalidReason'] = o.invalid_reason

    return result


def _ax_related_node__to_camel_dict(o: AXRelatedNode) -> dict:
    mapper_keys = {
        'backendDOMNodeId': (
            'accessibility.BackendNodeId',
            'to_dict',
            'camel'
        ),
    }
    result = {
        'backendDOMNodeId': (
            mappers.get_mapper(mapper_keys['backendDOMNodeId'])(
            o.backend_dom_node_id
        )
        ),
    }

    if is_defined(o.idref):
        result['idref'] = o.idref

    if is_defined(o.text):
        result['text'] = o.text

    return result


def _ax_property__to_camel_dict(o: AXProperty) -> dict:
    mapper_keys = {
        'name': (
            'accessibility.AXPropertyName',
            'to_dict',
            'camel'
        ),
        'value': (
            'accessibility.AXValue',
            'to_dict',
            'camel'
        ),
    }
    result = {
        'name': (
            mappers.get_mapper(mapper_keys['name'])(
            o.name
        )
        ),
        'value': (
            mappers.get_mapper(mapper_keys['value'])(
            o.value
        )
        ),
    }

    return result


def _ax_value__to_camel_dict(o: AXValue) -> dict:
    mapper_keys = {
        'type': (
            'accessibility.AXValueType',
            'to_dict',
            'camel'
        ),
        'relatedNodes': (
            'accessibility.AXRelatedNode',
            'to_dict',
            'camel'
        ),
        'sources': (
            'accessibility.AXValueSource',
            'to_dict',
            'camel'
        ),
    }
    result = {
        'type': (
            mappers.get_mapper(mapper_keys['type'])(
            o.type
        )
        ),
    }

    if is_defined(o.value):
        result['value'] = o.value

    if is_defined(o.related_nodes):
        result['relatedNodes'] = list(
            map(
                mappers.get_mapper(mapper_keys['relatedNodes']),
                o.related_nodes
            )
        )

    if is_defined(o.sources):
        result['sources'] = list(
            map(
                mappers.get_mapper(mapper_keys['sources']),
                o.sources
            )
        )

    return result


def _ax_node__to_camel_dict(o: AXNode) -> dict:
    mapper_keys = {
        'nodeId': (
            'accessibility.AXNodeId',
            'to_dict',
            'camel'
        ),
        'ignoredReasons': (
            'accessibility.AXProperty',
            'to_dict',
            'camel'
        ),
        'role': (
            'accessibility.AXValue',
            'to_dict',
            'camel'
        ),
        'chromeRole': (
            'accessibility.AXValue',
            'to_dict',
            'camel'
        ),
        'name': (
            'accessibility.AXValue',
            'to_dict',
            'camel'
        ),
        'description': (
            'accessibility.AXValue',
            'to_dict',
            'camel'
        ),
        'value': (
            'accessibility.AXValue',
            'to_dict',
            'camel'
        ),
        'properties': (
            'accessibility.AXProperty',
            'to_dict',
            'camel'
        ),
        'parentId': (
            'accessibility.AXNodeId',
            'to_dict',
            'camel'
        ),
        'childIds': (
            'accessibility.AXNodeId',
            'to_dict',
            'camel'
        ),
        'backendDOMNodeId': (
            'accessibility.BackendNodeId',
            'to_dict',
            'camel'
        ),
        'frameId': (
            'accessibility.FrameId',
            'to_dict',
            'camel'
        ),
    }
    result = {
        'nodeId': (
            mappers.get_mapper(mapper_keys['nodeId'])(
            o.node_id
        )
        ),
        'ignored': (
            o.ignored
        ),
    }

    if is_defined(o.ignored_reasons):
        result['ignoredReasons'] = list(
            map(
                mappers.get_mapper(mapper_keys['ignoredReasons']),
                o.ignored_reasons
            )
        )

    if is_defined(o.role):
        result['role'] = mappers.get_mapper(mapper_keys['role'])(
            o.role
        )

    if is_defined(o.chrome_role):
        result['chromeRole'] = mappers.get_mapper(mapper_keys['chromeRole'])(
            o.chrome_role
        )

    if is_defined(o.name):
        result['name'] = mappers.get_mapper(mapper_keys['name'])(
            o.name
        )

    if is_defined(o.description):
        result['description'] = mappers.get_mapper(mapper_keys['description'])(
            o.description
        )

    if is_defined(o.value):
        result['value'] = mappers.get_mapper(mapper_keys['value'])(
            o.value
        )

    if is_defined(o.properties):
        result['properties'] = list(
            map(
                mappers.get_mapper(mapper_keys['properties']),
                o.properties
            )
        )

    if is_defined(o.parent_id):
        result['parentId'] = mappers.get_mapper(mapper_keys['parentId'])(
            o.parent_id
        )

    if is_defined(o.child_ids):
        result['childIds'] = list(
            map(
                mappers.get_mapper(mapper_keys['childIds']),
                o.child_ids
            )
        )

    if is_defined(o.backend_dom_node_id):
        result['backendDOMNodeId'] = mappers.get_mapper(mapper_keys['backendDOMNodeId'])(
            o.backend_dom_node_id
        )

    if is_defined(o.frame_id):
        result['frameId'] = mappers.get_mapper(mapper_keys['frameId'])(
            o.frame_id
        )

    return result
