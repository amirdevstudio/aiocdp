# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from cdp.domains import (
    mappers
)
from cdp.utils import (
    UNDEFINED,
    is_defined
)
from dataclasses import (
    dataclass
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.accessibility.types import (
    AXNodeId,
    BackendNodeId,
    FrameId,
    GetAXNodeAndAncestorsReturnType,
    GetChildAXNodesReturnType,
    GetFullAXTreeReturnType,
    GetPartialAXTreeReturnType,
    GetRootAXNodeReturnType,
    NodeId,
    QueryAXTreeReturnType,
    RemoteObjectId
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IFutureResponse
    )


@dataclass
class Accessibility(BaseDomain):
    def disable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'Accessibility.disable',
            params,
            False
        )

    def enable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'Accessibility.enable',
            params,
            False
        )

    def get_partial_ax_tree(
            self,
            node_id: 'NodeId' = UNDEFINED,
            backend_node_id: 'BackendNodeId' = UNDEFINED,
            object_id: 'RemoteObjectId' = UNDEFINED,
            fetch_relatives: 'bool' = UNDEFINED
    ) -> 'IFutureResponse[GetPartialAXTreeReturnType]':
        params = {}

        if is_defined(node_id):
            params['nodeId'] = to_dict(
                node_id,
                'camel'
            )

        if is_defined(backend_node_id):
            params['backendNodeId'] = to_dict(
                backend_node_id,
                'camel'
            )

        if is_defined(object_id):
            params['objectId'] = to_dict(
                object_id,
                'camel'
            )

        if is_defined(fetch_relatives):
            params['fetchRelatives'] = fetch_relatives

        return self._send_command(
            'Accessibility.getPartialAXTree',
            params,
            True,
            lambda data: from_dict(
                GetPartialAXTreeReturnType,
                data,
                'camel'
            )
        )

    def get_full_ax_tree(
            self,
            depth: 'int' = UNDEFINED,
            frame_id: 'FrameId' = UNDEFINED
    ) -> 'IFutureResponse[GetFullAXTreeReturnType]':
        params = {}

        if is_defined(depth):
            params['depth'] = depth

        if is_defined(frame_id):
            params['frameId'] = to_dict(
                frame_id,
                'camel'
            )

        return self._send_command(
            'Accessibility.getFullAXTree',
            params,
            True,
            lambda data: from_dict(
                GetFullAXTreeReturnType,
                data,
                'camel'
            )
        )

    def get_root_ax_node(
            self,
            frame_id: 'FrameId' = UNDEFINED
    ) -> 'IFutureResponse[GetRootAXNodeReturnType]':
        params = {}

        if is_defined(frame_id):
            params['frameId'] = to_dict(
                frame_id,
                'camel'
            )

        return self._send_command(
            'Accessibility.getRootAXNode',
            params,
            True,
            lambda data: from_dict(
                GetRootAXNodeReturnType,
                data,
                'camel'
            )
        )

    def get_ax_node_and_ancestors(
            self,
            node_id: 'NodeId' = UNDEFINED,
            backend_node_id: 'BackendNodeId' = UNDEFINED,
            object_id: 'RemoteObjectId' = UNDEFINED
    ) -> 'IFutureResponse[GetAXNodeAndAncestorsReturnType]':
        params = {}

        if is_defined(node_id):
            params['nodeId'] = to_dict(
                node_id,
                'camel'
            )

        if is_defined(backend_node_id):
            params['backendNodeId'] = to_dict(
                backend_node_id,
                'camel'
            )

        if is_defined(object_id):
            params['objectId'] = to_dict(
                object_id,
                'camel'
            )

        return self._send_command(
            'Accessibility.getAXNodeAndAncestors',
            params,
            True,
            lambda data: from_dict(
                GetAXNodeAndAncestorsReturnType,
                data,
                'camel'
            )
        )

    def get_child_ax_nodes(
            self,
            id_: 'AXNodeId',
            frame_id: 'FrameId' = UNDEFINED
    ) -> 'IFutureResponse[GetChildAXNodesReturnType]':
        params = {
            'id': to_dict(
                id_,
                'camel'
            ),
        }

        if is_defined(frame_id):
            params['frameId'] = to_dict(
                frame_id,
                'camel'
            )

        return self._send_command(
            'Accessibility.getChildAXNodes',
            params,
            True,
            lambda data: from_dict(
                GetChildAXNodesReturnType,
                data,
                'camel'
            )
        )

    def query_ax_tree(
            self,
            node_id: 'NodeId' = UNDEFINED,
            backend_node_id: 'BackendNodeId' = UNDEFINED,
            object_id: 'RemoteObjectId' = UNDEFINED,
            accessible_name: 'str' = UNDEFINED,
            role: 'str' = UNDEFINED
    ) -> 'IFutureResponse[QueryAXTreeReturnType]':
        params = {}

        if is_defined(node_id):
            params['nodeId'] = to_dict(
                node_id,
                'camel'
            )

        if is_defined(backend_node_id):
            params['backendNodeId'] = to_dict(
                backend_node_id,
                'camel'
            )

        if is_defined(object_id):
            params['objectId'] = to_dict(
                object_id,
                'camel'
            )

        if is_defined(accessible_name):
            params['accessibleName'] = accessible_name

        if is_defined(role):
            params['role'] = role

        return self._send_command(
            'Accessibility.queryAXTree',
            params,
            True,
            lambda data: from_dict(
                QueryAXTreeReturnType,
                data,
                'camel'
            )
        )
