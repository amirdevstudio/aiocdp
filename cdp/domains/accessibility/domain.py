# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from dataclasses import (
    dataclass
)
from cdp.utils import (
    is_defined,
    UNDEFINED
)
from cdp.domains.accessibility.types import (
    AXNodeId,
    GetAXNodeAndAncestorsReturnT,
    GetChildAXNodesReturnT,
    GetFullAXTreeReturnT,
    GetPartialAXTreeReturnT,
    GetRootAXNodeReturnT,
    QueryAXTreeReturnT
)
from cdp.domains.dom.types import (
    BackendNodeId,
    NodeId
)
from cdp.domains.runtime.types import (
    RemoteObjectId
)
from cdp.domains.page.types import (
    FrameId
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IResult
    )


@dataclass
class Accessibility(BaseDomain):
    def disable(
            self
    ) -> IResult[None]:
        params = {}

        return self._send_command(
            'Accessibility.disable',
            params,
            False
        )

    def enable(
            self
    ) -> IResult[None]:
        params = {}

        return self._send_command(
            'Accessibility.enable',
            params,
            False
        )

    def get_partial_ax_tree(
            self,
            node_id: NodeId = UNDEFINED,
            backend_node_id: BackendNodeId = UNDEFINED,
            object_id: RemoteObjectId = UNDEFINED,
            fetch_relatives: bool = UNDEFINED
    ) -> IResult['GetPartialAXTreeReturnT']:
        params = {}

        if is_defined(node_id):
            params['nodeId'] = node_id

        if is_defined(backend_node_id):
            params['backendNodeId'] = backend_node_id

        if is_defined(object_id):
            params['objectId'] = object_id

        if is_defined(fetch_relatives):
            params['fetchRelatives'] = fetch_relatives

        return self._send_command(
            'Accessibility.getPartialAXTree',
            params,
            True
        )

    def get_full_ax_tree(
            self,
            depth: int = UNDEFINED,
            frame_id: FrameId = UNDEFINED
    ) -> IResult['GetFullAXTreeReturnT']:
        params = {}

        if is_defined(depth):
            params['depth'] = depth

        if is_defined(frame_id):
            params['frameId'] = frame_id

        return self._send_command(
            'Accessibility.getFullAXTree',
            params,
            True
        )

    def get_root_ax_node(
            self,
            frame_id: FrameId = UNDEFINED
    ) -> IResult['GetRootAXNodeReturnT']:
        params = {}

        if is_defined(frame_id):
            params['frameId'] = frame_id

        return self._send_command(
            'Accessibility.getRootAXNode',
            params,
            True
        )

    def get_ax_node_and_ancestors(
            self,
            node_id: NodeId = UNDEFINED,
            backend_node_id: BackendNodeId = UNDEFINED,
            object_id: RemoteObjectId = UNDEFINED
    ) -> IResult['GetAXNodeAndAncestorsReturnT']:
        params = {}

        if is_defined(node_id):
            params['nodeId'] = node_id

        if is_defined(backend_node_id):
            params['backendNodeId'] = backend_node_id

        if is_defined(object_id):
            params['objectId'] = object_id

        return self._send_command(
            'Accessibility.getAXNodeAndAncestors',
            params,
            True
        )

    def get_child_ax_nodes(
            self,
            id_: AXNodeId,
            frame_id: FrameId = UNDEFINED
    ) -> IResult['GetChildAXNodesReturnT']:
        params = {
            'id': id_,
        }

        if is_defined(frame_id):
            params['frameId'] = frame_id

        return self._send_command(
            'Accessibility.getChildAXNodes',
            params,
            True
        )

    def query_ax_tree(
            self,
            node_id: NodeId = UNDEFINED,
            backend_node_id: BackendNodeId = UNDEFINED,
            object_id: RemoteObjectId = UNDEFINED,
            accessible_name: str = UNDEFINED,
            role: str = UNDEFINED
    ) -> IResult['QueryAXTreeReturnT']:
        params = {}

        if is_defined(node_id):
            params['nodeId'] = node_id

        if is_defined(backend_node_id):
            params['backendNodeId'] = backend_node_id

        if is_defined(object_id):
            params['objectId'] = object_id

        if is_defined(accessible_name):
            params['accessibleName'] = accessible_name

        if is_defined(role):
            params['role'] = role

        return self._send_command(
            'Accessibility.queryAXTree',
            params,
            True
        )
