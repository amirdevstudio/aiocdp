# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from dataclasses import (
    dataclass
)
from cdp.utils import (
    is_defined,
    UNDEFINED
)
from cdp.domains.profiler.types import (
    GetBestEffortCoverageReturnT,
    StopReturnT,
    TakePreciseCoverageReturnT,
    TakeTypeProfileReturnT
)


@dataclass
class Profiler(BaseDomain):
    def disable(
            self
    ) -> None:
        params = {}

        return self._send_command(
            'Profiler.disable',
            params
        )

    def enable(
            self
    ) -> None:
        params = {}

        return self._send_command(
            'Profiler.enable',
            params
        )

    def get_best_effort_coverage(
            self
    ) -> 'GetBestEffortCoverageReturnT':
        params = {}

        return self._send_command(
            'Profiler.getBestEffortCoverage',
            params
        )

    def set_sampling_interval(
            self,
            interval: int
    ) -> None:
        params = {
            'interval': interval,
        }

        return self._send_command(
            'Profiler.setSamplingInterval',
            params
        )

    def start(
            self
    ) -> None:
        params = {}

        return self._send_command(
            'Profiler.start',
            params
        )

    def start_precise_coverage(
            self,
            call_count: bool = UNDEFINED,
            detailed: bool = UNDEFINED
    ) -> None:
        params = {}

        if is_defined(call_count):
            params['callCount'] = call_count

        if is_defined(detailed):
            params['detailed'] = detailed

        return self._send_command(
            'Profiler.startPreciseCoverage',
            params
        )

    def start_type_profile(
            self
    ) -> None:
        params = {}

        return self._send_command(
            'Profiler.startTypeProfile',
            params
        )

    def stop(
            self
    ) -> 'StopReturnT':
        params = {}

        return self._send_command(
            'Profiler.stop',
            params
        )

    def stop_precise_coverage(
            self
    ) -> None:
        params = {}

        return self._send_command(
            'Profiler.stopPreciseCoverage',
            params
        )

    def stop_type_profile(
            self
    ) -> None:
        params = {}

        return self._send_command(
            'Profiler.stopTypeProfile',
            params
        )

    def take_precise_coverage(
            self
    ) -> 'TakePreciseCoverageReturnT':
        params = {}

        return self._send_command(
            'Profiler.takePreciseCoverage',
            params
        )

    def take_type_profile(
            self
    ) -> 'TakeTypeProfileReturnT':
        params = {}

        return self._send_command(
            'Profiler.takeTypeProfile',
            params
        )
