# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from dataclasses import (
    dataclass
)
from cdp.utils import (
    is_defined,
    UNDEFINED
)
from cdp.domains.storage.types import (
    ClearTrustTokensReturnT,
    GetCookiesReturnT,
    GetInterestGroupDetailsReturnT,
    GetSharedStorageEntriesReturnT,
    GetSharedStorageMetadataReturnT,
    GetStorageKeyForFrameReturnT,
    GetTrustTokensReturnT,
    GetUsageAndQuotaReturnT,
    RunBounceTrackingMitigationsReturnT,
    StorageBucket
)
from cdp.domains.page.types import (
    FrameId
)
from cdp.domains.browser.types import (
    BrowserContextID
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IResult
    )


@dataclass
class Storage(BaseDomain):
    def get_storage_key_for_frame(
            self,
            frame_id: FrameId
    ) -> IResult['GetStorageKeyForFrameReturnT']:
        params = {
            'frameId': frame_id,
        }

        return self._send_command(
            'Storage.getStorageKeyForFrame',
            params,
            True
        )

    def clear_data_for_origin(
            self,
            origin: str,
            storage_types: str
    ) -> IResult[None]:
        params = {
            'origin': origin,
            'storageTypes': storage_types,
        }

        return self._send_command(
            'Storage.clearDataForOrigin',
            params,
            False
        )

    def clear_data_for_storage_key(
            self,
            storage_key: str,
            storage_types: str
    ) -> IResult[None]:
        params = {
            'storageKey': storage_key,
            'storageTypes': storage_types,
        }

        return self._send_command(
            'Storage.clearDataForStorageKey',
            params,
            False
        )

    def get_cookies(
            self,
            browser_context_id: BrowserContextID = UNDEFINED
    ) -> IResult['GetCookiesReturnT']:
        params = {}

        if is_defined(browser_context_id):
            params['browserContextId'] = browser_context_id

        return self._send_command(
            'Storage.getCookies',
            params,
            True
        )

    def set_cookies(
            self,
            cookies: list,
            browser_context_id: BrowserContextID = UNDEFINED
    ) -> IResult[None]:
        params = {
            'cookies': cookies,
        }

        if is_defined(browser_context_id):
            params['browserContextId'] = browser_context_id

        return self._send_command(
            'Storage.setCookies',
            params,
            False
        )

    def clear_cookies(
            self,
            browser_context_id: BrowserContextID = UNDEFINED
    ) -> IResult[None]:
        params = {}

        if is_defined(browser_context_id):
            params['browserContextId'] = browser_context_id

        return self._send_command(
            'Storage.clearCookies',
            params,
            False
        )

    def get_usage_and_quota(
            self,
            origin: str
    ) -> IResult['GetUsageAndQuotaReturnT']:
        params = {
            'origin': origin,
        }

        return self._send_command(
            'Storage.getUsageAndQuota',
            params,
            True
        )

    def override_quota_for_origin(
            self,
            origin: str,
            quota_size: float = UNDEFINED
    ) -> IResult[None]:
        params = {
            'origin': origin,
        }

        if is_defined(quota_size):
            params['quotaSize'] = quota_size

        return self._send_command(
            'Storage.overrideQuotaForOrigin',
            params,
            False
        )

    def track_cache_storage_for_origin(
            self,
            origin: str
    ) -> IResult[None]:
        params = {
            'origin': origin,
        }

        return self._send_command(
            'Storage.trackCacheStorageForOrigin',
            params,
            False
        )

    def track_cache_storage_for_storage_key(
            self,
            storage_key: str
    ) -> IResult[None]:
        params = {
            'storageKey': storage_key,
        }

        return self._send_command(
            'Storage.trackCacheStorageForStorageKey',
            params,
            False
        )

    def track_indexed_db_for_origin(
            self,
            origin: str
    ) -> IResult[None]:
        params = {
            'origin': origin,
        }

        return self._send_command(
            'Storage.trackIndexedDBForOrigin',
            params,
            False
        )

    def track_indexed_db_for_storage_key(
            self,
            storage_key: str
    ) -> IResult[None]:
        params = {
            'storageKey': storage_key,
        }

        return self._send_command(
            'Storage.trackIndexedDBForStorageKey',
            params,
            False
        )

    def untrack_cache_storage_for_origin(
            self,
            origin: str
    ) -> IResult[None]:
        params = {
            'origin': origin,
        }

        return self._send_command(
            'Storage.untrackCacheStorageForOrigin',
            params,
            False
        )

    def untrack_cache_storage_for_storage_key(
            self,
            storage_key: str
    ) -> IResult[None]:
        params = {
            'storageKey': storage_key,
        }

        return self._send_command(
            'Storage.untrackCacheStorageForStorageKey',
            params,
            False
        )

    def untrack_indexed_db_for_origin(
            self,
            origin: str
    ) -> IResult[None]:
        params = {
            'origin': origin,
        }

        return self._send_command(
            'Storage.untrackIndexedDBForOrigin',
            params,
            False
        )

    def untrack_indexed_db_for_storage_key(
            self,
            storage_key: str
    ) -> IResult[None]:
        params = {
            'storageKey': storage_key,
        }

        return self._send_command(
            'Storage.untrackIndexedDBForStorageKey',
            params,
            False
        )

    def get_trust_tokens(
            self
    ) -> IResult['GetTrustTokensReturnT']:
        params = {}

        return self._send_command(
            'Storage.getTrustTokens',
            params,
            True
        )

    def clear_trust_tokens(
            self,
            issuer_origin: str
    ) -> IResult['ClearTrustTokensReturnT']:
        params = {
            'issuerOrigin': issuer_origin,
        }

        return self._send_command(
            'Storage.clearTrustTokens',
            params,
            True
        )

    def get_interest_group_details(
            self,
            owner_origin: str,
            name: str
    ) -> IResult['GetInterestGroupDetailsReturnT']:
        params = {
            'ownerOrigin': owner_origin,
            'name': name,
        }

        return self._send_command(
            'Storage.getInterestGroupDetails',
            params,
            True
        )

    def set_interest_group_tracking(
            self,
            enable: bool
    ) -> IResult[None]:
        params = {
            'enable': enable,
        }

        return self._send_command(
            'Storage.setInterestGroupTracking',
            params,
            False
        )

    def get_shared_storage_metadata(
            self,
            owner_origin: str
    ) -> IResult['GetSharedStorageMetadataReturnT']:
        params = {
            'ownerOrigin': owner_origin,
        }

        return self._send_command(
            'Storage.getSharedStorageMetadata',
            params,
            True
        )

    def get_shared_storage_entries(
            self,
            owner_origin: str
    ) -> IResult['GetSharedStorageEntriesReturnT']:
        params = {
            'ownerOrigin': owner_origin,
        }

        return self._send_command(
            'Storage.getSharedStorageEntries',
            params,
            True
        )

    def set_shared_storage_entry(
            self,
            owner_origin: str,
            key: str,
            value: str,
            ignore_if_present: bool = UNDEFINED
    ) -> IResult[None]:
        params = {
            'ownerOrigin': owner_origin,
            'key': key,
            'value': value,
        }

        if is_defined(ignore_if_present):
            params['ignoreIfPresent'] = ignore_if_present

        return self._send_command(
            'Storage.setSharedStorageEntry',
            params,
            False
        )

    def delete_shared_storage_entry(
            self,
            owner_origin: str,
            key: str
    ) -> IResult[None]:
        params = {
            'ownerOrigin': owner_origin,
            'key': key,
        }

        return self._send_command(
            'Storage.deleteSharedStorageEntry',
            params,
            False
        )

    def clear_shared_storage_entries(
            self,
            owner_origin: str
    ) -> IResult[None]:
        params = {
            'ownerOrigin': owner_origin,
        }

        return self._send_command(
            'Storage.clearSharedStorageEntries',
            params,
            False
        )

    def reset_shared_storage_budget(
            self,
            owner_origin: str
    ) -> IResult[None]:
        params = {
            'ownerOrigin': owner_origin,
        }

        return self._send_command(
            'Storage.resetSharedStorageBudget',
            params,
            False
        )

    def set_shared_storage_tracking(
            self,
            enable: bool
    ) -> IResult[None]:
        params = {
            'enable': enable,
        }

        return self._send_command(
            'Storage.setSharedStorageTracking',
            params,
            False
        )

    def set_storage_bucket_tracking(
            self,
            storage_key: str,
            enable: bool
    ) -> IResult[None]:
        params = {
            'storageKey': storage_key,
            'enable': enable,
        }

        return self._send_command(
            'Storage.setStorageBucketTracking',
            params,
            False
        )

    def delete_storage_bucket(
            self,
            bucket: StorageBucket
    ) -> IResult[None]:
        params = {
            'bucket': bucket,
        }

        return self._send_command(
            'Storage.deleteStorageBucket',
            params,
            False
        )

    def run_bounce_tracking_mitigations(
            self
    ) -> IResult['RunBounceTrackingMitigationsReturnT']:
        params = {}

        return self._send_command(
            'Storage.runBounceTrackingMitigations',
            params,
            True
        )

    def set_attribution_reporting_local_testing_mode(
            self,
            enabled: bool
    ) -> IResult[None]:
        params = {
            'enabled': enabled,
        }

        return self._send_command(
            'Storage.setAttributionReportingLocalTestingMode',
            params,
            False
        )

    def set_attribution_reporting_tracking(
            self,
            enable: bool
    ) -> IResult[None]:
        params = {
            'enable': enable,
        }

        return self._send_command(
            'Storage.setAttributionReportingTracking',
            params,
            False
        )
