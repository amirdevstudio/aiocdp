# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from cdp.domains import (
    mappers
)
from cdp.utils import (
    UNDEFINED,
    is_defined
)
from dataclasses import (
    dataclass
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.storage.types import (
    BrowserContextID,
    ClearTrustTokensReturnType,
    FrameId,
    GetCookiesReturnType,
    GetInterestGroupDetailsReturnType,
    GetSharedStorageEntriesReturnType,
    GetSharedStorageMetadataReturnType,
    GetStorageKeyForFrameReturnType,
    GetTrustTokensReturnType,
    GetUsageAndQuotaReturnType,
    RunBounceTrackingMitigationsReturnType,
    StorageBucket
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IFutureResponse
    )


@dataclass
class Storage(BaseDomain):
    def get_storage_key_for_frame(
            self,
            frame_id: 'FrameId'
    ) -> 'IFutureResponse[GetStorageKeyForFrameReturnType]':
        params = {
            'frameId': to_dict(
                frame_id,
                'camel'
            ),
        }

        return self._send_command(
            'Storage.getStorageKeyForFrame',
            params,
            True,
            lambda data: from_dict(
                GetStorageKeyForFrameReturnType,
                data,
                'camel'
            )
        )

    def clear_data_for_origin(
            self,
            origin: 'str',
            storage_types: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'origin': origin,
            'storageTypes': storage_types,
        }

        return self._send_command(
            'Storage.clearDataForOrigin',
            params,
            False
        )

    def clear_data_for_storage_key(
            self,
            storage_key: 'str',
            storage_types: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'storageKey': storage_key,
            'storageTypes': storage_types,
        }

        return self._send_command(
            'Storage.clearDataForStorageKey',
            params,
            False
        )

    def get_cookies(
            self,
            browser_context_id: 'BrowserContextID' = UNDEFINED
    ) -> 'IFutureResponse[GetCookiesReturnType]':
        params = {}

        if is_defined(browser_context_id):
            params['browserContextId'] = to_dict(
                browser_context_id,
                'camel'
            )

        return self._send_command(
            'Storage.getCookies',
            params,
            True,
            lambda data: from_dict(
                GetCookiesReturnType,
                data,
                'camel'
            )
        )

    def set_cookies(
            self,
            cookies: 'list',
            browser_context_id: 'BrowserContextID' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {
            'cookies': cookies,
        }

        if is_defined(browser_context_id):
            params['browserContextId'] = to_dict(
                browser_context_id,
                'camel'
            )

        return self._send_command(
            'Storage.setCookies',
            params,
            False
        )

    def clear_cookies(
            self,
            browser_context_id: 'BrowserContextID' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {}

        if is_defined(browser_context_id):
            params['browserContextId'] = to_dict(
                browser_context_id,
                'camel'
            )

        return self._send_command(
            'Storage.clearCookies',
            params,
            False
        )

    def get_usage_and_quota(
            self,
            origin: 'str'
    ) -> 'IFutureResponse[GetUsageAndQuotaReturnType]':
        params = {
            'origin': origin,
        }

        return self._send_command(
            'Storage.getUsageAndQuota',
            params,
            True,
            lambda data: from_dict(
                GetUsageAndQuotaReturnType,
                data,
                'camel'
            )
        )

    def override_quota_for_origin(
            self,
            origin: 'str',
            quota_size: 'float' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {
            'origin': origin,
        }

        if is_defined(quota_size):
            params['quotaSize'] = quota_size

        return self._send_command(
            'Storage.overrideQuotaForOrigin',
            params,
            False
        )

    def track_cache_storage_for_origin(
            self,
            origin: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'origin': origin,
        }

        return self._send_command(
            'Storage.trackCacheStorageForOrigin',
            params,
            False
        )

    def track_cache_storage_for_storage_key(
            self,
            storage_key: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'storageKey': storage_key,
        }

        return self._send_command(
            'Storage.trackCacheStorageForStorageKey',
            params,
            False
        )

    def track_indexed_db_for_origin(
            self,
            origin: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'origin': origin,
        }

        return self._send_command(
            'Storage.trackIndexedDBForOrigin',
            params,
            False
        )

    def track_indexed_db_for_storage_key(
            self,
            storage_key: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'storageKey': storage_key,
        }

        return self._send_command(
            'Storage.trackIndexedDBForStorageKey',
            params,
            False
        )

    def untrack_cache_storage_for_origin(
            self,
            origin: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'origin': origin,
        }

        return self._send_command(
            'Storage.untrackCacheStorageForOrigin',
            params,
            False
        )

    def untrack_cache_storage_for_storage_key(
            self,
            storage_key: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'storageKey': storage_key,
        }

        return self._send_command(
            'Storage.untrackCacheStorageForStorageKey',
            params,
            False
        )

    def untrack_indexed_db_for_origin(
            self,
            origin: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'origin': origin,
        }

        return self._send_command(
            'Storage.untrackIndexedDBForOrigin',
            params,
            False
        )

    def untrack_indexed_db_for_storage_key(
            self,
            storage_key: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'storageKey': storage_key,
        }

        return self._send_command(
            'Storage.untrackIndexedDBForStorageKey',
            params,
            False
        )

    def get_trust_tokens(
            self
    ) -> 'IFutureResponse[GetTrustTokensReturnType]':
        params = {}

        return self._send_command(
            'Storage.getTrustTokens',
            params,
            True,
            lambda data: from_dict(
                GetTrustTokensReturnType,
                data,
                'camel'
            )
        )

    def clear_trust_tokens(
            self,
            issuer_origin: 'str'
    ) -> 'IFutureResponse[ClearTrustTokensReturnType]':
        params = {
            'issuerOrigin': issuer_origin,
        }

        return self._send_command(
            'Storage.clearTrustTokens',
            params,
            True,
            lambda data: from_dict(
                ClearTrustTokensReturnType,
                data,
                'camel'
            )
        )

    def get_interest_group_details(
            self,
            owner_origin: 'str',
            name: 'str'
    ) -> 'IFutureResponse[GetInterestGroupDetailsReturnType]':
        params = {
            'ownerOrigin': owner_origin,
            'name': name,
        }

        return self._send_command(
            'Storage.getInterestGroupDetails',
            params,
            True,
            lambda data: from_dict(
                GetInterestGroupDetailsReturnType,
                data,
                'camel'
            )
        )

    def set_interest_group_tracking(
            self,
            enable: 'bool'
    ) -> 'IFutureResponse[None]':
        params = {
            'enable': enable,
        }

        return self._send_command(
            'Storage.setInterestGroupTracking',
            params,
            False
        )

    def get_shared_storage_metadata(
            self,
            owner_origin: 'str'
    ) -> 'IFutureResponse[GetSharedStorageMetadataReturnType]':
        params = {
            'ownerOrigin': owner_origin,
        }

        return self._send_command(
            'Storage.getSharedStorageMetadata',
            params,
            True,
            lambda data: from_dict(
                GetSharedStorageMetadataReturnType,
                data,
                'camel'
            )
        )

    def get_shared_storage_entries(
            self,
            owner_origin: 'str'
    ) -> 'IFutureResponse[GetSharedStorageEntriesReturnType]':
        params = {
            'ownerOrigin': owner_origin,
        }

        return self._send_command(
            'Storage.getSharedStorageEntries',
            params,
            True,
            lambda data: from_dict(
                GetSharedStorageEntriesReturnType,
                data,
                'camel'
            )
        )

    def set_shared_storage_entry(
            self,
            owner_origin: 'str',
            key: 'str',
            value: 'str',
            ignore_if_present: 'bool' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {
            'ownerOrigin': owner_origin,
            'key': key,
            'value': value,
        }

        if is_defined(ignore_if_present):
            params['ignoreIfPresent'] = ignore_if_present

        return self._send_command(
            'Storage.setSharedStorageEntry',
            params,
            False
        )

    def delete_shared_storage_entry(
            self,
            owner_origin: 'str',
            key: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'ownerOrigin': owner_origin,
            'key': key,
        }

        return self._send_command(
            'Storage.deleteSharedStorageEntry',
            params,
            False
        )

    def clear_shared_storage_entries(
            self,
            owner_origin: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'ownerOrigin': owner_origin,
        }

        return self._send_command(
            'Storage.clearSharedStorageEntries',
            params,
            False
        )

    def reset_shared_storage_budget(
            self,
            owner_origin: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'ownerOrigin': owner_origin,
        }

        return self._send_command(
            'Storage.resetSharedStorageBudget',
            params,
            False
        )

    def set_shared_storage_tracking(
            self,
            enable: 'bool'
    ) -> 'IFutureResponse[None]':
        params = {
            'enable': enable,
        }

        return self._send_command(
            'Storage.setSharedStorageTracking',
            params,
            False
        )

    def set_storage_bucket_tracking(
            self,
            storage_key: 'str',
            enable: 'bool'
    ) -> 'IFutureResponse[None]':
        params = {
            'storageKey': storage_key,
            'enable': enable,
        }

        return self._send_command(
            'Storage.setStorageBucketTracking',
            params,
            False
        )

    def delete_storage_bucket(
            self,
            bucket: 'StorageBucket'
    ) -> 'IFutureResponse[None]':
        params = {
            'bucket': to_dict(
                bucket,
                'camel'
            ),
        }

        return self._send_command(
            'Storage.deleteStorageBucket',
            params,
            False
        )

    def run_bounce_tracking_mitigations(
            self
    ) -> 'IFutureResponse[RunBounceTrackingMitigationsReturnType]':
        params = {}

        return self._send_command(
            'Storage.runBounceTrackingMitigations',
            params,
            True,
            lambda data: from_dict(
                RunBounceTrackingMitigationsReturnType,
                data,
                'camel'
            )
        )

    def set_attribution_reporting_local_testing_mode(
            self,
            enabled: 'bool'
    ) -> 'IFutureResponse[None]':
        params = {
            'enabled': enabled,
        }

        return self._send_command(
            'Storage.setAttributionReportingLocalTestingMode',
            params,
            False
        )

    def set_attribution_reporting_tracking(
            self,
            enable: 'bool'
    ) -> 'IFutureResponse[None]':
        params = {
            'enable': enable,
        }

        return self._send_command(
            'Storage.setAttributionReportingTracking',
            params,
            False
        )
