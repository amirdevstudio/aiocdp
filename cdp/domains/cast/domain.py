# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from dataclasses import (
    dataclass
)
from cdp.utils import (
    is_defined,
    UNDEFINED
)


@dataclass
class Cast(BaseDomain):
    def enable(
        self,
        presentation_url: str = UNDEFINED
    ) -> 'EnableReturnT':
        params = {}
        
        if is_defined(presentation_url):
params['presentationUrl'] = presentation_url
        
        return self._send_command(
            'Cast.enable',

            params
        )

    def disable(
        self
    ) -> 'DisableReturnT':
        params = {}
        
        return self._send_command(
            'Cast.disable',

            params
        )

    def set_sink_to_use(
        self,
        sink_name: str
    ) -> 'SetSinkToUseReturnT':
        params = {
            'sinkName': sink_name,
        }
        
        return self._send_command(
            'Cast.setSinkToUse',

            params
        )

    def start_desktop_mirroring(
        self,
        sink_name: str
    ) -> 'StartDesktopMirroringReturnT':
        params = {
            'sinkName': sink_name,
        }
        
        return self._send_command(
            'Cast.startDesktopMirroring',

            params
        )

    def start_tab_mirroring(
        self,
        sink_name: str
    ) -> 'StartTabMirroringReturnT':
        params = {
            'sinkName': sink_name,
        }
        
        return self._send_command(
            'Cast.startTabMirroring',

            params
        )

    def stop_casting(
        self,
        sink_name: str
    ) -> 'StopCastingReturnT':
        params = {
            'sinkName': sink_name,
        }
        
        return self._send_command(
            'Cast.stopCasting',

            params
        )

