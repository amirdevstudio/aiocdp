# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from dataclasses import (
    dataclass
)
from cdp.utils import (
    is_defined,
    UNDEFINED
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.mapper import (
    from_dict,
    to_dict
)
from cdp.domains.database.types import (
    DatabaseId,
    ExecuteSQLReturnT,
    GetDatabaseTableNamesReturnT
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IResponse
    )


@dataclass
class Database(BaseDomain):
    def disable(
            self
    ) -> IResponse[None]:
        params = {}

        return self._send_command(
            'Database.disable',
            params,
            False
        )

    def enable(
            self
    ) -> IResponse[None]:
        params = {}

        return self._send_command(
            'Database.enable',
            params,
            False
        )

    def execute_sql(
            self,
            database_id: 'DatabaseId',
            query: 'str'
    ) -> IResponse[ExecuteSQLReturnT]:
        params = {
            'databaseId': database_id,
            'query': query,
        }

        return self._send_command(
            'Database.executeSQL',
            params,
            True,
            lambda data: from_dict(
                ExecuteSQLReturnT,
                data,
                'camel'
            )
        )

    def get_database_table_names(
            self,
            database_id: 'DatabaseId'
    ) -> IResponse[GetDatabaseTableNamesReturnT]:
        params = {
            'databaseId': database_id,
        }

        return self._send_command(
            'Database.getDatabaseTableNames',
            params,
            True,
            lambda data: from_dict(
                GetDatabaseTableNamesReturnT,
                data,
                'camel'
            )
        )
