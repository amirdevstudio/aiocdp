# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from typing import (
    Any,
    Literal,
    TYPE_CHECKING
)
from dataclasses import (
    dataclass
)
if TYPE_CHECKING:
    from cdp.domains.runtime.types import (
        RemoteObject,
        RemoteObjectId,
        ScriptId
    )
    from cdp.domains.dom.types import (
        BackendNodeId,
        NodeId
    )

DOMBreakpointType = Literal[
    'subtree-modified',
    'attribute-modified',
    'node-removed'
]

CSPViolationType = Literal[
    'trustedtype-sink-violation',
    'trustedtype-policy-violation'
]


@dataclass
class EventListener:
    type: str
    use_capture: bool
    passive: bool
    once: bool
    script_id: 'ScriptId'
    line_number: int
    column_number: int
    handler: 'RemoteObject'
    original_handler: 'RemoteObject'
    backend_node_id: 'BackendNodeId'
    def to_dict(
        self,
        casing_strategy: Literal[
            'snake',
            'camel',
            'pascal'
        ] = 'snake'
    ):

        if casing_strategy == 'snake':
            return {
                'type': self.type_,
                'use_capture': self.use_capture,
                'passive': self.passive,
                'once': self.once,
                'script_id': self.script_id.to_dict(
                    casing_strategy
                ),
                'line_number': self.line_number,
                'column_number': self.column_number,
                'handler': self.handler.to_dict(
                    casing_strategy
                ),
                'original_handler': self.original_handler.to_dict(
                    casing_strategy
                ),
                'backend_node_id': self.backend_node_id.to_dict(
                    casing_strategy
                ),
            }
        if casing_strategy == 'camel':
            return {
                'type': self.type_,
                'useCapture': self.use_capture,
                'passive': self.passive,
                'once': self.once,
                'scriptId': self.script_id.to_dict(
                    casing_strategy
                ),
                'lineNumber': self.line_number,
                'columnNumber': self.column_number,
                'handler': self.handler.to_dict(
                    casing_strategy
                ),
                'originalHandler': self.original_handler.to_dict(
                    casing_strategy
                ),
                'backendNodeId': self.backend_node_id.to_dict(
                    casing_strategy
                ),
            }
        if casing_strategy == 'pascal':
            return {
                'Type': self.type_,
                'UseCapture': self.use_capture,
                'Passive': self.passive,
                'Once': self.once,
                'ScriptId': self.script_id.to_dict(
                    casing_strategy
                ),
                'LineNumber': self.line_number,
                'ColumnNumber': self.column_number,
                'Handler': self.handler.to_dict(
                    casing_strategy
                ),
                'OriginalHandler': self.original_handler.to_dict(
                    casing_strategy
                ),
                'BackendNodeId': self.backend_node_id.to_dict(
                    casing_strategy
                ),
            }


@dataclass
class GetEventListenersReturnT:
    listeners: list
