# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from typing import (
    Any,
    Literal,
    TYPE_CHECKING
)
from dataclasses import (
    dataclass
)
if TYPE_CHECKING:
    from cdp.domains.network.types import (
        LoaderId,
        RequestId
    )
    from cdp.domains.dom.types import (
        BackendNodeId
    )

RuleSetId = str

RuleSetErrorType = Literal[
    'SourceIsNotJsonObject',
    'InvalidRulesSkipped'
]

SpeculationAction = Literal[
    'Prefetch',
    'Prerender'
]

SpeculationTargetHint = Literal[
    'Blank',
    'Self'
]

PrerenderFinalStatus = Literal[
    'Activated',
    'Destroyed',
    'LowEndDevice',
    'InvalidSchemeRedirect',
    'InvalidSchemeNavigation',
    'InProgressNavigation',
    'NavigationRequestBlockedByCsp',
    'MainFrameNavigation',
    'MojoBinderPolicy',
    'RendererProcessCrashed',
    'RendererProcessKilled',
    'Download',
    'TriggerDestroyed',
    'NavigationNotCommitted',
    'NavigationBadHttpStatus',
    'ClientCertRequested',
    'NavigationRequestNetworkError',
    'MaxNumOfRunningPrerendersExceeded',
    'CancelAllHostsForTesting',
    'DidFailLoad',
    'Stop',
    'SslCertificateError',
    'LoginAuthRequested',
    'UaChangeRequiresReload',
    'BlockedByClient',
    'AudioOutputDeviceRequested',
    'MixedContent',
    'TriggerBackgrounded',
    'MemoryLimitExceeded',
    'DataSaverEnabled',
    'HasEffectiveUrl',
    'ActivatedBeforeStarted',
    'InactivePageRestriction',
    'StartFailed',
    'TimeoutBackgrounded',
    'CrossSiteRedirectInInitialNavigation',
    'CrossSiteNavigationInInitialNavigation',
    'SameSiteCrossOriginRedirectNotOptInInInitialNavigation',
    'SameSiteCrossOriginNavigationNotOptInInInitialNavigation',
    'ActivationNavigationParameterMismatch',
    'ActivatedInBackground',
    'EmbedderHostDisallowed',
    'ActivationNavigationDestroyedBeforeSuccess',
    'TabClosedByUserGesture',
    'TabClosedWithoutUserGesture',
    'PrimaryMainFrameRendererProcessCrashed',
    'PrimaryMainFrameRendererProcessKilled',
    'ActivationFramePolicyNotCompatible',
    'PreloadingDisabled',
    'BatterySaverEnabled',
    'ActivatedDuringMainFrameNavigation',
    'PreloadingUnsupportedByWebContents',
    'CrossSiteRedirectInMainFrameNavigation',
    'CrossSiteNavigationInMainFrameNavigation',
    'SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation',
    'SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation',
    'MemoryPressureOnTrigger',
    'MemoryPressureAfterTriggered',
    'PrerenderingDisabledByDevTools',
    'ResourceLoadBlockedByClient',
    'SpeculationRuleRemoved',
    'ActivatedWithAuxiliaryBrowsingContexts'
]

PreloadingStatus = Literal[
    'Pending',
    'Running',
    'Ready',
    'Success',
    'Failure',
    'NotSupported'
]

PrefetchStatus = Literal[
    'PrefetchAllowed',
    'PrefetchFailedIneligibleRedirect',
    'PrefetchFailedInvalidRedirect',
    'PrefetchFailedMIMENotSupported',
    'PrefetchFailedNetError',
    'PrefetchFailedNon2XX',
    'PrefetchFailedPerPageLimitExceeded',
    'PrefetchEvicted',
    'PrefetchHeldback',
    'PrefetchIneligibleRetryAfter',
    'PrefetchIsPrivacyDecoy',
    'PrefetchIsStale',
    'PrefetchNotEligibleBrowserContextOffTheRecord',
    'PrefetchNotEligibleDataSaverEnabled',
    'PrefetchNotEligibleExistingProxy',
    'PrefetchNotEligibleHostIsNonUnique',
    'PrefetchNotEligibleNonDefaultStoragePartition',
    'PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy',
    'PrefetchNotEligibleSchemeIsNotHttps',
    'PrefetchNotEligibleUserHasCookies',
    'PrefetchNotEligibleUserHasServiceWorker',
    'PrefetchNotEligibleBatterySaverEnabled',
    'PrefetchNotEligiblePreloadingDisabled',
    'PrefetchNotFinishedInTime',
    'PrefetchNotStarted',
    'PrefetchNotUsedCookiesChanged',
    'PrefetchProxyNotAvailable',
    'PrefetchResponseUsed',
    'PrefetchSuccessfulButNotUsed',
    'PrefetchNotUsedProbeFailed'
]


@dataclass
class RuleSet:
    id: 'RuleSetId'
    loader_id: 'LoaderId'
    source_text: str
    backend_node_id: 'BackendNodeId'
    url: str
    request_id: 'RequestId'
    error_type: 'RuleSetErrorType'
    error_message: str
    def to_dict(
        self,
        casing_strategy: Literal['snake', 'camel', 'pascal'] = 'snake'
    ):
        
        if casing_strategy == 'snake':
            return {
                'id': self.id,
                'loader_id': self.loader_id,
                'source_text': self.source_text,
                'backend_node_id': self.backend_node_id,
                'url': self.url,
                'request_id': self.request_id,
                'error_type': self.error_type,
                'error_message': self.error_message,
            }        
        if casing_strategy == 'camel':
            return {
                'id': self.id,
                'loaderId': self.loader_id,
                'sourceText': self.source_text,
                'backendNodeId': self.backend_node_id,
                'url': self.url,
                'requestId': self.request_id,
                'errorType': self.error_type,
                'errorMessage': self.error_message,
            }        
        if casing_strategy == 'pascal':
            return {
                'Id': self.id,
                'LoaderId': self.loader_id,
                'SourceText': self.source_text,
                'BackendNodeId': self.backend_node_id,
                'Url': self.url,
                'RequestId': self.request_id,
                'ErrorType': self.error_type,
                'ErrorMessage': self.error_message,
            }


@dataclass
class PreloadingAttemptKey:
    loader_id: 'LoaderId'
    action: 'SpeculationAction'
    url: str
    target_hint: 'SpeculationTargetHint'
    def to_dict(
        self,
        casing_strategy: Literal['snake', 'camel', 'pascal'] = 'snake'
    ):
        
        if casing_strategy == 'snake':
            return {
                'loader_id': self.loader_id,
                'action': self.action,
                'url': self.url,
                'target_hint': self.target_hint,
            }        
        if casing_strategy == 'camel':
            return {
                'loaderId': self.loader_id,
                'action': self.action,
                'url': self.url,
                'targetHint': self.target_hint,
            }        
        if casing_strategy == 'pascal':
            return {
                'LoaderId': self.loader_id,
                'Action': self.action,
                'Url': self.url,
                'TargetHint': self.target_hint,
            }


@dataclass
class PreloadingAttemptSource:
    key: 'PreloadingAttemptKey'
    rule_set_ids: list
    node_ids: list
    def to_dict(
        self,
        casing_strategy: Literal['snake', 'camel', 'pascal'] = 'snake'
    ):
        
        if casing_strategy == 'snake':
            return {
                'key': self.key.to_dict(casing_strategy),
                'rule_set_ids': [
                    _.to_dict(casing_strategy)
                    for _ in self.rule_set_ids
                ],
                'node_ids': [
                    _.to_dict(casing_strategy)
                    for _ in self.node_ids
                ],
            }        
        if casing_strategy == 'camel':
            return {
                'key': self.key.to_dict(casing_strategy),
                'ruleSetIds': [
                    _.to_dict(casing_strategy)
                    for _ in self.rule_set_ids
                ],
                'nodeIds': [
                    _.to_dict(casing_strategy)
                    for _ in self.node_ids
                ],
            }        
        if casing_strategy == 'pascal':
            return {
                'Key': self.key.to_dict(casing_strategy),
                'RuleSetIds': [
                    _.to_dict(casing_strategy)
                    for _ in self.rule_set_ids
                ],
                'NodeIds': [
                    _.to_dict(casing_strategy)
                    for _ in self.node_ids
                ],
            }
