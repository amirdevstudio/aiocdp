# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from dataclasses import (
    dataclass
)
from cdp.utils import (
    is_defined,
    UNDEFINED
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.overlay.types import (
    ColorFormat,
    GetGridHighlightObjectsForTestReturnT,
    GetHighlightObjectForTestReturnT,
    GetSourceOrderHighlightObjectForTestReturnT,
    HighlightConfig,
    HingeConfig,
    InspectMode,
    SourceOrderConfig
)
from cdp.domains.dom.types import (
    BackendNodeId,
    NodeId,
    Quad,
    RGBA
)
from cdp.domains.page.types import (
    FrameId
)
from cdp.domains.runtime.types import (
    RemoteObjectId
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IResult
    )


@dataclass
class Overlay(BaseDomain):
    def disable(
            self
    ) -> IResult[None]:
        params = {}

        return self._send_command(
            'Overlay.disable',
            params,
            False
        )

    def enable(
            self
    ) -> IResult[None]:
        params = {}

        return self._send_command(
            'Overlay.enable',
            params,
            False
        )

    def get_highlight_object_for_test(
            self,
            node_id: NodeId,
            include_distance: bool = UNDEFINED,
            include_style: bool = UNDEFINED,
            color_format: ColorFormat = UNDEFINED,
            show_accessibility_info: bool = UNDEFINED
    ) -> IResult['GetHighlightObjectForTestReturnT']:
        params = {
            'nodeId': node_id,
        }

        if is_defined(include_distance):
            params['includeDistance'] = include_distance

        if is_defined(include_style):
            params['includeStyle'] = include_style

        if is_defined(color_format):
            params['colorFormat'] = color_format

        if is_defined(show_accessibility_info):
            params['showAccessibilityInfo'] = show_accessibility_info

        return self._send_command(
            'Overlay.getHighlightObjectForTest',
            params,
            True
        )

    def get_grid_highlight_objects_for_test(
            self,
            node_ids: list
    ) -> IResult['GetGridHighlightObjectsForTestReturnT']:
        params = {
            'nodeIds': node_ids,
        }

        return self._send_command(
            'Overlay.getGridHighlightObjectsForTest',
            params,
            True
        )

    def get_source_order_highlight_object_for_test(
            self,
            node_id: NodeId
    ) -> IResult['GetSourceOrderHighlightObjectForTestReturnT']:
        params = {
            'nodeId': node_id,
        }

        return self._send_command(
            'Overlay.getSourceOrderHighlightObjectForTest',
            params,
            True
        )

    def hide_highlight(
            self
    ) -> IResult[None]:
        params = {}

        return self._send_command(
            'Overlay.hideHighlight',
            params,
            False
        )

    def highlight_frame(
            self,
            frame_id: FrameId,
            content_color: RGBA = UNDEFINED,
            content_outline_color: RGBA = UNDEFINED
    ) -> IResult[None]:
        params = {
            'frameId': frame_id,
        }

        if is_defined(content_color):
            params['contentColor'] = content_color

        if is_defined(content_outline_color):
            params['contentOutlineColor'] = content_outline_color

        return self._send_command(
            'Overlay.highlightFrame',
            params,
            False
        )

    def highlight_node(
            self,
            highlight_config: HighlightConfig,
            node_id: NodeId = UNDEFINED,
            backend_node_id: BackendNodeId = UNDEFINED,
            object_id: RemoteObjectId = UNDEFINED,
            selector: str = UNDEFINED
    ) -> IResult[None]:
        params = {
            'highlightConfig': highlight_config,
        }

        if is_defined(node_id):
            params['nodeId'] = node_id

        if is_defined(backend_node_id):
            params['backendNodeId'] = backend_node_id

        if is_defined(object_id):
            params['objectId'] = object_id

        if is_defined(selector):
            params['selector'] = selector

        return self._send_command(
            'Overlay.highlightNode',
            params,
            False
        )

    def highlight_quad(
            self,
            quad: Quad,
            color: RGBA = UNDEFINED,
            outline_color: RGBA = UNDEFINED
    ) -> IResult[None]:
        params = {
            'quad': quad,
        }

        if is_defined(color):
            params['color'] = color

        if is_defined(outline_color):
            params['outlineColor'] = outline_color

        return self._send_command(
            'Overlay.highlightQuad',
            params,
            False
        )

    def highlight_rect(
            self,
            x: int,
            y: int,
            width: int,
            height: int,
            color: RGBA = UNDEFINED,
            outline_color: RGBA = UNDEFINED
    ) -> IResult[None]:
        params = {
            'x': x,
            'y': y,
            'width': width,
            'height': height,
        }

        if is_defined(color):
            params['color'] = color

        if is_defined(outline_color):
            params['outlineColor'] = outline_color

        return self._send_command(
            'Overlay.highlightRect',
            params,
            False
        )

    def highlight_source_order(
            self,
            source_order_config: SourceOrderConfig,
            node_id: NodeId = UNDEFINED,
            backend_node_id: BackendNodeId = UNDEFINED,
            object_id: RemoteObjectId = UNDEFINED
    ) -> IResult[None]:
        params = {
            'sourceOrderConfig': source_order_config,
        }

        if is_defined(node_id):
            params['nodeId'] = node_id

        if is_defined(backend_node_id):
            params['backendNodeId'] = backend_node_id

        if is_defined(object_id):
            params['objectId'] = object_id

        return self._send_command(
            'Overlay.highlightSourceOrder',
            params,
            False
        )

    def set_inspect_mode(
            self,
            mode: InspectMode,
            highlight_config: HighlightConfig = UNDEFINED
    ) -> IResult[None]:
        params = {
            'mode': mode,
        }

        if is_defined(highlight_config):
            params['highlightConfig'] = highlight_config

        return self._send_command(
            'Overlay.setInspectMode',
            params,
            False
        )

    def set_show_ad_highlights(
            self,
            show: bool
    ) -> IResult[None]:
        params = {
            'show': show,
        }

        return self._send_command(
            'Overlay.setShowAdHighlights',
            params,
            False
        )

    def set_paused_in_debugger_message(
            self,
            message: str = UNDEFINED
    ) -> IResult[None]:
        params = {}

        if is_defined(message):
            params['message'] = message

        return self._send_command(
            'Overlay.setPausedInDebuggerMessage',
            params,
            False
        )

    def set_show_debug_borders(
            self,
            show: bool
    ) -> IResult[None]:
        params = {
            'show': show,
        }

        return self._send_command(
            'Overlay.setShowDebugBorders',
            params,
            False
        )

    def set_show_fps_counter(
            self,
            show: bool
    ) -> IResult[None]:
        params = {
            'show': show,
        }

        return self._send_command(
            'Overlay.setShowFPSCounter',
            params,
            False
        )

    def set_show_grid_overlays(
            self,
            grid_node_highlight_configs: list
    ) -> IResult[None]:
        params = {
            'gridNodeHighlightConfigs': grid_node_highlight_configs,
        }

        return self._send_command(
            'Overlay.setShowGridOverlays',
            params,
            False
        )

    def set_show_flex_overlays(
            self,
            flex_node_highlight_configs: list
    ) -> IResult[None]:
        params = {
            'flexNodeHighlightConfigs': flex_node_highlight_configs,
        }

        return self._send_command(
            'Overlay.setShowFlexOverlays',
            params,
            False
        )

    def set_show_scroll_snap_overlays(
            self,
            scroll_snap_highlight_configs: list
    ) -> IResult[None]:
        params = {
            'scrollSnapHighlightConfigs': scroll_snap_highlight_configs,
        }

        return self._send_command(
            'Overlay.setShowScrollSnapOverlays',
            params,
            False
        )

    def set_show_container_query_overlays(
            self,
            container_query_highlight_configs: list
    ) -> IResult[None]:
        params = {
            'containerQueryHighlightConfigs': container_query_highlight_configs,
        }

        return self._send_command(
            'Overlay.setShowContainerQueryOverlays',
            params,
            False
        )

    def set_show_paint_rects(
            self,
            result: bool
    ) -> IResult[None]:
        params = {
            'result': result,
        }

        return self._send_command(
            'Overlay.setShowPaintRects',
            params,
            False
        )

    def set_show_layout_shift_regions(
            self,
            result: bool
    ) -> IResult[None]:
        params = {
            'result': result,
        }

        return self._send_command(
            'Overlay.setShowLayoutShiftRegions',
            params,
            False
        )

    def set_show_scroll_bottleneck_rects(
            self,
            show: bool
    ) -> IResult[None]:
        params = {
            'show': show,
        }

        return self._send_command(
            'Overlay.setShowScrollBottleneckRects',
            params,
            False
        )

    def set_show_hit_test_borders(
            self,
            show: bool
    ) -> IResult[None]:
        params = {
            'show': show,
        }

        return self._send_command(
            'Overlay.setShowHitTestBorders',
            params,
            False
        )

    def set_show_web_vitals(
            self,
            show: bool
    ) -> IResult[None]:
        params = {
            'show': show,
        }

        return self._send_command(
            'Overlay.setShowWebVitals',
            params,
            False
        )

    def set_show_viewport_size_on_resize(
            self,
            show: bool
    ) -> IResult[None]:
        params = {
            'show': show,
        }

        return self._send_command(
            'Overlay.setShowViewportSizeOnResize',
            params,
            False
        )

    def set_show_hinge(
            self,
            hinge_config: HingeConfig = UNDEFINED
    ) -> IResult[None]:
        params = {}

        if is_defined(hinge_config):
            params['hingeConfig'] = hinge_config

        return self._send_command(
            'Overlay.setShowHinge',
            params,
            False
        )

    def set_show_isolated_elements(
            self,
            isolated_element_highlight_configs: list
    ) -> IResult[None]:
        params = {
            'isolatedElementHighlightConfigs': isolated_element_highlight_configs,
        }

        return self._send_command(
            'Overlay.setShowIsolatedElements',
            params,
            False
        )
