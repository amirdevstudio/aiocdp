# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from cdp.domains import (
    mappers
)
from cdp.utils import (
    UNDEFINED,
    is_defined
)
from dataclasses import (
    dataclass
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.cache_storage.types import (
    CacheId,
    RequestCacheNamesReturnType,
    RequestCachedResponseReturnType,
    RequestEntriesReturnType,
    StorageBucket
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IFutureResponse
    )


@dataclass
class CacheStorage(BaseDomain):
    def delete_cache(
            self,
            cache_id: 'CacheId'
    ) -> 'IFutureResponse[None]':
        params = {
            'cacheId': to_dict(
                cache_id,
                'camel'
            ),
        }

        return self._send_command(
            'CacheStorage.deleteCache',
            params,
            False
        )

    def delete_entry(
            self,
            cache_id: 'CacheId',
            request: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'cacheId': to_dict(
                cache_id,
                'camel'
            ),
            'request': request,
        }

        return self._send_command(
            'CacheStorage.deleteEntry',
            params,
            False
        )

    def request_cache_names(
            self,
            security_origin: 'str' = UNDEFINED,
            storage_key: 'str' = UNDEFINED,
            storage_bucket: 'StorageBucket' = UNDEFINED
    ) -> 'IFutureResponse[RequestCacheNamesReturnType]':
        params = {}

        if is_defined(security_origin):
            params['securityOrigin'] = security_origin

        if is_defined(storage_key):
            params['storageKey'] = storage_key

        if is_defined(storage_bucket):
            params['storageBucket'] = to_dict(
                storage_bucket,
                'camel'
            )

        return self._send_command(
            'CacheStorage.requestCacheNames',
            params,
            True,
            lambda data: from_dict(
                RequestCacheNamesReturnType,
                data,
                'camel'
            )
        )

    def request_cached_response(
            self,
            cache_id: 'CacheId',
            request_url: 'str',
            request_headers: 'list'
    ) -> 'IFutureResponse[RequestCachedResponseReturnType]':
        params = {
            'cacheId': to_dict(
                cache_id,
                'camel'
            ),
            'requestURL': request_url,
            'requestHeaders': request_headers,
        }

        return self._send_command(
            'CacheStorage.requestCachedResponse',
            params,
            True,
            lambda data: from_dict(
                RequestCachedResponseReturnType,
                data,
                'camel'
            )
        )

    def request_entries(
            self,
            cache_id: 'CacheId',
            skip_count: 'int' = UNDEFINED,
            page_size: 'int' = UNDEFINED,
            path_filter: 'str' = UNDEFINED
    ) -> 'IFutureResponse[RequestEntriesReturnType]':
        params = {
            'cacheId': to_dict(
                cache_id,
                'camel'
            ),
        }

        if is_defined(skip_count):
            params['skipCount'] = skip_count

        if is_defined(page_size):
            params['pageSize'] = page_size

        if is_defined(path_filter):
            params['pathFilter'] = path_filter

        return self._send_command(
            'CacheStorage.requestEntries',
            params,
            True,
            lambda data: from_dict(
                RequestEntriesReturnType,
                data,
                'camel'
            )
        )
