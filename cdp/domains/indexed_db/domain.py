# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from dataclasses import (
    dataclass
)
from cdp.utils import (
    is_defined,
    UNDEFINED
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.mapper import (
    from_dict
)
from cdp.domains.storage.types import (
    StorageBucket
)
from cdp.domains.indexed_db.types import (
    GetMetadataReturnT,
    KeyRange,
    RequestDataReturnT,
    RequestDatabaseNamesReturnT,
    RequestDatabaseReturnT
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IResponse
    )


@dataclass
class IndexedDB(BaseDomain):
    def clear_object_store(
            self,
            security_origin: str,
            storage_key: str,
            storage_bucket: StorageBucket = UNDEFINED,
            database_name: str = UNDEFINED,
            object_store_name: str = UNDEFINED
    ) -> IResponse[None]:
        params = {
            'databaseName': database_name,
            'objectStoreName': object_store_name,
        }

        if is_defined(security_origin):
            params['securityOrigin'] = security_origin

        if is_defined(storage_key):
            params['storageKey'] = storage_key

        if is_defined(storage_bucket):
            params['storageBucket'] = storage_bucket

        return self._send_command(
            'IndexedDB.clearObjectStore',
            params,
            False
        )

    def delete_database(
            self,
            security_origin: str,
            storage_key: str = UNDEFINED,
            storage_bucket: StorageBucket = UNDEFINED,
            database_name: str = UNDEFINED
    ) -> IResponse[None]:
        params = {
            'databaseName': database_name,
        }

        if is_defined(security_origin):
            params['securityOrigin'] = security_origin

        if is_defined(storage_key):
            params['storageKey'] = storage_key

        if is_defined(storage_bucket):
            params['storageBucket'] = storage_bucket

        return self._send_command(
            'IndexedDB.deleteDatabase',
            params,
            False
        )

    def delete_object_store_entries(
            self,
            security_origin: str,
            storage_key: str,
            storage_bucket: StorageBucket,
            database_name: str = UNDEFINED,
            object_store_name: str = UNDEFINED,
            key_range: KeyRange = UNDEFINED
    ) -> IResponse[None]:
        params = {
            'databaseName': database_name,
            'objectStoreName': object_store_name,
            'keyRange': key_range,
        }

        if is_defined(security_origin):
            params['securityOrigin'] = security_origin

        if is_defined(storage_key):
            params['storageKey'] = storage_key

        if is_defined(storage_bucket):
            params['storageBucket'] = storage_bucket

        return self._send_command(
            'IndexedDB.deleteObjectStoreEntries',
            params,
            False
        )

    def disable(
            self
    ) -> IResponse[None]:
        params = {}

        return self._send_command(
            'IndexedDB.disable',
            params,
            False
        )

    def enable(
            self
    ) -> IResponse[None]:
        params = {}

        return self._send_command(
            'IndexedDB.enable',
            params,
            False
        )

    def request_data(
            self,
            security_origin: str,
            storage_key: str,
            storage_bucket: StorageBucket,
            database_name: str,
            object_store_name: str,
            index_name: str = UNDEFINED,
            skip_count: int = UNDEFINED,
            page_size: int = UNDEFINED,
            key_range: KeyRange = UNDEFINED
    ) -> IResponse['RequestDataReturnT']:
        params = {
            'databaseName': database_name,
            'objectStoreName': object_store_name,
            'indexName': index_name,
            'skipCount': skip_count,
            'pageSize': page_size,
        }

        if is_defined(security_origin):
            params['securityOrigin'] = security_origin

        if is_defined(storage_key):
            params['storageKey'] = storage_key

        if is_defined(storage_bucket):
            params['storageBucket'] = storage_bucket

        if is_defined(key_range):
            params['keyRange'] = key_range

        return self._send_command(
            'IndexedDB.requestData',
            params,
            True,
            lambda data: from_dict(
                RequestDataReturnT,
                data,
                'camel'
            )
        )

    def get_metadata(
            self,
            security_origin: str,
            storage_key: str,
            storage_bucket: StorageBucket = UNDEFINED,
            database_name: str = UNDEFINED,
            object_store_name: str = UNDEFINED
    ) -> IResponse['GetMetadataReturnT']:
        params = {
            'databaseName': database_name,
            'objectStoreName': object_store_name,
        }

        if is_defined(security_origin):
            params['securityOrigin'] = security_origin

        if is_defined(storage_key):
            params['storageKey'] = storage_key

        if is_defined(storage_bucket):
            params['storageBucket'] = storage_bucket

        return self._send_command(
            'IndexedDB.getMetadata',
            params,
            True,
            lambda data: from_dict(
                GetMetadataReturnT,
                data,
                'camel'
            )
        )

    def request_database(
            self,
            security_origin: str,
            storage_key: str = UNDEFINED,
            storage_bucket: StorageBucket = UNDEFINED,
            database_name: str = UNDEFINED
    ) -> IResponse['RequestDatabaseReturnT']:
        params = {
            'databaseName': database_name,
        }

        if is_defined(security_origin):
            params['securityOrigin'] = security_origin

        if is_defined(storage_key):
            params['storageKey'] = storage_key

        if is_defined(storage_bucket):
            params['storageBucket'] = storage_bucket

        return self._send_command(
            'IndexedDB.requestDatabase',
            params,
            True,
            lambda data: from_dict(
                RequestDatabaseReturnT,
                data,
                'camel'
            )
        )

    def request_database_names(
            self,
            security_origin: str = UNDEFINED,
            storage_key: str = UNDEFINED,
            storage_bucket: StorageBucket = UNDEFINED
    ) -> IResponse['RequestDatabaseNamesReturnT']:
        params = {}

        if is_defined(security_origin):
            params['securityOrigin'] = security_origin

        if is_defined(storage_key):
            params['storageKey'] = storage_key

        if is_defined(storage_bucket):
            params['storageBucket'] = storage_bucket

        return self._send_command(
            'IndexedDB.requestDatabaseNames',
            params,
            True,
            lambda data: from_dict(
                RequestDatabaseNamesReturnT,
                data,
                'camel'
            )
        )
