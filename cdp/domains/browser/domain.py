# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from dataclasses import (
    dataclass
)
from cdp.utils import (
    is_defined,
    UNDEFINED
)
from cdp.domains.browser.types import (
    Bounds,
    BrowserCommandId,
    BrowserContextID,
    GetBrowserCommandLineReturnT,
    GetHistogramReturnT,
    GetHistogramsReturnT,
    GetVersionReturnT,
    GetWindowBoundsReturnT,
    GetWindowForTargetReturnT,
    PermissionDescriptor,
    PermissionSetting,
    WindowID
)
from cdp.domains.target.types import (
    TargetID
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IResult
    )


@dataclass
class Browser(BaseDomain):
    def set_permission(
            self,
            permission: PermissionDescriptor,
            setting: PermissionSetting,
            origin: str = UNDEFINED,
            browser_context_id: BrowserContextID = UNDEFINED
    ) -> IResult[None]:
        params = {
            'permission': permission,
            'setting': setting,
        }

        if is_defined(origin):
            params['origin'] = origin

        if is_defined(browser_context_id):
            params['browserContextId'] = browser_context_id

        return self._send_command(
            'Browser.setPermission',
            params,
            False
        )

    def grant_permissions(
            self,
            permissions: list,
            origin: str = UNDEFINED,
            browser_context_id: BrowserContextID = UNDEFINED
    ) -> IResult[None]:
        params = {
            'permissions': permissions,
        }

        if is_defined(origin):
            params['origin'] = origin

        if is_defined(browser_context_id):
            params['browserContextId'] = browser_context_id

        return self._send_command(
            'Browser.grantPermissions',
            params,
            False
        )

    def reset_permissions(
            self,
            browser_context_id: BrowserContextID = UNDEFINED
    ) -> IResult[None]:
        params = {}

        if is_defined(browser_context_id):
            params['browserContextId'] = browser_context_id

        return self._send_command(
            'Browser.resetPermissions',
            params,
            False
        )

    def set_download_behavior(
            self,
            behavior: str,
            browser_context_id: BrowserContextID = UNDEFINED,
            download_path: str = UNDEFINED,
            events_enabled: bool = UNDEFINED
    ) -> IResult[None]:
        params = {
            'behavior': behavior,
        }

        if is_defined(browser_context_id):
            params['browserContextId'] = browser_context_id

        if is_defined(download_path):
            params['downloadPath'] = download_path

        if is_defined(events_enabled):
            params['eventsEnabled'] = events_enabled

        return self._send_command(
            'Browser.setDownloadBehavior',
            params,
            False
        )

    def cancel_download(
            self,
            guid: str,
            browser_context_id: BrowserContextID = UNDEFINED
    ) -> IResult[None]:
        params = {
            'guid': guid,
        }

        if is_defined(browser_context_id):
            params['browserContextId'] = browser_context_id

        return self._send_command(
            'Browser.cancelDownload',
            params,
            False
        )

    def close(
            self
    ) -> IResult[None]:
        params = {}

        return self._send_command(
            'Browser.close',
            params,
            False
        )

    def crash(
            self
    ) -> IResult[None]:
        params = {}

        return self._send_command(
            'Browser.crash',
            params,
            False
        )

    def crash_gpu_process(
            self
    ) -> IResult[None]:
        params = {}

        return self._send_command(
            'Browser.crashGpuProcess',
            params,
            False
        )

    def get_version(
            self
    ) -> IResult['GetVersionReturnT']:
        params = {}

        return self._send_command(
            'Browser.getVersion',
            params,
            True
        )

    def get_browser_command_line(
            self
    ) -> IResult['GetBrowserCommandLineReturnT']:
        params = {}

        return self._send_command(
            'Browser.getBrowserCommandLine',
            params,
            True
        )

    def get_histograms(
            self,
            query: str = UNDEFINED,
            delta: bool = UNDEFINED
    ) -> IResult['GetHistogramsReturnT']:
        params = {}

        if is_defined(query):
            params['query'] = query

        if is_defined(delta):
            params['delta'] = delta

        return self._send_command(
            'Browser.getHistograms',
            params,
            True
        )

    def get_histogram(
            self,
            name: str,
            delta: bool = UNDEFINED
    ) -> IResult['GetHistogramReturnT']:
        params = {
            'name': name,
        }

        if is_defined(delta):
            params['delta'] = delta

        return self._send_command(
            'Browser.getHistogram',
            params,
            True
        )

    def get_window_bounds(
            self,
            window_id: WindowID
    ) -> IResult['GetWindowBoundsReturnT']:
        params = {
            'windowId': window_id,
        }

        return self._send_command(
            'Browser.getWindowBounds',
            params,
            True
        )

    def get_window_for_target(
            self,
            target_id: TargetID = UNDEFINED
    ) -> IResult['GetWindowForTargetReturnT']:
        params = {}

        if is_defined(target_id):
            params['targetId'] = target_id

        return self._send_command(
            'Browser.getWindowForTarget',
            params,
            True
        )

    def set_window_bounds(
            self,
            window_id: WindowID,
            bounds: Bounds
    ) -> IResult[None]:
        params = {
            'windowId': window_id,
            'bounds': bounds,
        }

        return self._send_command(
            'Browser.setWindowBounds',
            params,
            False
        )

    def set_dock_tile(
            self,
            badge_label: str = UNDEFINED,
            image: str = UNDEFINED
    ) -> IResult[None]:
        params = {}

        if is_defined(badge_label):
            params['badgeLabel'] = badge_label

        if is_defined(image):
            params['image'] = image

        return self._send_command(
            'Browser.setDockTile',
            params,
            False
        )

    def execute_browser_command(
            self,
            command_id: BrowserCommandId
    ) -> IResult[None]:
        params = {
            'commandId': command_id,
        }

        return self._send_command(
            'Browser.executeBrowserCommand',
            params,
            False
        )

    def add_privacy_sandbox_enrollment_override(
            self,
            url: str
    ) -> IResult[None]:
        params = {
            'url': url,
        }

        return self._send_command(
            'Browser.addPrivacySandboxEnrollmentOverride',
            params,
            False
        )
