# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from dataclasses import (
    dataclass
)
from cdp.utils import (
    is_defined,
    UNDEFINED
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.mapper import (
    from_dict
)
from cdp.domains.page.types import (
    AddScriptToEvaluateOnLoadReturnT,
    AddScriptToEvaluateOnNewDocumentReturnT,
    AutoResponseMode,
    CaptureScreenshotReturnT,
    CaptureSnapshotReturnT,
    CreateIsolatedWorldReturnT,
    FontFamilies,
    FontSizes,
    FrameId,
    GetAdScriptIdReturnT,
    GetAppIdReturnT,
    GetAppManifestReturnT,
    GetCookiesReturnT,
    GetFrameTreeReturnT,
    GetInstallabilityErrorsReturnT,
    GetLayoutMetricsReturnT,
    GetManifestIconsReturnT,
    GetNavigationHistoryReturnT,
    GetOriginTrialsReturnT,
    GetPermissionsPolicyStateReturnT,
    GetResourceContentReturnT,
    GetResourceTreeReturnT,
    NavigateReturnT,
    PrintToPDFReturnT,
    ReferrerPolicy,
    ScriptIdentifier,
    SearchInResourceReturnT,
    TransitionType,
    Viewport
)
from cdp.domains.emulation.types import (
    ScreenOrientation
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IResponse
    )


@dataclass
class Page(BaseDomain):
    def add_script_to_evaluate_on_load(
            self,
            script_source: str
    ) -> IResponse['AddScriptToEvaluateOnLoadReturnT']:
        params = {
            'scriptSource': script_source,
        }

        return self._send_command(
            'Page.addScriptToEvaluateOnLoad',
            params,
            True,
            lambda data: from_dict(
                AddScriptToEvaluateOnLoadReturnT,
                data,
                'camel'
            )
        )

    def add_script_to_evaluate_on_new_document(
            self,
            source: str,
            world_name: str = UNDEFINED,
            include_command_line_api: bool = UNDEFINED,
            run_immediately: bool = UNDEFINED
    ) -> IResponse['AddScriptToEvaluateOnNewDocumentReturnT']:
        params = {
            'source': source,
        }

        if is_defined(world_name):
            params['worldName'] = world_name

        if is_defined(include_command_line_api):
            params['includeCommandLineAPI'] = include_command_line_api

        if is_defined(run_immediately):
            params['runImmediately'] = run_immediately

        return self._send_command(
            'Page.addScriptToEvaluateOnNewDocument',
            params,
            True,
            lambda data: from_dict(
                AddScriptToEvaluateOnNewDocumentReturnT,
                data,
                'camel'
            )
        )

    def bring_to_front(
            self
    ) -> IResponse[None]:
        params = {}

        return self._send_command(
            'Page.bringToFront',
            params,
            False
        )

    def capture_screenshot(
            self,
            format_: str = UNDEFINED,
            quality: int = UNDEFINED,
            clip: Viewport = UNDEFINED,
            from_surface: bool = UNDEFINED,
            capture_beyond_viewport: bool = UNDEFINED,
            optimize_for_speed: bool = UNDEFINED
    ) -> IResponse['CaptureScreenshotReturnT']:
        params = {}

        if is_defined(format):
            params['format'] = format

        if is_defined(quality):
            params['quality'] = quality

        if is_defined(clip):
            params['clip'] = clip

        if is_defined(from_surface):
            params['fromSurface'] = from_surface

        if is_defined(capture_beyond_viewport):
            params['captureBeyondViewport'] = capture_beyond_viewport

        if is_defined(optimize_for_speed):
            params['optimizeForSpeed'] = optimize_for_speed

        return self._send_command(
            'Page.captureScreenshot',
            params,
            True,
            lambda data: from_dict(
                CaptureScreenshotReturnT,
                data,
                'camel'
            )
        )

    def capture_snapshot(
            self,
            format_: str = UNDEFINED
    ) -> IResponse['CaptureSnapshotReturnT']:
        params = {}

        if is_defined(format):
            params['format'] = format

        return self._send_command(
            'Page.captureSnapshot',
            params,
            True,
            lambda data: from_dict(
                CaptureSnapshotReturnT,
                data,
                'camel'
            )
        )

    def clear_device_metrics_override(
            self
    ) -> IResponse[None]:
        params = {}

        return self._send_command(
            'Page.clearDeviceMetricsOverride',
            params,
            False
        )

    def clear_device_orientation_override(
            self
    ) -> IResponse[None]:
        params = {}

        return self._send_command(
            'Page.clearDeviceOrientationOverride',
            params,
            False
        )

    def clear_geolocation_override(
            self
    ) -> IResponse[None]:
        params = {}

        return self._send_command(
            'Page.clearGeolocationOverride',
            params,
            False
        )

    def create_isolated_world(
            self,
            frame_id: FrameId,
            world_name: str = UNDEFINED,
            grant_univeral_access: bool = UNDEFINED
    ) -> IResponse['CreateIsolatedWorldReturnT']:
        params = {
            'frameId': frame_id,
        }

        if is_defined(world_name):
            params['worldName'] = world_name

        if is_defined(grant_univeral_access):
            params['grantUniveralAccess'] = grant_univeral_access

        return self._send_command(
            'Page.createIsolatedWorld',
            params,
            True,
            lambda data: from_dict(
                CreateIsolatedWorldReturnT,
                data,
                'camel'
            )
        )

    def delete_cookie(
            self,
            cookie_name: str,
            url: str
    ) -> IResponse[None]:
        params = {
            'cookieName': cookie_name,
            'url': url,
        }

        return self._send_command(
            'Page.deleteCookie',
            params,
            False
        )

    def disable(
            self
    ) -> IResponse[None]:
        params = {}

        return self._send_command(
            'Page.disable',
            params,
            False
        )

    def enable(
            self
    ) -> IResponse[None]:
        params = {}

        return self._send_command(
            'Page.enable',
            params,
            False
        )

    def get_app_manifest(
            self
    ) -> IResponse['GetAppManifestReturnT']:
        params = {}

        return self._send_command(
            'Page.getAppManifest',
            params,
            True,
            lambda data: from_dict(
                GetAppManifestReturnT,
                data,
                'camel'
            )
        )

    def get_installability_errors(
            self
    ) -> IResponse['GetInstallabilityErrorsReturnT']:
        params = {}

        return self._send_command(
            'Page.getInstallabilityErrors',
            params,
            True,
            lambda data: from_dict(
                GetInstallabilityErrorsReturnT,
                data,
                'camel'
            )
        )

    def get_manifest_icons(
            self
    ) -> IResponse['GetManifestIconsReturnT']:
        params = {}

        return self._send_command(
            'Page.getManifestIcons',
            params,
            True,
            lambda data: from_dict(
                GetManifestIconsReturnT,
                data,
                'camel'
            )
        )

    def get_app_id(
            self
    ) -> IResponse['GetAppIdReturnT']:
        params = {}

        return self._send_command(
            'Page.getAppId',
            params,
            True,
            lambda data: from_dict(
                GetAppIdReturnT,
                data,
                'camel'
            )
        )

    def get_ad_script_id(
            self,
            frame_id: FrameId
    ) -> IResponse['GetAdScriptIdReturnT']:
        params = {
            'frameId': frame_id,
        }

        return self._send_command(
            'Page.getAdScriptId',
            params,
            True,
            lambda data: from_dict(
                GetAdScriptIdReturnT,
                data,
                'camel'
            )
        )

    def get_cookies(
            self
    ) -> IResponse['GetCookiesReturnT']:
        params = {}

        return self._send_command(
            'Page.getCookies',
            params,
            True,
            lambda data: from_dict(
                GetCookiesReturnT,
                data,
                'camel'
            )
        )

    def get_frame_tree(
            self
    ) -> IResponse['GetFrameTreeReturnT']:
        params = {}

        return self._send_command(
            'Page.getFrameTree',
            params,
            True,
            lambda data: from_dict(
                GetFrameTreeReturnT,
                data,
                'camel'
            )
        )

    def get_layout_metrics(
            self
    ) -> IResponse['GetLayoutMetricsReturnT']:
        params = {}

        return self._send_command(
            'Page.getLayoutMetrics',
            params,
            True,
            lambda data: from_dict(
                GetLayoutMetricsReturnT,
                data,
                'camel'
            )
        )

    def get_navigation_history(
            self
    ) -> IResponse['GetNavigationHistoryReturnT']:
        params = {}

        return self._send_command(
            'Page.getNavigationHistory',
            params,
            True,
            lambda data: from_dict(
                GetNavigationHistoryReturnT,
                data,
                'camel'
            )
        )

    def reset_navigation_history(
            self
    ) -> IResponse[None]:
        params = {}

        return self._send_command(
            'Page.resetNavigationHistory',
            params,
            False
        )

    def get_resource_content(
            self,
            frame_id: FrameId,
            url: str
    ) -> IResponse['GetResourceContentReturnT']:
        params = {
            'frameId': frame_id,
            'url': url,
        }

        return self._send_command(
            'Page.getResourceContent',
            params,
            True,
            lambda data: from_dict(
                GetResourceContentReturnT,
                data,
                'camel'
            )
        )

    def get_resource_tree(
            self
    ) -> IResponse['GetResourceTreeReturnT']:
        params = {}

        return self._send_command(
            'Page.getResourceTree',
            params,
            True,
            lambda data: from_dict(
                GetResourceTreeReturnT,
                data,
                'camel'
            )
        )

    def handle_java_script_dialog(
            self,
            accept: bool,
            prompt_text: str = UNDEFINED
    ) -> IResponse[None]:
        params = {
            'accept': accept,
        }

        if is_defined(prompt_text):
            params['promptText'] = prompt_text

        return self._send_command(
            'Page.handleJavaScriptDialog',
            params,
            False
        )

    def navigate(
            self,
            url: str,
            referrer: str = UNDEFINED,
            transition_type: TransitionType = UNDEFINED,
            frame_id: FrameId = UNDEFINED,
            referrer_policy: ReferrerPolicy = UNDEFINED
    ) -> IResponse['NavigateReturnT']:
        params = {
            'url': url,
        }

        if is_defined(referrer):
            params['referrer'] = referrer

        if is_defined(transition_type):
            params['transitionType'] = transition_type

        if is_defined(frame_id):
            params['frameId'] = frame_id

        if is_defined(referrer_policy):
            params['referrerPolicy'] = referrer_policy

        return self._send_command(
            'Page.navigate',
            params,
            True,
            lambda data: from_dict(
                NavigateReturnT,
                data,
                'camel'
            )
        )

    def navigate_to_history_entry(
            self,
            entry_id: int
    ) -> IResponse[None]:
        params = {
            'entryId': entry_id,
        }

        return self._send_command(
            'Page.navigateToHistoryEntry',
            params,
            False
        )

    def print_to_pdf(
            self,
            landscape: bool = UNDEFINED,
            display_header_footer: bool = UNDEFINED,
            print_background: bool = UNDEFINED,
            scale: float = UNDEFINED,
            paper_width: float = UNDEFINED,
            paper_height: float = UNDEFINED,
            margin_top: float = UNDEFINED,
            margin_bottom: float = UNDEFINED,
            margin_left: float = UNDEFINED,
            margin_right: float = UNDEFINED,
            page_ranges: str = UNDEFINED,
            header_template: str = UNDEFINED,
            footer_template: str = UNDEFINED,
            prefer_css_page_size: bool = UNDEFINED,
            transfer_mode: str = UNDEFINED,
            generate_tagged_pdf: bool = UNDEFINED
    ) -> IResponse['PrintToPDFReturnT']:
        params = {}

        if is_defined(landscape):
            params['landscape'] = landscape

        if is_defined(display_header_footer):
            params['displayHeaderFooter'] = display_header_footer

        if is_defined(print_background):
            params['printBackground'] = print_background

        if is_defined(scale):
            params['scale'] = scale

        if is_defined(paper_width):
            params['paperWidth'] = paper_width

        if is_defined(paper_height):
            params['paperHeight'] = paper_height

        if is_defined(margin_top):
            params['marginTop'] = margin_top

        if is_defined(margin_bottom):
            params['marginBottom'] = margin_bottom

        if is_defined(margin_left):
            params['marginLeft'] = margin_left

        if is_defined(margin_right):
            params['marginRight'] = margin_right

        if is_defined(page_ranges):
            params['pageRanges'] = page_ranges

        if is_defined(header_template):
            params['headerTemplate'] = header_template

        if is_defined(footer_template):
            params['footerTemplate'] = footer_template

        if is_defined(prefer_css_page_size):
            params['preferCSSPageSize'] = prefer_css_page_size

        if is_defined(transfer_mode):
            params['transferMode'] = transfer_mode

        if is_defined(generate_tagged_pdf):
            params['generateTaggedPDF'] = generate_tagged_pdf

        return self._send_command(
            'Page.printToPDF',
            params,
            True,
            lambda data: from_dict(
                PrintToPDFReturnT,
                data,
                'camel'
            )
        )

    def reload(
            self,
            ignore_cache: bool = UNDEFINED,
            script_to_evaluate_on_load: str = UNDEFINED
    ) -> IResponse[None]:
        params = {}

        if is_defined(ignore_cache):
            params['ignoreCache'] = ignore_cache

        if is_defined(script_to_evaluate_on_load):
            params['scriptToEvaluateOnLoad'] = script_to_evaluate_on_load

        return self._send_command(
            'Page.reload',
            params,
            False
        )

    def remove_script_to_evaluate_on_load(
            self,
            identifier: ScriptIdentifier
    ) -> IResponse[None]:
        params = {
            'identifier': identifier,
        }

        return self._send_command(
            'Page.removeScriptToEvaluateOnLoad',
            params,
            False
        )

    def remove_script_to_evaluate_on_new_document(
            self,
            identifier: ScriptIdentifier
    ) -> IResponse[None]:
        params = {
            'identifier': identifier,
        }

        return self._send_command(
            'Page.removeScriptToEvaluateOnNewDocument',
            params,
            False
        )

    def screencast_frame_ack(
            self,
            session_id: int
    ) -> IResponse[None]:
        params = {
            'sessionId': session_id,
        }

        return self._send_command(
            'Page.screencastFrameAck',
            params,
            False
        )

    def search_in_resource(
            self,
            frame_id: FrameId,
            url: str,
            query: str,
            case_sensitive: bool = UNDEFINED,
            is_regex: bool = UNDEFINED
    ) -> IResponse['SearchInResourceReturnT']:
        params = {
            'frameId': frame_id,
            'url': url,
            'query': query,
        }

        if is_defined(case_sensitive):
            params['caseSensitive'] = case_sensitive

        if is_defined(is_regex):
            params['isRegex'] = is_regex

        return self._send_command(
            'Page.searchInResource',
            params,
            True,
            lambda data: from_dict(
                SearchInResourceReturnT,
                data,
                'camel'
            )
        )

    def set_ad_blocking_enabled(
            self,
            enabled: bool
    ) -> IResponse[None]:
        params = {
            'enabled': enabled,
        }

        return self._send_command(
            'Page.setAdBlockingEnabled',
            params,
            False
        )

    def set_bypass_csp(
            self,
            enabled: bool
    ) -> IResponse[None]:
        params = {
            'enabled': enabled,
        }

        return self._send_command(
            'Page.setBypassCSP',
            params,
            False
        )

    def get_permissions_policy_state(
            self,
            frame_id: FrameId
    ) -> IResponse['GetPermissionsPolicyStateReturnT']:
        params = {
            'frameId': frame_id,
        }

        return self._send_command(
            'Page.getPermissionsPolicyState',
            params,
            True,
            lambda data: from_dict(
                GetPermissionsPolicyStateReturnT,
                data,
                'camel'
            )
        )

    def get_origin_trials(
            self,
            frame_id: FrameId
    ) -> IResponse['GetOriginTrialsReturnT']:
        params = {
            'frameId': frame_id,
        }

        return self._send_command(
            'Page.getOriginTrials',
            params,
            True,
            lambda data: from_dict(
                GetOriginTrialsReturnT,
                data,
                'camel'
            )
        )

    def set_device_metrics_override(
            self,
            width: int,
            height: int,
            device_scale_factor: float,
            mobile: bool,
            scale: float = UNDEFINED,
            screen_width: int = UNDEFINED,
            screen_height: int = UNDEFINED,
            position_x: int = UNDEFINED,
            position_y: int = UNDEFINED,
            dont_set_visible_size: bool = UNDEFINED,
            screen_orientation: ScreenOrientation = UNDEFINED,
            viewport: Viewport = UNDEFINED
    ) -> IResponse[None]:
        params = {
            'width': width,
            'height': height,
            'deviceScaleFactor': device_scale_factor,
            'mobile': mobile,
        }

        if is_defined(scale):
            params['scale'] = scale

        if is_defined(screen_width):
            params['screenWidth'] = screen_width

        if is_defined(screen_height):
            params['screenHeight'] = screen_height

        if is_defined(position_x):
            params['positionX'] = position_x

        if is_defined(position_y):
            params['positionY'] = position_y

        if is_defined(dont_set_visible_size):
            params['dontSetVisibleSize'] = dont_set_visible_size

        if is_defined(screen_orientation):
            params['screenOrientation'] = screen_orientation

        if is_defined(viewport):
            params['viewport'] = viewport

        return self._send_command(
            'Page.setDeviceMetricsOverride',
            params,
            False
        )

    def set_device_orientation_override(
            self,
            alpha: float,
            beta: float,
            gamma: float
    ) -> IResponse[None]:
        params = {
            'alpha': alpha,
            'beta': beta,
            'gamma': gamma,
        }

        return self._send_command(
            'Page.setDeviceOrientationOverride',
            params,
            False
        )

    def set_font_families(
            self,
            font_families: FontFamilies,
            for_scripts: list = UNDEFINED
    ) -> IResponse[None]:
        params = {
            'fontFamilies': font_families,
        }

        if is_defined(for_scripts):
            params['forScripts'] = for_scripts

        return self._send_command(
            'Page.setFontFamilies',
            params,
            False
        )

    def set_font_sizes(
            self,
            font_sizes: FontSizes
    ) -> IResponse[None]:
        params = {
            'fontSizes': font_sizes,
        }

        return self._send_command(
            'Page.setFontSizes',
            params,
            False
        )

    def set_document_content(
            self,
            frame_id: FrameId,
            html: str
    ) -> IResponse[None]:
        params = {
            'frameId': frame_id,
            'html': html,
        }

        return self._send_command(
            'Page.setDocumentContent',
            params,
            False
        )

    def set_download_behavior(
            self,
            behavior: str,
            download_path: str = UNDEFINED
    ) -> IResponse[None]:
        params = {
            'behavior': behavior,
        }

        if is_defined(download_path):
            params['downloadPath'] = download_path

        return self._send_command(
            'Page.setDownloadBehavior',
            params,
            False
        )

    def set_geolocation_override(
            self,
            latitude: float = UNDEFINED,
            longitude: float = UNDEFINED,
            accuracy: float = UNDEFINED
    ) -> IResponse[None]:
        params = {}

        if is_defined(latitude):
            params['latitude'] = latitude

        if is_defined(longitude):
            params['longitude'] = longitude

        if is_defined(accuracy):
            params['accuracy'] = accuracy

        return self._send_command(
            'Page.setGeolocationOverride',
            params,
            False
        )

    def set_lifecycle_events_enabled(
            self,
            enabled: bool
    ) -> IResponse[None]:
        params = {
            'enabled': enabled,
        }

        return self._send_command(
            'Page.setLifecycleEventsEnabled',
            params,
            False
        )

    def set_touch_emulation_enabled(
            self,
            enabled: bool,
            configuration: str = UNDEFINED
    ) -> IResponse[None]:
        params = {
            'enabled': enabled,
        }

        if is_defined(configuration):
            params['configuration'] = configuration

        return self._send_command(
            'Page.setTouchEmulationEnabled',
            params,
            False
        )

    def start_screencast(
            self,
            format_: str = UNDEFINED,
            quality: int = UNDEFINED,
            max_width: int = UNDEFINED,
            max_height: int = UNDEFINED,
            every_nth_frame: int = UNDEFINED
    ) -> IResponse[None]:
        params = {}

        if is_defined(format):
            params['format'] = format

        if is_defined(quality):
            params['quality'] = quality

        if is_defined(max_width):
            params['maxWidth'] = max_width

        if is_defined(max_height):
            params['maxHeight'] = max_height

        if is_defined(every_nth_frame):
            params['everyNthFrame'] = every_nth_frame

        return self._send_command(
            'Page.startScreencast',
            params,
            False
        )

    def stop_loading(
            self
    ) -> IResponse[None]:
        params = {}

        return self._send_command(
            'Page.stopLoading',
            params,
            False
        )

    def crash(
            self
    ) -> IResponse[None]:
        params = {}

        return self._send_command(
            'Page.crash',
            params,
            False
        )

    def close(
            self
    ) -> IResponse[None]:
        params = {}

        return self._send_command(
            'Page.close',
            params,
            False
        )

    def set_web_lifecycle_state(
            self,
            state: str
    ) -> IResponse[None]:
        params = {
            'state': state,
        }

        return self._send_command(
            'Page.setWebLifecycleState',
            params,
            False
        )

    def stop_screencast(
            self
    ) -> IResponse[None]:
        params = {}

        return self._send_command(
            'Page.stopScreencast',
            params,
            False
        )

    def produce_compilation_cache(
            self,
            scripts: list
    ) -> IResponse[None]:
        params = {
            'scripts': scripts,
        }

        return self._send_command(
            'Page.produceCompilationCache',
            params,
            False
        )

    def add_compilation_cache(
            self,
            url: str,
            data: str
    ) -> IResponse[None]:
        params = {
            'url': url,
            'data': data,
        }

        return self._send_command(
            'Page.addCompilationCache',
            params,
            False
        )

    def clear_compilation_cache(
            self
    ) -> IResponse[None]:
        params = {}

        return self._send_command(
            'Page.clearCompilationCache',
            params,
            False
        )

    def set_spc_transaction_mode(
            self,
            mode: AutoResponseMode
    ) -> IResponse[None]:
        params = {
            'mode': mode,
        }

        return self._send_command(
            'Page.setSPCTransactionMode',
            params,
            False
        )

    def set_rph_registration_mode(
            self,
            mode: AutoResponseMode
    ) -> IResponse[None]:
        params = {
            'mode': mode,
        }

        return self._send_command(
            'Page.setRPHRegistrationMode',
            params,
            False
        )

    def generate_test_report(
            self,
            message: str,
            group: str = UNDEFINED
    ) -> IResponse[None]:
        params = {
            'message': message,
        }

        if is_defined(group):
            params['group'] = group

        return self._send_command(
            'Page.generateTestReport',
            params,
            False
        )

    def wait_for_debugger(
            self
    ) -> IResponse[None]:
        params = {}

        return self._send_command(
            'Page.waitForDebugger',
            params,
            False
        )

    def set_intercept_file_chooser_dialog(
            self,
            enabled: bool
    ) -> IResponse[None]:
        params = {
            'enabled': enabled,
        }

        return self._send_command(
            'Page.setInterceptFileChooserDialog',
            params,
            False
        )

    def set_prerendering_allowed(
            self,
            is_allowed: bool
    ) -> IResponse[None]:
        params = {
            'isAllowed': is_allowed,
        }

        return self._send_command(
            'Page.setPrerenderingAllowed',
            params,
            False
        )
