# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from cdp.domains import (
    mappers
)
from cdp.utils import (
    UNDEFINED,
    is_defined
)
from dataclasses import (
    dataclass
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.audits.types import (
    CheckFormsIssuesReturnType,
    GetEncodedResponseReturnType,
    RequestId
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IFutureResponse
    )


@dataclass
class Audits(BaseDomain):
    def get_encoded_response(
            self,
            request_id: 'RequestId',
            encoding: 'str',
            quality: 'float' = UNDEFINED,
            size_only: 'bool' = UNDEFINED
    ) -> 'IFutureResponse[GetEncodedResponseReturnType]':
        params = {
            'requestId': to_dict(
                request_id,
                'camel'
            ),
            'encoding': encoding,
        }

        if is_defined(quality):
            params['quality'] = quality

        if is_defined(size_only):
            params['sizeOnly'] = size_only

        return self._send_command(
            'Audits.getEncodedResponse',
            params,
            True,
            lambda data: from_dict(
                GetEncodedResponseReturnType,
                data,
                'camel'
            )
        )

    def disable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'Audits.disable',
            params,
            False
        )

    def enable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'Audits.enable',
            params,
            False
        )

    def check_contrast(
            self,
            report_aaa: 'bool' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {}

        if is_defined(report_aaa):
            params['reportAAA'] = report_aaa

        return self._send_command(
            'Audits.checkContrast',
            params,
            False
        )

    def check_forms_issues(
            self
    ) -> 'IFutureResponse[CheckFormsIssuesReturnType]':
        params = {}

        return self._send_command(
            'Audits.checkFormsIssues',
            params,
            True,
            lambda data: from_dict(
                CheckFormsIssuesReturnType,
                data,
                'camel'
            )
        )
