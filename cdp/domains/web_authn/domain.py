# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from cdp.domains import (
    mappers
)
from cdp.utils import (
    UNDEFINED,
    is_defined
)
from dataclasses import (
    dataclass
)
from typing import (
    TYPE_CHECKING
)
from cdp.domains.web_authn.types import (
    AddVirtualAuthenticatorReturnType,
    AuthenticatorId,
    Credential,
    GetCredentialReturnType,
    GetCredentialsReturnType,
    VirtualAuthenticatorOptions
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IFutureResponse
    )


@dataclass
class WebAuthn(BaseDomain):
    def enable(
            self,
            enable_ui: 'bool' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {}

        if is_defined(enable_ui):
            params['enableUI'] = enable_ui

        return self._send_command(
            'WebAuthn.enable',
            params,
            False
        )

    def disable(
            self
    ) -> 'IFutureResponse[None]':
        params = {}

        return self._send_command(
            'WebAuthn.disable',
            params,
            False
        )

    def add_virtual_authenticator(
            self,
            options: 'VirtualAuthenticatorOptions'
    ) -> 'IFutureResponse[AddVirtualAuthenticatorReturnType]':
        params = {
            'options': to_dict(
                options,
                'camel'
            ),
        }

        return self._send_command(
            'WebAuthn.addVirtualAuthenticator',
            params,
            True,
            lambda data: from_dict(
                AddVirtualAuthenticatorReturnType,
                data,
                'camel'
            )
        )

    def set_response_override_bits(
            self,
            authenticator_id: 'AuthenticatorId',
            is_bogus_signature: 'bool' = UNDEFINED,
            is_bad_uv: 'bool' = UNDEFINED,
            is_bad_up: 'bool' = UNDEFINED
    ) -> 'IFutureResponse[None]':
        params = {
            'authenticatorId': to_dict(
                authenticator_id,
                'camel'
            ),
        }

        if is_defined(is_bogus_signature):
            params['isBogusSignature'] = is_bogus_signature

        if is_defined(is_bad_uv):
            params['isBadUV'] = is_bad_uv

        if is_defined(is_bad_up):
            params['isBadUP'] = is_bad_up

        return self._send_command(
            'WebAuthn.setResponseOverrideBits',
            params,
            False
        )

    def remove_virtual_authenticator(
            self,
            authenticator_id: 'AuthenticatorId'
    ) -> 'IFutureResponse[None]':
        params = {
            'authenticatorId': to_dict(
                authenticator_id,
                'camel'
            ),
        }

        return self._send_command(
            'WebAuthn.removeVirtualAuthenticator',
            params,
            False
        )

    def add_credential(
            self,
            authenticator_id: 'AuthenticatorId',
            credential: 'Credential'
    ) -> 'IFutureResponse[None]':
        params = {
            'authenticatorId': to_dict(
                authenticator_id,
                'camel'
            ),
            'credential': to_dict(
                credential,
                'camel'
            ),
        }

        return self._send_command(
            'WebAuthn.addCredential',
            params,
            False
        )

    def get_credential(
            self,
            authenticator_id: 'AuthenticatorId',
            credential_id: 'str'
    ) -> 'IFutureResponse[GetCredentialReturnType]':
        params = {
            'authenticatorId': to_dict(
                authenticator_id,
                'camel'
            ),
            'credentialId': credential_id,
        }

        return self._send_command(
            'WebAuthn.getCredential',
            params,
            True,
            lambda data: from_dict(
                GetCredentialReturnType,
                data,
                'camel'
            )
        )

    def get_credentials(
            self,
            authenticator_id: 'AuthenticatorId'
    ) -> 'IFutureResponse[GetCredentialsReturnType]':
        params = {
            'authenticatorId': to_dict(
                authenticator_id,
                'camel'
            ),
        }

        return self._send_command(
            'WebAuthn.getCredentials',
            params,
            True,
            lambda data: from_dict(
                GetCredentialsReturnType,
                data,
                'camel'
            )
        )

    def remove_credential(
            self,
            authenticator_id: 'AuthenticatorId',
            credential_id: 'str'
    ) -> 'IFutureResponse[None]':
        params = {
            'authenticatorId': to_dict(
                authenticator_id,
                'camel'
            ),
            'credentialId': credential_id,
        }

        return self._send_command(
            'WebAuthn.removeCredential',
            params,
            False
        )

    def clear_credentials(
            self,
            authenticator_id: 'AuthenticatorId'
    ) -> 'IFutureResponse[None]':
        params = {
            'authenticatorId': to_dict(
                authenticator_id,
                'camel'
            ),
        }

        return self._send_command(
            'WebAuthn.clearCredentials',
            params,
            False
        )

    def set_user_verified(
            self,
            authenticator_id: 'AuthenticatorId',
            is_user_verified: 'bool'
    ) -> 'IFutureResponse[None]':
        params = {
            'authenticatorId': to_dict(
                authenticator_id,
                'camel'
            ),
            'isUserVerified': is_user_verified,
        }

        return self._send_command(
            'WebAuthn.setUserVerified',
            params,
            False
        )

    def set_automatic_presence_simulation(
            self,
            authenticator_id: 'AuthenticatorId',
            enabled: 'bool'
    ) -> 'IFutureResponse[None]':
        params = {
            'authenticatorId': to_dict(
                authenticator_id,
                'camel'
            ),
            'enabled': enabled,
        }

        return self._send_command(
            'WebAuthn.setAutomaticPresenceSimulation',
            params,
            False
        )
