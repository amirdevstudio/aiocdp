# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.domains.base import (
    BaseDomain
)
from dataclasses import (
    dataclass
)
from cdp.utils import (
    is_defined,
    UNDEFINED
)
from cdp.domains.web_authn.types import (
    AddVirtualAuthenticatorReturnT,
    AuthenticatorId,
    Credential,
    GetCredentialReturnT,
    GetCredentialsReturnT,
    VirtualAuthenticatorOptions
)
if TYPE_CHECKING:
    from cdp.target.connection import (
        IResult
    )


@dataclass
class WebAuthn(BaseDomain):
    def enable(
            self,
            enable_ui: bool = UNDEFINED
    ) -> IResult[None]:
        params = {}

        if is_defined(enable_ui):
            params['enableUI'] = enable_ui

        return self._send_command(
            'WebAuthn.enable',
            params,
            False
        )

    def disable(
            self
    ) -> IResult[None]:
        params = {}

        return self._send_command(
            'WebAuthn.disable',
            params,
            False
        )

    def add_virtual_authenticator(
            self,
            options: VirtualAuthenticatorOptions
    ) -> IResult['AddVirtualAuthenticatorReturnT']:
        params = {
            'options': options,
        }

        return self._send_command(
            'WebAuthn.addVirtualAuthenticator',
            params,
            True
        )

    def set_response_override_bits(
            self,
            authenticator_id: AuthenticatorId,
            is_bogus_signature: bool = UNDEFINED,
            is_bad_uv: bool = UNDEFINED,
            is_bad_up: bool = UNDEFINED
    ) -> IResult[None]:
        params = {
            'authenticatorId': authenticator_id,
        }

        if is_defined(is_bogus_signature):
            params['isBogusSignature'] = is_bogus_signature

        if is_defined(is_bad_uv):
            params['isBadUV'] = is_bad_uv

        if is_defined(is_bad_up):
            params['isBadUP'] = is_bad_up

        return self._send_command(
            'WebAuthn.setResponseOverrideBits',
            params,
            False
        )

    def remove_virtual_authenticator(
            self,
            authenticator_id: AuthenticatorId
    ) -> IResult[None]:
        params = {
            'authenticatorId': authenticator_id,
        }

        return self._send_command(
            'WebAuthn.removeVirtualAuthenticator',
            params,
            False
        )

    def add_credential(
            self,
            authenticator_id: AuthenticatorId,
            credential: Credential
    ) -> IResult[None]:
        params = {
            'authenticatorId': authenticator_id,
            'credential': credential,
        }

        return self._send_command(
            'WebAuthn.addCredential',
            params,
            False
        )

    def get_credential(
            self,
            authenticator_id: AuthenticatorId,
            credential_id: str
    ) -> IResult['GetCredentialReturnT']:
        params = {
            'authenticatorId': authenticator_id,
            'credentialId': credential_id,
        }

        return self._send_command(
            'WebAuthn.getCredential',
            params,
            True
        )

    def get_credentials(
            self,
            authenticator_id: AuthenticatorId
    ) -> IResult['GetCredentialsReturnT']:
        params = {
            'authenticatorId': authenticator_id,
        }

        return self._send_command(
            'WebAuthn.getCredentials',
            params,
            True
        )

    def remove_credential(
            self,
            authenticator_id: AuthenticatorId,
            credential_id: str
    ) -> IResult[None]:
        params = {
            'authenticatorId': authenticator_id,
            'credentialId': credential_id,
        }

        return self._send_command(
            'WebAuthn.removeCredential',
            params,
            False
        )

    def clear_credentials(
            self,
            authenticator_id: AuthenticatorId
    ) -> IResult[None]:
        params = {
            'authenticatorId': authenticator_id,
        }

        return self._send_command(
            'WebAuthn.clearCredentials',
            params,
            False
        )

    def set_user_verified(
            self,
            authenticator_id: AuthenticatorId,
            is_user_verified: bool
    ) -> IResult[None]:
        params = {
            'authenticatorId': authenticator_id,
            'isUserVerified': is_user_verified,
        }

        return self._send_command(
            'WebAuthn.setUserVerified',
            params,
            False
        )

    def set_automatic_presence_simulation(
            self,
            authenticator_id: AuthenticatorId,
            enabled: bool
    ) -> IResult[None]:
        params = {
            'authenticatorId': authenticator_id,
            'enabled': enabled,
        }

        return self._send_command(
            'WebAuthn.setAutomaticPresenceSimulation',
            params,
            False
        )
