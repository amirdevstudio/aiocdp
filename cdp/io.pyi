# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.


from dataclasses import (
    dataclass
)
from typing import (
    TYPE_CHECKING,
    overload,
    Literal
)
from cdp.connection.connection import (
    Connection
)

if TYPE_CHECKING:
    from cdp.types import (
        accessibility,
        animation,
        audits,
        autofill,
        background_service,
        browser,
        css,
        cache_storage,
        cast,
        dom,
        dom_debugger,
        event_breakpoints,
        dom_snapshot,
        dom_storage,
        database,
        device_orientation,
        emulation,
        headless_experimental,
        io,
        indexed_db,
        input,
        inspector,
        layer_tree,
        log,
        memory,
        network,
        overlay,
        page,
        performance,
        performance_timeline,
        security,
        service_worker,
        storage,
        system_info,
        target,
        tethering,
        tracing,
        fetch,
        web_audio,
        web_authn,
        media,
        device_access,
        preload,
        fed_cm,
        console,
        debugger,
        heap_profiler,
        profiler,
        runtime,
        schema
    )


@dataclass
class IO:
    connection: 'Connection'
    session_id: 'Optional[str]'

    @overload
    async def send(
            self,
            method: Literal['Accessibility.getPartialAXTree'],
            params: dict
    ) -> accessibility.GetPartialAXTreeReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Accessibility.getFullAXTree'],
            params: dict
    ) -> accessibility.GetFullAXTreeReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Accessibility.getRootAXNode'],
            params: dict
    ) -> accessibility.GetRootAXNodeReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Accessibility.getAXNodeAndAncestors'],
            params: dict
    ) -> accessibility.GetAXNodeAndAncestorsReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Accessibility.getChildAXNodes'],
            params: dict
    ) -> accessibility.GetChildAXNodesReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Accessibility.queryAXTree'],
            params: dict
    ) -> accessibility.QueryAXTreeReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Animation.getCurrentTime'],
            params: dict
    ) -> animation.GetCurrentTimeReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Animation.releaseAnimations'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Animation.resolveAnimation'],
            params: dict
    ) -> animation.ResolveAnimationReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Animation.seekAnimations'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Animation.setPaused'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Animation.setPlaybackRate'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Animation.setTiming'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Audits.getEncodedResponse'],
            params: dict
    ) -> audits.GetEncodedResponseReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Audits.checkContrast'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Autofill.trigger'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Autofill.setAddresses'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['BackgroundService.startObserving'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['BackgroundService.stopObserving'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['BackgroundService.setRecording'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['BackgroundService.clearEvents'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Browser.setPermission'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Browser.grantPermissions'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Browser.resetPermissions'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Browser.setDownloadBehavior'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Browser.cancelDownload'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Browser.getHistograms'],
            params: dict
    ) -> browser.GetHistogramsReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Browser.getHistogram'],
            params: dict
    ) -> browser.GetHistogramReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Browser.getWindowBounds'],
            params: dict
    ) -> browser.GetWindowBoundsReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Browser.getWindowForTarget'],
            params: dict
    ) -> browser.GetWindowForTargetReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Browser.setWindowBounds'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Browser.setDockTile'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Browser.executeBrowserCommand'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Browser.addPrivacySandboxEnrollmentOverride'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.addRule'],
            params: dict
    ) -> css.AddRuleReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.collectClassNames'],
            params: dict
    ) -> css.CollectClassNamesReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.createStyleSheet'],
            params: dict
    ) -> css.CreateStyleSheetReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.forcePseudoState'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.getBackgroundColors'],
            params: dict
    ) -> css.GetBackgroundColorsReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.getComputedStyleForNode'],
            params: dict
    ) -> css.GetComputedStyleForNodeReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.getInlineStylesForNode'],
            params: dict
    ) -> css.GetInlineStylesForNodeReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.getMatchedStylesForNode'],
            params: dict
    ) -> css.GetMatchedStylesForNodeReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.getPlatformFontsForNode'],
            params: dict
    ) -> css.GetPlatformFontsForNodeReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.getStyleSheetText'],
            params: dict
    ) -> css.GetStyleSheetTextReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.getLayersForNode'],
            params: dict
    ) -> css.GetLayersForNodeReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.trackComputedStyleUpdates'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.setEffectivePropertyValueForNode'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.setKeyframeKey'],
            params: dict
    ) -> css.SetKeyframeKeyReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.setMediaText'],
            params: dict
    ) -> css.SetMediaTextReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.setContainerQueryText'],
            params: dict
    ) -> css.SetContainerQueryTextReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.setSupportsText'],
            params: dict
    ) -> css.SetSupportsTextReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.setScopeText'],
            params: dict
    ) -> css.SetScopeTextReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.setRuleSelector'],
            params: dict
    ) -> css.SetRuleSelectorReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.setStyleSheetText'],
            params: dict
    ) -> css.SetStyleSheetTextReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.setStyleTexts'],
            params: dict
    ) -> css.SetStyleTextsReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CSS.setLocalFontsEnabled'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['CacheStorage.deleteCache'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['CacheStorage.deleteEntry'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['CacheStorage.requestCacheNames'],
            params: dict
    ) -> cache_storage.RequestCacheNamesReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CacheStorage.requestCachedResponse'],
            params: dict
    ) -> cache_storage.RequestCachedResponseReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['CacheStorage.requestEntries'],
            params: dict
    ) -> cache_storage.RequestEntriesReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Cast.enable'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Cast.setSinkToUse'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Cast.startDesktopMirroring'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Cast.startTabMirroring'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Cast.stopCasting'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.collectClassNamesFromSubtree'],
            params: dict
    ) -> dom.CollectClassNamesFromSubtreeReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.copyTo'],
            params: dict
    ) -> dom.CopyToReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.describeNode'],
            params: dict
    ) -> dom.DescribeNodeReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.scrollIntoViewIfNeeded'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.discardSearchResults'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.enable'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.focus'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.getAttributes'],
            params: dict
    ) -> dom.GetAttributesReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.getBoxModel'],
            params: dict
    ) -> dom.GetBoxModelReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.getContentQuads'],
            params: dict
    ) -> dom.GetContentQuadsReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.getDocument'],
            params: dict
    ) -> dom.GetDocumentReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.getFlattenedDocument'],
            params: dict
    ) -> dom.GetFlattenedDocumentReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.getNodesForSubtreeByStyle'],
            params: dict
    ) -> dom.GetNodesForSubtreeByStyleReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.getNodeForLocation'],
            params: dict
    ) -> dom.GetNodeForLocationReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.getOuterHTML'],
            params: dict
    ) -> dom.GetOuterHTMLReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.getRelayoutBoundary'],
            params: dict
    ) -> dom.GetRelayoutBoundaryReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.getSearchResults'],
            params: dict
    ) -> dom.GetSearchResultsReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.moveTo'],
            params: dict
    ) -> dom.MoveToReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.performSearch'],
            params: dict
    ) -> dom.PerformSearchReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.pushNodeByPathToFrontend'],
            params: dict
    ) -> dom.PushNodeByPathToFrontendReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.pushNodesByBackendIdsToFrontend'],
            params: dict
    ) -> dom.PushNodesByBackendIdsToFrontendReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.querySelector'],
            params: dict
    ) -> dom.QuerySelectorReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.querySelectorAll'],
            params: dict
    ) -> dom.QuerySelectorAllReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.removeAttribute'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.removeNode'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.requestChildNodes'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.requestNode'],
            params: dict
    ) -> dom.RequestNodeReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.resolveNode'],
            params: dict
    ) -> dom.ResolveNodeReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.setAttributeValue'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.setAttributesAsText'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.setFileInputFiles'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.setNodeStackTracesEnabled'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.getNodeStackTraces'],
            params: dict
    ) -> dom.GetNodeStackTracesReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.getFileInfo'],
            params: dict
    ) -> dom.GetFileInfoReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.setInspectedNode'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.setNodeName'],
            params: dict
    ) -> dom.SetNodeNameReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.setNodeValue'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.setOuterHTML'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.getFrameOwner'],
            params: dict
    ) -> dom.GetFrameOwnerReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.getContainerForNode'],
            params: dict
    ) -> dom.GetContainerForNodeReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOM.getQueryingDescendantsForContainer'],
            params: dict
    ) -> dom.GetQueryingDescendantsForContainerReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOMDebugger.getEventListeners'],
            params: dict
    ) -> dom_debugger.GetEventListenersReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOMDebugger.removeDOMBreakpoint'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOMDebugger.removeEventListenerBreakpoint'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOMDebugger.removeInstrumentationBreakpoint'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOMDebugger.removeXHRBreakpoint'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOMDebugger.setBreakOnCSPViolation'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOMDebugger.setDOMBreakpoint'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOMDebugger.setEventListenerBreakpoint'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOMDebugger.setInstrumentationBreakpoint'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOMDebugger.setXHRBreakpoint'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['EventBreakpoints.setInstrumentationBreakpoint'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['EventBreakpoints.removeInstrumentationBreakpoint'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOMSnapshot.getSnapshot'],
            params: dict
    ) -> dom_snapshot.GetSnapshotReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOMSnapshot.captureSnapshot'],
            params: dict
    ) -> dom_snapshot.CaptureSnapshotReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOMStorage.clear'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOMStorage.getDOMStorageItems'],
            params: dict
    ) -> dom_storage.GetDOMStorageItemsReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOMStorage.removeDOMStorageItem'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DOMStorage.setDOMStorageItem'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Database.executeSQL'],
            params: dict
    ) -> database.ExecuteSQLReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Database.getDatabaseTableNames'],
            params: dict
    ) -> database.GetDatabaseTableNamesReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['DeviceOrientation.setDeviceOrientationOverride'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setFocusEmulationEnabled'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setAutoDarkModeOverride'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setCPUThrottlingRate'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setDefaultBackgroundColorOverride'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setDeviceMetricsOverride'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setScrollbarsHidden'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setDocumentCookieDisabled'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setEmitTouchEventsForMouse'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setEmulatedMedia'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setEmulatedVisionDeficiency'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setGeolocationOverride'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setIdleOverride'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setNavigatorOverrides'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setPageScaleFactor'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setScriptExecutionDisabled'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setTouchEmulationEnabled'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setVirtualTimePolicy'],
            params: dict
    ) -> emulation.SetVirtualTimePolicyReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setLocaleOverride'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setTimezoneOverride'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setVisibleSize'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setDisabledImageTypes'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setHardwareConcurrencyOverride'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setUserAgentOverride'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Emulation.setAutomationOverride'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['HeadlessExperimental.beginFrame'],
            params: dict
    ) -> headless_experimental.BeginFrameReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['IO.close'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['IO.read'],
            params: dict
    ) -> io.ReadReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['IO.resolveBlob'],
            params: dict
    ) -> io.ResolveBlobReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['IndexedDB.clearObjectStore'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['IndexedDB.deleteDatabase'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['IndexedDB.deleteObjectStoreEntries'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['IndexedDB.requestData'],
            params: dict
    ) -> indexed_db.RequestDataReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['IndexedDB.getMetadata'],
            params: dict
    ) -> indexed_db.GetMetadataReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['IndexedDB.requestDatabase'],
            params: dict
    ) -> indexed_db.RequestDatabaseReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['IndexedDB.requestDatabaseNames'],
            params: dict
    ) -> indexed_db.RequestDatabaseNamesReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Input.dispatchDragEvent'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Input.dispatchKeyEvent'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Input.insertText'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Input.imeSetComposition'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Input.dispatchMouseEvent'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Input.dispatchTouchEvent'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Input.emulateTouchFromMouseEvent'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Input.setIgnoreInputEvents'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Input.setInterceptDrags'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Input.synthesizePinchGesture'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Input.synthesizeScrollGesture'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Input.synthesizeTapGesture'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['LayerTree.compositingReasons'],
            params: dict
    ) -> layer_tree.CompositingReasonsReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['LayerTree.loadSnapshot'],
            params: dict
    ) -> layer_tree.LoadSnapshotReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['LayerTree.makeSnapshot'],
            params: dict
    ) -> layer_tree.MakeSnapshotReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['LayerTree.profileSnapshot'],
            params: dict
    ) -> layer_tree.ProfileSnapshotReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['LayerTree.releaseSnapshot'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['LayerTree.replaySnapshot'],
            params: dict
    ) -> layer_tree.ReplaySnapshotReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['LayerTree.snapshotCommandLog'],
            params: dict
    ) -> layer_tree.SnapshotCommandLogReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Log.startViolationsReport'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Memory.setPressureNotificationsSuppressed'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Memory.simulatePressureNotification'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Memory.startSampling'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.setAcceptedEncodings'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.continueInterceptedRequest'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.deleteCookies'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.emulateNetworkConditions'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.enable'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.getCertificate'],
            params: dict
    ) -> network.GetCertificateReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.getCookies'],
            params: dict
    ) -> network.GetCookiesReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.getResponseBody'],
            params: dict
    ) -> network.GetResponseBodyReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.getRequestPostData'],
            params: dict
    ) -> network.GetRequestPostDataReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.getResponseBodyForInterception'],
            params: dict
    ) -> network.GetResponseBodyForInterceptionReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.takeResponseBodyForInterceptionAsStream'],
            params: dict
    ) -> network.TakeResponseBodyForInterceptionAsStreamReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.replayXHR'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.searchInResponseBody'],
            params: dict
    ) -> network.SearchInResponseBodyReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.setBlockedURLs'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.setBypassServiceWorker'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.setCacheDisabled'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.setCookie'],
            params: dict
    ) -> network.SetCookieReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.setCookies'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.setExtraHTTPHeaders'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.setAttachDebugStack'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.setRequestInterception'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.setUserAgentOverride'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.getSecurityIsolationStatus'],
            params: dict
    ) -> network.GetSecurityIsolationStatusReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.enableReportingApi'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Network.loadNetworkResource'],
            params: dict
    ) -> network.LoadNetworkResourceReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.getHighlightObjectForTest'],
            params: dict
    ) -> overlay.GetHighlightObjectForTestReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.getGridHighlightObjectsForTest'],
            params: dict
    ) -> overlay.GetGridHighlightObjectsForTestReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.getSourceOrderHighlightObjectForTest'],
            params: dict
    ) -> overlay.GetSourceOrderHighlightObjectForTestReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.highlightFrame'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.highlightNode'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.highlightQuad'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.highlightRect'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.highlightSourceOrder'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.setInspectMode'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.setShowAdHighlights'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.setPausedInDebuggerMessage'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.setShowDebugBorders'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.setShowFPSCounter'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.setShowGridOverlays'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.setShowFlexOverlays'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.setShowScrollSnapOverlays'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.setShowContainerQueryOverlays'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.setShowPaintRects'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.setShowLayoutShiftRegions'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.setShowScrollBottleneckRects'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.setShowHitTestBorders'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.setShowWebVitals'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.setShowViewportSizeOnResize'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.setShowHinge'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Overlay.setShowIsolatedElements'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.addScriptToEvaluateOnLoad'],
            params: dict
    ) -> page.AddScriptToEvaluateOnLoadReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.addScriptToEvaluateOnNewDocument'],
            params: dict
    ) -> page.AddScriptToEvaluateOnNewDocumentReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.captureScreenshot'],
            params: dict
    ) -> page.CaptureScreenshotReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.captureSnapshot'],
            params: dict
    ) -> page.CaptureSnapshotReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.createIsolatedWorld'],
            params: dict
    ) -> page.CreateIsolatedWorldReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.deleteCookie'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.getAdScriptId'],
            params: dict
    ) -> page.GetAdScriptIdReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.getResourceContent'],
            params: dict
    ) -> page.GetResourceContentReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.handleJavaScriptDialog'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.navigate'],
            params: dict
    ) -> page.NavigateReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.navigateToHistoryEntry'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.printToPDF'],
            params: dict
    ) -> page.PrintToPDFReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.reload'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.removeScriptToEvaluateOnLoad'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.removeScriptToEvaluateOnNewDocument'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.screencastFrameAck'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.searchInResource'],
            params: dict
    ) -> page.SearchInResourceReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.setAdBlockingEnabled'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.setBypassCSP'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.getPermissionsPolicyState'],
            params: dict
    ) -> page.GetPermissionsPolicyStateReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.getOriginTrials'],
            params: dict
    ) -> page.GetOriginTrialsReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.setDeviceMetricsOverride'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.setDeviceOrientationOverride'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.setFontFamilies'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.setFontSizes'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.setDocumentContent'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.setDownloadBehavior'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.setGeolocationOverride'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.setLifecycleEventsEnabled'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.setTouchEmulationEnabled'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.startScreencast'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.setWebLifecycleState'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.produceCompilationCache'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.addCompilationCache'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.setSPCTransactionMode'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.setRPHRegistrationMode'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.generateTestReport'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.setInterceptFileChooserDialog'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Page.setPrerenderingAllowed'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Performance.enable'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Performance.setTimeDomain'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['PerformanceTimeline.enable'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Security.setIgnoreCertificateErrors'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Security.handleCertificateError'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Security.setOverrideCertificateErrors'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['ServiceWorker.deliverPushMessage'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['ServiceWorker.dispatchSyncEvent'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['ServiceWorker.dispatchPeriodicSyncEvent'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['ServiceWorker.inspectWorker'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['ServiceWorker.setForceUpdateOnPageLoad'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['ServiceWorker.skipWaiting'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['ServiceWorker.startWorker'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['ServiceWorker.stopWorker'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['ServiceWorker.unregister'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['ServiceWorker.updateRegistration'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.getStorageKeyForFrame'],
            params: dict
    ) -> storage.GetStorageKeyForFrameReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.clearDataForOrigin'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.clearDataForStorageKey'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.getCookies'],
            params: dict
    ) -> storage.GetCookiesReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.setCookies'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.clearCookies'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.getUsageAndQuota'],
            params: dict
    ) -> storage.GetUsageAndQuotaReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.overrideQuotaForOrigin'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.trackCacheStorageForOrigin'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.trackCacheStorageForStorageKey'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.trackIndexedDBForOrigin'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.trackIndexedDBForStorageKey'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.untrackCacheStorageForOrigin'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.untrackCacheStorageForStorageKey'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.untrackIndexedDBForOrigin'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.untrackIndexedDBForStorageKey'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.clearTrustTokens'],
            params: dict
    ) -> storage.ClearTrustTokensReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.getInterestGroupDetails'],
            params: dict
    ) -> storage.GetInterestGroupDetailsReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.setInterestGroupTracking'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.getSharedStorageMetadata'],
            params: dict
    ) -> storage.GetSharedStorageMetadataReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.getSharedStorageEntries'],
            params: dict
    ) -> storage.GetSharedStorageEntriesReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.setSharedStorageEntry'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.deleteSharedStorageEntry'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.clearSharedStorageEntries'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.resetSharedStorageBudget'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.setSharedStorageTracking'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.setStorageBucketTracking'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.deleteStorageBucket'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.setAttributionReportingLocalTestingMode'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Storage.setAttributionReportingTracking'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['SystemInfo.getFeatureState'],
            params: dict
    ) -> system_info.GetFeatureStateReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Target.activateTarget'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Target.attachToTarget'],
            params: dict
    ) -> target.AttachToTargetReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Target.closeTarget'],
            params: dict
    ) -> target.CloseTargetReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Target.exposeDevToolsProtocol'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Target.createBrowserContext'],
            params: dict
    ) -> target.CreateBrowserContextReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Target.createTarget'],
            params: dict
    ) -> target.CreateTargetReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Target.detachFromTarget'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Target.disposeBrowserContext'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Target.getTargetInfo'],
            params: dict
    ) -> target.GetTargetInfoReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Target.getTargets'],
            params: dict
    ) -> target.GetTargetsReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Target.sendMessageToTarget'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Target.setAutoAttach'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Target.autoAttachRelated'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Target.setDiscoverTargets'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Target.setRemoteLocations'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Tethering.bind'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Tethering.unbind'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Tracing.recordClockSyncMarker'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Tracing.requestMemoryDump'],
            params: dict
    ) -> tracing.RequestMemoryDumpReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Tracing.start'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Fetch.enable'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Fetch.failRequest'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Fetch.fulfillRequest'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Fetch.continueRequest'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Fetch.continueWithAuth'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Fetch.continueResponse'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Fetch.getResponseBody'],
            params: dict
    ) -> fetch.GetResponseBodyReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Fetch.takeResponseBodyAsStream'],
            params: dict
    ) -> fetch.TakeResponseBodyAsStreamReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['WebAudio.getRealtimeData'],
            params: dict
    ) -> web_audio.GetRealtimeDataReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['WebAuthn.enable'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['WebAuthn.addVirtualAuthenticator'],
            params: dict
    ) -> web_authn.AddVirtualAuthenticatorReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['WebAuthn.setResponseOverrideBits'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['WebAuthn.removeVirtualAuthenticator'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['WebAuthn.addCredential'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['WebAuthn.getCredential'],
            params: dict
    ) -> web_authn.GetCredentialReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['WebAuthn.getCredentials'],
            params: dict
    ) -> web_authn.GetCredentialsReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['WebAuthn.removeCredential'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['WebAuthn.clearCredentials'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['WebAuthn.setUserVerified'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['WebAuthn.setAutomaticPresenceSimulation'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DeviceAccess.selectPrompt'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['DeviceAccess.cancelPrompt'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['FedCm.enable'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['FedCm.selectAccount'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['FedCm.confirmIdpSignin'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['FedCm.dismissDialog'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.continueToLocation'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.enable'],
            params: dict
    ) -> debugger.EnableReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.evaluateOnCallFrame'],
            params: dict
    ) -> debugger.EvaluateOnCallFrameReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.getPossibleBreakpoints'],
            params: dict
    ) -> debugger.GetPossibleBreakpointsReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.getScriptSource'],
            params: dict
    ) -> debugger.GetScriptSourceReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.getStackTrace'],
            params: dict
    ) -> debugger.GetStackTraceReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.pauseOnAsyncCall'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.removeBreakpoint'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.restartFrame'],
            params: dict
    ) -> debugger.RestartFrameReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.searchInContent'],
            params: dict
    ) -> debugger.SearchInContentReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.setAsyncCallStackDepth'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.setBlackboxPatterns'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.setBlackboxedRanges'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.setBreakpoint'],
            params: dict
    ) -> debugger.SetBreakpointReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.setInstrumentationBreakpoint'],
            params: dict
    ) -> debugger.SetInstrumentationBreakpointReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.setBreakpointByUrl'],
            params: dict
    ) -> debugger.SetBreakpointByUrlReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.setBreakpointOnFunctionCall'],
            params: dict
    ) -> debugger.SetBreakpointOnFunctionCallReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.setBreakpointsActive'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.setPauseOnExceptions'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.setReturnValue'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.setScriptSource'],
            params: dict
    ) -> debugger.SetScriptSourceReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.setSkipAllPauses'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.setVariableValue'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Debugger.stepInto'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['HeapProfiler.addInspectedHeapObject'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['HeapProfiler.getHeapObjectId'],
            params: dict
    ) -> heap_profiler.GetHeapObjectIdReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['HeapProfiler.getObjectByHeapObjectId'],
            params: dict
    ) -> heap_profiler.GetObjectByHeapObjectIdReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['HeapProfiler.startSampling'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['HeapProfiler.startTrackingHeapObjects'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['HeapProfiler.stopTrackingHeapObjects'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['HeapProfiler.takeHeapSnapshot'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Profiler.setSamplingInterval'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Profiler.startPreciseCoverage'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Runtime.awaitPromise'],
            params: dict
    ) -> runtime.AwaitPromiseReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Runtime.callFunctionOn'],
            params: dict
    ) -> runtime.CallFunctionOnReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Runtime.compileScript'],
            params: dict
    ) -> runtime.CompileScriptReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Runtime.evaluate'],
            params: dict
    ) -> runtime.EvaluateReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Runtime.getProperties'],
            params: dict
    ) -> runtime.GetPropertiesReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Runtime.globalLexicalScopeNames'],
            params: dict
    ) -> runtime.GlobalLexicalScopeNamesReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Runtime.queryObjects'],
            params: dict
    ) -> runtime.QueryObjectsReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Runtime.releaseObject'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Runtime.releaseObjectGroup'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Runtime.runScript'],
            params: dict
    ) -> runtime.RunScriptReturnT:
        ...

    @overload
    async def send(
            self,
            method: Literal['Runtime.setAsyncCallStackDepth'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Runtime.setCustomObjectFormatterEnabled'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Runtime.setMaxCallStackSizeToCapture'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Runtime.addBinding'],
            params: dict
    ) -> None:
        ...

    @overload
    async def send(
            self,
            method: Literal['Runtime.removeBinding'],
            params: dict
    ) -> None:
        ...
