# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.


from dataclasses import (
    dataclass,
    field
)
from typing import (
    TYPE_CHECKING,
    overload,
    Optional
)

if TYPE_CHECKING:
    from cdp.target import (
        Target as WSTarget
    )
    from cdp.generated.types import (
        accessibility,
        animation,
        audits,
        autofill,
        background_service,
        browser,
        css,
        cache_storage,
        cast,
        dom,
        dom_debugger,
        event_breakpoints,
        dom_snapshot,
        dom_storage,
        database,
        device_orientation,
        emulation,
        headless_experimental,
        io,
        indexed_db,
        input,
        inspector,
        layer_tree,
        log,
        memory,
        network,
        overlay,
        page,
        performance,
        performance_timeline,
        security,
        service_worker,
        storage,
        system_info,
        target,
        tethering,
        tracing,
        fetch,
        web_audio,
        web_authn,
        media,
        device_access,
        preload,
        fed_cm,
        console,
        debugger,
        heap_profiler,
        profiler,
        runtime,
        schema
    )


@dataclass
class Accessibility:
    domains: 'Domains'

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def get_partial_ax_tree(
            self,
            *,
            node_id: Optional[dom.NodeId] = ...,
            backend_node_id: Optional[dom.BackendNodeId] = ...,
            object_id: Optional[runtime.RemoteObjectId] = ...,
            fetch_relatives: Optional[bool] = ...
    ) -> accessibility.GetPartialAXTreeReturnT:
        ...

    @overload
    async def get_partial_ax_tree(
            self,
            params: accessibility.GetPartialAXTreeParamsT
    ) -> accessibility.GetPartialAXTreeReturnT:
        ...

    @overload
    async def get_full_ax_tree(
            self,
            *,
            depth: Optional[int] = ...,
            frame_id: Optional[page.FrameId] = ...
    ) -> accessibility.GetFullAXTreeReturnT:
        ...

    @overload
    async def get_full_ax_tree(
            self,
            params: accessibility.GetFullAXTreeParamsT
    ) -> accessibility.GetFullAXTreeReturnT:
        ...

    @overload
    async def get_root_ax_node(
            self,
            *,
            frame_id: Optional[page.FrameId] = ...
    ) -> accessibility.GetRootAXNodeReturnT:
        ...

    @overload
    async def get_root_ax_node(
            self,
            params: accessibility.GetRootAXNodeParamsT
    ) -> accessibility.GetRootAXNodeReturnT:
        ...

    @overload
    async def get_ax_node_and_ancestors(
            self,
            *,
            node_id: Optional[dom.NodeId] = ...,
            backend_node_id: Optional[dom.BackendNodeId] = ...,
            object_id: Optional[runtime.RemoteObjectId] = ...
    ) -> accessibility.GetAXNodeAndAncestorsReturnT:
        ...

    @overload
    async def get_ax_node_and_ancestors(
            self,
            params: accessibility.GetAXNodeAndAncestorsParamsT
    ) -> accessibility.GetAXNodeAndAncestorsReturnT:
        ...

    @overload
    async def get_child_ax_nodes(
            self,
            *,
            id: accessibility.AXNodeId,
            frame_id: Optional[page.FrameId] = ...
    ) -> accessibility.GetChildAXNodesReturnT:
        ...

    @overload
    async def get_child_ax_nodes(
            self,
            params: accessibility.GetChildAXNodesParamsT
    ) -> accessibility.GetChildAXNodesReturnT:
        ...

    @overload
    async def query_ax_tree(
            self,
            *,
            node_id: Optional[dom.NodeId] = ...,
            backend_node_id: Optional[dom.BackendNodeId] = ...,
            object_id: Optional[runtime.RemoteObjectId] = ...,
            accessible_name: Optional[str] = ...,
            role: Optional[str] = ...
    ) -> accessibility.QueryAXTreeReturnT:
        ...

    @overload
    async def query_ax_tree(
            self,
            params: accessibility.QueryAXTreeParamsT
    ) -> accessibility.QueryAXTreeReturnT:
        ...


@dataclass
class Animation:
    domains: 'Domains'

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def get_current_time(
            self,
            *,
            id: str
    ) -> animation.GetCurrentTimeReturnT:
        ...

    @overload
    async def get_current_time(
            self,
            params: animation.GetCurrentTimeParamsT
    ) -> animation.GetCurrentTimeReturnT:
        ...

    @overload
    async def get_playback_rate(
            self
    ) -> animation.GetPlaybackRateReturnT:
        ...

    @overload
    async def release_animations(
            self,
            *,
            animations: list
    ) -> None:
        ...

    @overload
    async def release_animations(
            self,
            params: animation.ReleaseAnimationsParamsT
    ) -> None:
        ...

    @overload
    async def resolve_animation(
            self,
            *,
            animation_id: str
    ) -> animation.ResolveAnimationReturnT:
        ...

    @overload
    async def resolve_animation(
            self,
            params: animation.ResolveAnimationParamsT
    ) -> animation.ResolveAnimationReturnT:
        ...

    @overload
    async def seek_animations(
            self,
            *,
            animations: list,
            current_time: float
    ) -> None:
        ...

    @overload
    async def seek_animations(
            self,
            params: animation.SeekAnimationsParamsT
    ) -> None:
        ...

    @overload
    async def set_paused(
            self,
            *,
            animations: list,
            paused: bool
    ) -> None:
        ...

    @overload
    async def set_paused(
            self,
            params: animation.SetPausedParamsT
    ) -> None:
        ...

    @overload
    async def set_playback_rate(
            self,
            *,
            playback_rate: float
    ) -> None:
        ...

    @overload
    async def set_playback_rate(
            self,
            params: animation.SetPlaybackRateParamsT
    ) -> None:
        ...

    @overload
    async def set_timing(
            self,
            *,
            animation_id: str,
            duration: float,
            delay: float
    ) -> None:
        ...

    @overload
    async def set_timing(
            self,
            params: animation.SetTimingParamsT
    ) -> None:
        ...


@dataclass
class Audits:
    domains: 'Domains'

    @overload
    async def get_encoded_response(
            self,
            *,
            request_id: network.RequestId,
            encoding: str,
            quality: Optional[float] = ...,
            size_only: Optional[bool] = ...
    ) -> audits.GetEncodedResponseReturnT:
        ...

    @overload
    async def get_encoded_response(
            self,
            params: audits.GetEncodedResponseParamsT
    ) -> audits.GetEncodedResponseReturnT:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def check_contrast(
            self,
            *,
            report_aaa: Optional[bool] = ...
    ) -> None:
        ...

    @overload
    async def check_contrast(
            self,
            params: audits.CheckContrastParamsT
    ) -> None:
        ...

    @overload
    async def check_forms_issues(
            self
    ) -> audits.CheckFormsIssuesReturnT:
        ...


@dataclass
class Autofill:
    domains: 'Domains'

    @overload
    async def trigger(
            self,
            *,
            field_id: dom.BackendNodeId,
            frame_id: Optional[page.FrameId],
            card: autofill.CreditCard = ...
    ) -> None:
        ...

    @overload
    async def trigger(
            self,
            params: autofill.TriggerParamsT
    ) -> None:
        ...

    @overload
    async def set_addresses(
            self,
            *,
            addresses: list
    ) -> None:
        ...

    @overload
    async def set_addresses(
            self,
            params: autofill.SetAddressesParamsT
    ) -> None:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...


@dataclass
class BackgroundService:
    domains: 'Domains'

    @overload
    async def start_observing(
            self,
            *,
            service: background_service.ServiceName
    ) -> None:
        ...

    @overload
    async def start_observing(
            self,
            params: background_service.StartObservingParamsT
    ) -> None:
        ...

    @overload
    async def stop_observing(
            self,
            *,
            service: background_service.ServiceName
    ) -> None:
        ...

    @overload
    async def stop_observing(
            self,
            params: background_service.StopObservingParamsT
    ) -> None:
        ...

    @overload
    async def set_recording(
            self,
            *,
            should_record: bool,
            service: background_service.ServiceName
    ) -> None:
        ...

    @overload
    async def set_recording(
            self,
            params: background_service.SetRecordingParamsT
    ) -> None:
        ...

    @overload
    async def clear_events(
            self,
            *,
            service: background_service.ServiceName
    ) -> None:
        ...

    @overload
    async def clear_events(
            self,
            params: background_service.ClearEventsParamsT
    ) -> None:
        ...


@dataclass
class Browser:
    domains: 'Domains'

    @overload
    async def set_permission(
            self,
            *,
            permission: browser.PermissionDescriptor,
            setting: browser.PermissionSetting,
            origin: Optional[str] = ...,
            browser_context_id: Optional[browser.BrowserContextID] = ...
    ) -> None:
        ...

    @overload
    async def set_permission(
            self,
            params: browser.SetPermissionParamsT
    ) -> None:
        ...

    @overload
    async def grant_permissions(
            self,
            *,
            permissions: list,
            origin: Optional[str] = ...,
            browser_context_id: Optional[browser.BrowserContextID] = ...
    ) -> None:
        ...

    @overload
    async def grant_permissions(
            self,
            params: browser.GrantPermissionsParamsT
    ) -> None:
        ...

    @overload
    async def reset_permissions(
            self,
            *,
            browser_context_id: Optional[browser.BrowserContextID] = ...
    ) -> None:
        ...

    @overload
    async def reset_permissions(
            self,
            params: browser.ResetPermissionsParamsT
    ) -> None:
        ...

    @overload
    async def set_download_behavior(
            self,
            *,
            behavior: str,
            browser_context_id: Optional[browser.BrowserContextID] = ...,
            download_path: Optional[str] = ...,
            events_enabled: Optional[bool] = ...
    ) -> None:
        ...

    @overload
    async def set_download_behavior(
            self,
            params: browser.SetDownloadBehaviorParamsT
    ) -> None:
        ...

    @overload
    async def cancel_download(
            self,
            *,
            guid: str,
            browser_context_id: Optional[browser.BrowserContextID] = ...
    ) -> None:
        ...

    @overload
    async def cancel_download(
            self,
            params: browser.CancelDownloadParamsT
    ) -> None:
        ...

    @overload
    async def close(
            self
    ) -> None:
        ...

    @overload
    async def crash(
            self
    ) -> None:
        ...

    @overload
    async def crash_gpu_process(
            self
    ) -> None:
        ...

    @overload
    async def get_version(
            self
    ) -> browser.GetVersionReturnT:
        ...

    @overload
    async def get_browser_command_line(
            self
    ) -> browser.GetBrowserCommandLineReturnT:
        ...

    @overload
    async def get_histograms(
            self,
            *,
            query: Optional[str] = ...,
            delta: Optional[bool] = ...
    ) -> browser.GetHistogramsReturnT:
        ...

    @overload
    async def get_histograms(
            self,
            params: browser.GetHistogramsParamsT
    ) -> browser.GetHistogramsReturnT:
        ...

    @overload
    async def get_histogram(
            self,
            *,
            name: str,
            delta: Optional[bool] = ...
    ) -> browser.GetHistogramReturnT:
        ...

    @overload
    async def get_histogram(
            self,
            params: browser.GetHistogramParamsT
    ) -> browser.GetHistogramReturnT:
        ...

    @overload
    async def get_window_bounds(
            self,
            *,
            window_id: browser.WindowID
    ) -> browser.GetWindowBoundsReturnT:
        ...

    @overload
    async def get_window_bounds(
            self,
            params: browser.GetWindowBoundsParamsT
    ) -> browser.GetWindowBoundsReturnT:
        ...

    @overload
    async def get_window_for_target(
            self,
            *,
            target_id: Optional[target.TargetID] = ...
    ) -> browser.GetWindowForTargetReturnT:
        ...

    @overload
    async def get_window_for_target(
            self,
            params: browser.GetWindowForTargetParamsT
    ) -> browser.GetWindowForTargetReturnT:
        ...

    @overload
    async def set_window_bounds(
            self,
            *,
            window_id: browser.WindowID,
            bounds: browser.Bounds
    ) -> None:
        ...

    @overload
    async def set_window_bounds(
            self,
            params: browser.SetWindowBoundsParamsT
    ) -> None:
        ...

    @overload
    async def set_dock_tile(
            self,
            *,
            badge_label: Optional[str] = ...,
            image: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def set_dock_tile(
            self,
            params: browser.SetDockTileParamsT
    ) -> None:
        ...

    @overload
    async def execute_browser_command(
            self,
            *,
            command_id: browser.BrowserCommandId
    ) -> None:
        ...

    @overload
    async def execute_browser_command(
            self,
            params: browser.ExecuteBrowserCommandParamsT
    ) -> None:
        ...

    @overload
    async def add_privacy_sandbox_enrollment_override(
            self,
            *,
            url: str
    ) -> None:
        ...

    @overload
    async def add_privacy_sandbox_enrollment_override(
            self,
            params: browser.AddPrivacySandboxEnrollmentOverrideParamsT
    ) -> None:
        ...


@dataclass
class CSS:
    domains: 'Domains'

    @overload
    async def add_rule(
            self,
            *,
            style_sheet_id: css.StyleSheetId,
            rule_text: str,
            location: css.SourceRange
    ) -> css.AddRuleReturnT:
        ...

    @overload
    async def add_rule(
            self,
            params: css.AddRuleParamsT
    ) -> css.AddRuleReturnT:
        ...

    @overload
    async def collect_class_names(
            self,
            *,
            style_sheet_id: css.StyleSheetId
    ) -> css.CollectClassNamesReturnT:
        ...

    @overload
    async def collect_class_names(
            self,
            params: css.CollectClassNamesParamsT
    ) -> css.CollectClassNamesReturnT:
        ...

    @overload
    async def create_style_sheet(
            self,
            *,
            frame_id: page.FrameId
    ) -> css.CreateStyleSheetReturnT:
        ...

    @overload
    async def create_style_sheet(
            self,
            params: css.CreateStyleSheetParamsT
    ) -> css.CreateStyleSheetReturnT:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def force_pseudo_state(
            self,
            *,
            node_id: dom.NodeId,
            forced_pseudo_classes: list
    ) -> None:
        ...

    @overload
    async def force_pseudo_state(
            self,
            params: css.ForcePseudoStateParamsT
    ) -> None:
        ...

    @overload
    async def get_background_colors(
            self,
            *,
            node_id: dom.NodeId
    ) -> css.GetBackgroundColorsReturnT:
        ...

    @overload
    async def get_background_colors(
            self,
            params: css.GetBackgroundColorsParamsT
    ) -> css.GetBackgroundColorsReturnT:
        ...

    @overload
    async def get_computed_style_for_node(
            self,
            *,
            node_id: dom.NodeId
    ) -> css.GetComputedStyleForNodeReturnT:
        ...

    @overload
    async def get_computed_style_for_node(
            self,
            params: css.GetComputedStyleForNodeParamsT
    ) -> css.GetComputedStyleForNodeReturnT:
        ...

    @overload
    async def get_inline_styles_for_node(
            self,
            *,
            node_id: dom.NodeId
    ) -> css.GetInlineStylesForNodeReturnT:
        ...

    @overload
    async def get_inline_styles_for_node(
            self,
            params: css.GetInlineStylesForNodeParamsT
    ) -> css.GetInlineStylesForNodeReturnT:
        ...

    @overload
    async def get_matched_styles_for_node(
            self,
            *,
            node_id: dom.NodeId
    ) -> css.GetMatchedStylesForNodeReturnT:
        ...

    @overload
    async def get_matched_styles_for_node(
            self,
            params: css.GetMatchedStylesForNodeParamsT
    ) -> css.GetMatchedStylesForNodeReturnT:
        ...

    @overload
    async def get_media_queries(
            self
    ) -> css.GetMediaQueriesReturnT:
        ...

    @overload
    async def get_platform_fonts_for_node(
            self,
            *,
            node_id: dom.NodeId
    ) -> css.GetPlatformFontsForNodeReturnT:
        ...

    @overload
    async def get_platform_fonts_for_node(
            self,
            params: css.GetPlatformFontsForNodeParamsT
    ) -> css.GetPlatformFontsForNodeReturnT:
        ...

    @overload
    async def get_style_sheet_text(
            self,
            *,
            style_sheet_id: css.StyleSheetId
    ) -> css.GetStyleSheetTextReturnT:
        ...

    @overload
    async def get_style_sheet_text(
            self,
            params: css.GetStyleSheetTextParamsT
    ) -> css.GetStyleSheetTextReturnT:
        ...

    @overload
    async def get_layers_for_node(
            self,
            *,
            node_id: dom.NodeId
    ) -> css.GetLayersForNodeReturnT:
        ...

    @overload
    async def get_layers_for_node(
            self,
            params: css.GetLayersForNodeParamsT
    ) -> css.GetLayersForNodeReturnT:
        ...

    @overload
    async def track_computed_style_updates(
            self,
            *,
            properties_to_track: list
    ) -> None:
        ...

    @overload
    async def track_computed_style_updates(
            self,
            params: css.TrackComputedStyleUpdatesParamsT
    ) -> None:
        ...

    @overload
    async def take_computed_style_updates(
            self
    ) -> css.TakeComputedStyleUpdatesReturnT:
        ...

    @overload
    async def set_effective_property_value_for_node(
            self,
            *,
            node_id: dom.NodeId,
            property_name: str,
            value: str
    ) -> None:
        ...

    @overload
    async def set_effective_property_value_for_node(
            self,
            params: css.SetEffectivePropertyValueForNodeParamsT
    ) -> None:
        ...

    @overload
    async def set_keyframe_key(
            self,
            *,
            style_sheet_id: css.StyleSheetId,
            range: css.SourceRange,
            key_text: str
    ) -> css.SetKeyframeKeyReturnT:
        ...

    @overload
    async def set_keyframe_key(
            self,
            params: css.SetKeyframeKeyParamsT
    ) -> css.SetKeyframeKeyReturnT:
        ...

    @overload
    async def set_media_text(
            self,
            *,
            style_sheet_id: css.StyleSheetId,
            range: css.SourceRange,
            text: str
    ) -> css.SetMediaTextReturnT:
        ...

    @overload
    async def set_media_text(
            self,
            params: css.SetMediaTextParamsT
    ) -> css.SetMediaTextReturnT:
        ...

    @overload
    async def set_container_query_text(
            self,
            *,
            style_sheet_id: css.StyleSheetId,
            range: css.SourceRange,
            text: str
    ) -> css.SetContainerQueryTextReturnT:
        ...

    @overload
    async def set_container_query_text(
            self,
            params: css.SetContainerQueryTextParamsT
    ) -> css.SetContainerQueryTextReturnT:
        ...

    @overload
    async def set_supports_text(
            self,
            *,
            style_sheet_id: css.StyleSheetId,
            range: css.SourceRange,
            text: str
    ) -> css.SetSupportsTextReturnT:
        ...

    @overload
    async def set_supports_text(
            self,
            params: css.SetSupportsTextParamsT
    ) -> css.SetSupportsTextReturnT:
        ...

    @overload
    async def set_scope_text(
            self,
            *,
            style_sheet_id: css.StyleSheetId,
            range: css.SourceRange,
            text: str
    ) -> css.SetScopeTextReturnT:
        ...

    @overload
    async def set_scope_text(
            self,
            params: css.SetScopeTextParamsT
    ) -> css.SetScopeTextReturnT:
        ...

    @overload
    async def set_rule_selector(
            self,
            *,
            style_sheet_id: css.StyleSheetId,
            range: css.SourceRange,
            selector: str
    ) -> css.SetRuleSelectorReturnT:
        ...

    @overload
    async def set_rule_selector(
            self,
            params: css.SetRuleSelectorParamsT
    ) -> css.SetRuleSelectorReturnT:
        ...

    @overload
    async def set_style_sheet_text(
            self,
            *,
            style_sheet_id: css.StyleSheetId,
            text: str
    ) -> css.SetStyleSheetTextReturnT:
        ...

    @overload
    async def set_style_sheet_text(
            self,
            params: css.SetStyleSheetTextParamsT
    ) -> css.SetStyleSheetTextReturnT:
        ...

    @overload
    async def set_style_texts(
            self,
            *,
            edits: list
    ) -> css.SetStyleTextsReturnT:
        ...

    @overload
    async def set_style_texts(
            self,
            params: css.SetStyleTextsParamsT
    ) -> css.SetStyleTextsReturnT:
        ...

    @overload
    async def start_rule_usage_tracking(
            self
    ) -> None:
        ...

    @overload
    async def stop_rule_usage_tracking(
            self
    ) -> css.StopRuleUsageTrackingReturnT:
        ...

    @overload
    async def take_coverage_delta(
            self
    ) -> css.TakeCoverageDeltaReturnT:
        ...

    @overload
    async def set_local_fonts_enabled(
            self,
            *,
            enabled: bool
    ) -> None:
        ...

    @overload
    async def set_local_fonts_enabled(
            self,
            params: css.SetLocalFontsEnabledParamsT
    ) -> None:
        ...


@dataclass
class CacheStorage:
    domains: 'Domains'

    @overload
    async def delete_cache(
            self,
            *,
            cache_id: cache_storage.CacheId
    ) -> None:
        ...

    @overload
    async def delete_cache(
            self,
            params: cache_storage.DeleteCacheParamsT
    ) -> None:
        ...

    @overload
    async def delete_entry(
            self,
            *,
            cache_id: cache_storage.CacheId,
            request: str
    ) -> None:
        ...

    @overload
    async def delete_entry(
            self,
            params: cache_storage.DeleteEntryParamsT
    ) -> None:
        ...

    @overload
    async def request_cache_names(
            self,
            *,
            security_origin: Optional[str] = ...,
            storage_key: Optional[str] = ...,
            storage_bucket: Optional[storage.StorageBucket] = ...
    ) -> cache_storage.RequestCacheNamesReturnT:
        ...

    @overload
    async def request_cache_names(
            self,
            params: cache_storage.RequestCacheNamesParamsT
    ) -> cache_storage.RequestCacheNamesReturnT:
        ...

    @overload
    async def request_cached_response(
            self,
            *,
            cache_id: cache_storage.CacheId,
            request_url: str,
            request_headers: list
    ) -> cache_storage.RequestCachedResponseReturnT:
        ...

    @overload
    async def request_cached_response(
            self,
            params: cache_storage.RequestCachedResponseParamsT
    ) -> cache_storage.RequestCachedResponseReturnT:
        ...

    @overload
    async def request_entries(
            self,
            *,
            cache_id: cache_storage.CacheId,
            skip_count: Optional[int] = ...,
            page_size: Optional[int] = ...,
            path_filter: Optional[str] = ...
    ) -> cache_storage.RequestEntriesReturnT:
        ...

    @overload
    async def request_entries(
            self,
            params: cache_storage.RequestEntriesParamsT
    ) -> cache_storage.RequestEntriesReturnT:
        ...


@dataclass
class Cast:
    domains: 'Domains'

    @overload
    async def enable(
            self,
            *,
            presentation_url: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def enable(
            self,
            params: cast.EnableParamsT
    ) -> None:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def set_sink_to_use(
            self,
            *,
            sink_name: str
    ) -> None:
        ...

    @overload
    async def set_sink_to_use(
            self,
            params: cast.SetSinkToUseParamsT
    ) -> None:
        ...

    @overload
    async def start_desktop_mirroring(
            self,
            *,
            sink_name: str
    ) -> None:
        ...

    @overload
    async def start_desktop_mirroring(
            self,
            params: cast.StartDesktopMirroringParamsT
    ) -> None:
        ...

    @overload
    async def start_tab_mirroring(
            self,
            *,
            sink_name: str
    ) -> None:
        ...

    @overload
    async def start_tab_mirroring(
            self,
            params: cast.StartTabMirroringParamsT
    ) -> None:
        ...

    @overload
    async def stop_casting(
            self,
            *,
            sink_name: str
    ) -> None:
        ...

    @overload
    async def stop_casting(
            self,
            params: cast.StopCastingParamsT
    ) -> None:
        ...


@dataclass
class DOM:
    domains: 'Domains'

    @overload
    async def collect_class_names_from_subtree(
            self,
            *,
            node_id: dom.NodeId
    ) -> dom.CollectClassNamesFromSubtreeReturnT:
        ...

    @overload
    async def collect_class_names_from_subtree(
            self,
            params: dom.CollectClassNamesFromSubtreeParamsT
    ) -> dom.CollectClassNamesFromSubtreeReturnT:
        ...

    @overload
    async def copy_to(
            self,
            *,
            node_id: dom.NodeId,
            target_node_id: dom.NodeId,
            insert_before_node_id: Optional[dom.NodeId] = ...
    ) -> dom.CopyToReturnT:
        ...

    @overload
    async def copy_to(
            self,
            params: dom.CopyToParamsT
    ) -> dom.CopyToReturnT:
        ...

    @overload
    async def describe_node(
            self,
            *,
            node_id: Optional[dom.NodeId] = ...,
            backend_node_id: Optional[dom.BackendNodeId] = ...,
            object_id: Optional[runtime.RemoteObjectId] = ...,
            depth: Optional[int] = ...,
            pierce: Optional[bool] = ...
    ) -> dom.DescribeNodeReturnT:
        ...

    @overload
    async def describe_node(
            self,
            params: dom.DescribeNodeParamsT
    ) -> dom.DescribeNodeReturnT:
        ...

    @overload
    async def scroll_into_view_if_needed(
            self,
            *,
            node_id: Optional[dom.NodeId] = ...,
            backend_node_id: Optional[dom.BackendNodeId] = ...,
            object_id: Optional[runtime.RemoteObjectId] = ...,
            rect: Optional[dom.Rect] = ...
    ) -> None:
        ...

    @overload
    async def scroll_into_view_if_needed(
            self,
            params: dom.ScrollIntoViewIfNeededParamsT
    ) -> None:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def discard_search_results(
            self,
            *,
            search_id: str
    ) -> None:
        ...

    @overload
    async def discard_search_results(
            self,
            params: dom.DiscardSearchResultsParamsT
    ) -> None:
        ...

    @overload
    async def enable(
            self,
            *,
            include_whitespace: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def enable(
            self,
            params: dom.EnableParamsT
    ) -> None:
        ...

    @overload
    async def focus(
            self,
            *,
            node_id: Optional[dom.NodeId] = ...,
            backend_node_id: Optional[dom.BackendNodeId] = ...,
            object_id: Optional[runtime.RemoteObjectId] = ...
    ) -> None:
        ...

    @overload
    async def focus(
            self,
            params: dom.FocusParamsT
    ) -> None:
        ...

    @overload
    async def get_attributes(
            self,
            *,
            node_id: dom.NodeId
    ) -> dom.GetAttributesReturnT:
        ...

    @overload
    async def get_attributes(
            self,
            params: dom.GetAttributesParamsT
    ) -> dom.GetAttributesReturnT:
        ...

    @overload
    async def get_box_model(
            self,
            *,
            node_id: Optional[dom.NodeId] = ...,
            backend_node_id: Optional[dom.BackendNodeId] = ...,
            object_id: Optional[runtime.RemoteObjectId] = ...
    ) -> dom.GetBoxModelReturnT:
        ...

    @overload
    async def get_box_model(
            self,
            params: dom.GetBoxModelParamsT
    ) -> dom.GetBoxModelReturnT:
        ...

    @overload
    async def get_content_quads(
            self,
            *,
            node_id: Optional[dom.NodeId] = ...,
            backend_node_id: Optional[dom.BackendNodeId] = ...,
            object_id: Optional[runtime.RemoteObjectId] = ...
    ) -> dom.GetContentQuadsReturnT:
        ...

    @overload
    async def get_content_quads(
            self,
            params: dom.GetContentQuadsParamsT
    ) -> dom.GetContentQuadsReturnT:
        ...

    @overload
    async def get_document(
            self,
            *,
            depth: Optional[int] = ...,
            pierce: Optional[bool] = ...
    ) -> dom.GetDocumentReturnT:
        ...

    @overload
    async def get_document(
            self,
            params: dom.GetDocumentParamsT
    ) -> dom.GetDocumentReturnT:
        ...

    @overload
    async def get_flattened_document(
            self,
            *,
            depth: Optional[int] = ...,
            pierce: Optional[bool] = ...
    ) -> dom.GetFlattenedDocumentReturnT:
        ...

    @overload
    async def get_flattened_document(
            self,
            params: dom.GetFlattenedDocumentParamsT
    ) -> dom.GetFlattenedDocumentReturnT:
        ...

    @overload
    async def get_nodes_for_subtree_by_style(
            self,
            *,
            node_id: dom.NodeId,
            computed_styles: list,
            pierce: Optional[bool] = ...
    ) -> dom.GetNodesForSubtreeByStyleReturnT:
        ...

    @overload
    async def get_nodes_for_subtree_by_style(
            self,
            params: dom.GetNodesForSubtreeByStyleParamsT
    ) -> dom.GetNodesForSubtreeByStyleReturnT:
        ...

    @overload
    async def get_node_for_location(
            self,
            *,
            x: int,
            y: int,
            include_user_agent_shadow_dom: Optional[bool] = ...,
            ignore_pointer_events_none: Optional[bool] = ...
    ) -> dom.GetNodeForLocationReturnT:
        ...

    @overload
    async def get_node_for_location(
            self,
            params: dom.GetNodeForLocationParamsT
    ) -> dom.GetNodeForLocationReturnT:
        ...

    @overload
    async def get_outer_html(
            self,
            *,
            node_id: Optional[dom.NodeId] = ...,
            backend_node_id: Optional[dom.BackendNodeId] = ...,
            object_id: Optional[runtime.RemoteObjectId] = ...
    ) -> dom.GetOuterHTMLReturnT:
        ...

    @overload
    async def get_outer_html(
            self,
            params: dom.GetOuterHTMLParamsT
    ) -> dom.GetOuterHTMLReturnT:
        ...

    @overload
    async def get_relayout_boundary(
            self,
            *,
            node_id: dom.NodeId
    ) -> dom.GetRelayoutBoundaryReturnT:
        ...

    @overload
    async def get_relayout_boundary(
            self,
            params: dom.GetRelayoutBoundaryParamsT
    ) -> dom.GetRelayoutBoundaryReturnT:
        ...

    @overload
    async def get_search_results(
            self,
            *,
            search_id: str,
            from_index: int,
            to_index: int
    ) -> dom.GetSearchResultsReturnT:
        ...

    @overload
    async def get_search_results(
            self,
            params: dom.GetSearchResultsParamsT
    ) -> dom.GetSearchResultsReturnT:
        ...

    @overload
    async def hide_highlight(
            self
    ) -> None:
        ...

    @overload
    async def highlight_node(
            self
    ) -> None:
        ...

    @overload
    async def highlight_rect(
            self
    ) -> None:
        ...

    @overload
    async def mark_undoable_state(
            self
    ) -> None:
        ...

    @overload
    async def move_to(
            self,
            *,
            node_id: dom.NodeId,
            target_node_id: dom.NodeId,
            insert_before_node_id: Optional[dom.NodeId] = ...
    ) -> dom.MoveToReturnT:
        ...

    @overload
    async def move_to(
            self,
            params: dom.MoveToParamsT
    ) -> dom.MoveToReturnT:
        ...

    @overload
    async def perform_search(
            self,
            *,
            query: str,
            include_user_agent_shadow_dom: Optional[bool] = ...
    ) -> dom.PerformSearchReturnT:
        ...

    @overload
    async def perform_search(
            self,
            params: dom.PerformSearchParamsT
    ) -> dom.PerformSearchReturnT:
        ...

    @overload
    async def push_node_by_path_to_frontend(
            self,
            *,
            path: str
    ) -> dom.PushNodeByPathToFrontendReturnT:
        ...

    @overload
    async def push_node_by_path_to_frontend(
            self,
            params: dom.PushNodeByPathToFrontendParamsT
    ) -> dom.PushNodeByPathToFrontendReturnT:
        ...

    @overload
    async def push_nodes_by_backend_ids_to_frontend(
            self,
            *,
            backend_node_ids: list
    ) -> dom.PushNodesByBackendIdsToFrontendReturnT:
        ...

    @overload
    async def push_nodes_by_backend_ids_to_frontend(
            self,
            params: dom.PushNodesByBackendIdsToFrontendParamsT
    ) -> dom.PushNodesByBackendIdsToFrontendReturnT:
        ...

    @overload
    async def query_selector(
            self,
            *,
            node_id: dom.NodeId,
            selector: str
    ) -> dom.QuerySelectorReturnT:
        ...

    @overload
    async def query_selector(
            self,
            params: dom.QuerySelectorParamsT
    ) -> dom.QuerySelectorReturnT:
        ...

    @overload
    async def query_selector_all(
            self,
            *,
            node_id: dom.NodeId,
            selector: str
    ) -> dom.QuerySelectorAllReturnT:
        ...

    @overload
    async def query_selector_all(
            self,
            params: dom.QuerySelectorAllParamsT
    ) -> dom.QuerySelectorAllReturnT:
        ...

    @overload
    async def get_top_layer_elements(
            self
    ) -> dom.GetTopLayerElementsReturnT:
        ...

    @overload
    async def redo(
            self
    ) -> None:
        ...

    @overload
    async def remove_attribute(
            self,
            *,
            node_id: dom.NodeId,
            name: str
    ) -> None:
        ...

    @overload
    async def remove_attribute(
            self,
            params: dom.RemoveAttributeParamsT
    ) -> None:
        ...

    @overload
    async def remove_node(
            self,
            *,
            node_id: dom.NodeId
    ) -> None:
        ...

    @overload
    async def remove_node(
            self,
            params: dom.RemoveNodeParamsT
    ) -> None:
        ...

    @overload
    async def request_child_nodes(
            self,
            *,
            node_id: dom.NodeId,
            depth: Optional[int] = ...,
            pierce: Optional[bool] = ...
    ) -> None:
        ...

    @overload
    async def request_child_nodes(
            self,
            params: dom.RequestChildNodesParamsT
    ) -> None:
        ...

    @overload
    async def request_node(
            self,
            *,
            object_id: runtime.RemoteObjectId
    ) -> dom.RequestNodeReturnT:
        ...

    @overload
    async def request_node(
            self,
            params: dom.RequestNodeParamsT
    ) -> dom.RequestNodeReturnT:
        ...

    @overload
    async def resolve_node(
            self,
            *,
            node_id: Optional[dom.NodeId] = ...,
            backend_node_id: Optional[dom.BackendNodeId] = ...,
            object_group: Optional[str] = ...,
            execution_context_id: Optional[runtime.ExecutionContextId] = ...
    ) -> dom.ResolveNodeReturnT:
        ...

    @overload
    async def resolve_node(
            self,
            params: dom.ResolveNodeParamsT
    ) -> dom.ResolveNodeReturnT:
        ...

    @overload
    async def set_attribute_value(
            self,
            *,
            node_id: dom.NodeId,
            name: str,
            value: str
    ) -> None:
        ...

    @overload
    async def set_attribute_value(
            self,
            params: dom.SetAttributeValueParamsT
    ) -> None:
        ...

    @overload
    async def set_attributes_as_text(
            self,
            *,
            node_id: dom.NodeId,
            text: str,
            name: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def set_attributes_as_text(
            self,
            params: dom.SetAttributesAsTextParamsT
    ) -> None:
        ...

    @overload
    async def set_file_input_files(
            self,
            *,
            files: list,
            node_id: Optional[dom.NodeId] = ...,
            backend_node_id: Optional[dom.BackendNodeId] = ...,
            object_id: Optional[runtime.RemoteObjectId] = ...
    ) -> None:
        ...

    @overload
    async def set_file_input_files(
            self,
            params: dom.SetFileInputFilesParamsT
    ) -> None:
        ...

    @overload
    async def set_node_stack_traces_enabled(
            self,
            *,
            enable: bool
    ) -> None:
        ...

    @overload
    async def set_node_stack_traces_enabled(
            self,
            params: dom.SetNodeStackTracesEnabledParamsT
    ) -> None:
        ...

    @overload
    async def get_node_stack_traces(
            self,
            *,
            node_id: dom.NodeId
    ) -> dom.GetNodeStackTracesReturnT:
        ...

    @overload
    async def get_node_stack_traces(
            self,
            params: dom.GetNodeStackTracesParamsT
    ) -> dom.GetNodeStackTracesReturnT:
        ...

    @overload
    async def get_file_info(
            self,
            *,
            object_id: runtime.RemoteObjectId
    ) -> dom.GetFileInfoReturnT:
        ...

    @overload
    async def get_file_info(
            self,
            params: dom.GetFileInfoParamsT
    ) -> dom.GetFileInfoReturnT:
        ...

    @overload
    async def set_inspected_node(
            self,
            *,
            node_id: dom.NodeId
    ) -> None:
        ...

    @overload
    async def set_inspected_node(
            self,
            params: dom.SetInspectedNodeParamsT
    ) -> None:
        ...

    @overload
    async def set_node_name(
            self,
            *,
            node_id: dom.NodeId,
            name: str
    ) -> dom.SetNodeNameReturnT:
        ...

    @overload
    async def set_node_name(
            self,
            params: dom.SetNodeNameParamsT
    ) -> dom.SetNodeNameReturnT:
        ...

    @overload
    async def set_node_value(
            self,
            *,
            node_id: dom.NodeId,
            value: str
    ) -> None:
        ...

    @overload
    async def set_node_value(
            self,
            params: dom.SetNodeValueParamsT
    ) -> None:
        ...

    @overload
    async def set_outer_html(
            self,
            *,
            node_id: dom.NodeId,
            outer_html: str
    ) -> None:
        ...

    @overload
    async def set_outer_html(
            self,
            params: dom.SetOuterHTMLParamsT
    ) -> None:
        ...

    @overload
    async def undo(
            self
    ) -> None:
        ...

    @overload
    async def get_frame_owner(
            self,
            *,
            frame_id: page.FrameId
    ) -> dom.GetFrameOwnerReturnT:
        ...

    @overload
    async def get_frame_owner(
            self,
            params: dom.GetFrameOwnerParamsT
    ) -> dom.GetFrameOwnerReturnT:
        ...

    @overload
    async def get_container_for_node(
            self,
            *,
            node_id: dom.NodeId,
            container_name: Optional[str] = ...,
            physical_axes: Optional[dom.PhysicalAxes] = ...,
            logical_axes: Optional[dom.LogicalAxes] = ...
    ) -> dom.GetContainerForNodeReturnT:
        ...

    @overload
    async def get_container_for_node(
            self,
            params: dom.GetContainerForNodeParamsT
    ) -> dom.GetContainerForNodeReturnT:
        ...

    @overload
    async def get_querying_descendants_for_container(
            self,
            *,
            node_id: dom.NodeId
    ) -> dom.GetQueryingDescendantsForContainerReturnT:
        ...

    @overload
    async def get_querying_descendants_for_container(
            self,
            params: dom.GetQueryingDescendantsForContainerParamsT
    ) -> dom.GetQueryingDescendantsForContainerReturnT:
        ...


@dataclass
class DOMDebugger:
    domains: 'Domains'

    @overload
    async def get_event_listeners(
            self,
            *,
            object_id: runtime.RemoteObjectId,
            depth: Optional[int] = ...,
            pierce: Optional[bool] = ...
    ) -> dom_debugger.GetEventListenersReturnT:
        ...

    @overload
    async def get_event_listeners(
            self,
            params: dom_debugger.GetEventListenersParamsT
    ) -> dom_debugger.GetEventListenersReturnT:
        ...

    @overload
    async def remove_dom_breakpoint(
            self,
            *,
            node_id: dom.NodeId,
            type: dom_debugger.DOMBreakpointType
    ) -> None:
        ...

    @overload
    async def remove_dom_breakpoint(
            self,
            params: dom_debugger.RemoveDOMBreakpointParamsT
    ) -> None:
        ...

    @overload
    async def remove_event_listener_breakpoint(
            self,
            *,
            event_name: str,
            target_name: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def remove_event_listener_breakpoint(
            self,
            params: dom_debugger.RemoveEventListenerBreakpointParamsT
    ) -> None:
        ...

    @overload
    async def remove_instrumentation_breakpoint(
            self,
            *,
            event_name: str
    ) -> None:
        ...

    @overload
    async def remove_instrumentation_breakpoint(
            self,
            params: dom_debugger.RemoveInstrumentationBreakpointParamsT
    ) -> None:
        ...

    @overload
    async def remove_xhr_breakpoint(
            self,
            *,
            url: str
    ) -> None:
        ...

    @overload
    async def remove_xhr_breakpoint(
            self,
            params: dom_debugger.RemoveXHRBreakpointParamsT
    ) -> None:
        ...

    @overload
    async def set_break_on_csp_violation(
            self,
            *,
            violation_types: list
    ) -> None:
        ...

    @overload
    async def set_break_on_csp_violation(
            self,
            params: dom_debugger.SetBreakOnCSPViolationParamsT
    ) -> None:
        ...

    @overload
    async def set_dom_breakpoint(
            self,
            *,
            node_id: dom.NodeId,
            type: dom_debugger.DOMBreakpointType
    ) -> None:
        ...

    @overload
    async def set_dom_breakpoint(
            self,
            params: dom_debugger.SetDOMBreakpointParamsT
    ) -> None:
        ...

    @overload
    async def set_event_listener_breakpoint(
            self,
            *,
            event_name: str,
            target_name: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def set_event_listener_breakpoint(
            self,
            params: dom_debugger.SetEventListenerBreakpointParamsT
    ) -> None:
        ...

    @overload
    async def set_instrumentation_breakpoint(
            self,
            *,
            event_name: str
    ) -> None:
        ...

    @overload
    async def set_instrumentation_breakpoint(
            self,
            params: dom_debugger.SetInstrumentationBreakpointParamsT
    ) -> None:
        ...

    @overload
    async def set_xhr_breakpoint(
            self,
            *,
            url: str
    ) -> None:
        ...

    @overload
    async def set_xhr_breakpoint(
            self,
            params: dom_debugger.SetXHRBreakpointParamsT
    ) -> None:
        ...


@dataclass
class EventBreakpoints:
    domains: 'Domains'

    @overload
    async def set_instrumentation_breakpoint(
            self,
            *,
            event_name: str
    ) -> None:
        ...

    @overload
    async def set_instrumentation_breakpoint(
            self,
            params: event_breakpoints.SetInstrumentationBreakpointParamsT
    ) -> None:
        ...

    @overload
    async def remove_instrumentation_breakpoint(
            self,
            *,
            event_name: str
    ) -> None:
        ...

    @overload
    async def remove_instrumentation_breakpoint(
            self,
            params: event_breakpoints.RemoveInstrumentationBreakpointParamsT
    ) -> None:
        ...


@dataclass
class DOMSnapshot:
    domains: 'Domains'

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def get_snapshot(
            self,
            *,
            computed_style_whitelist: list,
            include_event_listeners: Optional[bool] = ...,
            include_paint_order: Optional[bool] = ...,
            include_user_agent_shadow_tree: Optional[bool] = ...
    ) -> dom_snapshot.GetSnapshotReturnT:
        ...

    @overload
    async def get_snapshot(
            self,
            params: dom_snapshot.GetSnapshotParamsT
    ) -> dom_snapshot.GetSnapshotReturnT:
        ...

    @overload
    async def capture_snapshot(
            self,
            *,
            computed_styles: list,
            include_paint_order: Optional[bool] = ...,
            include_dom_rects: Optional[bool] = ...,
            include_blended_background_colors: Optional[bool] = ...,
            include_text_color_opacities: Optional[bool] = ...
    ) -> dom_snapshot.CaptureSnapshotReturnT:
        ...

    @overload
    async def capture_snapshot(
            self,
            params: dom_snapshot.CaptureSnapshotParamsT
    ) -> dom_snapshot.CaptureSnapshotReturnT:
        ...


@dataclass
class DOMStorage:
    domains: 'Domains'

    @overload
    async def clear(
            self,
            *,
            storage_id: dom_storage.StorageId
    ) -> None:
        ...

    @overload
    async def clear(
            self,
            params: dom_storage.ClearParamsT
    ) -> None:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def get_dom_storage_items(
            self,
            *,
            storage_id: dom_storage.StorageId
    ) -> dom_storage.GetDOMStorageItemsReturnT:
        ...

    @overload
    async def get_dom_storage_items(
            self,
            params: dom_storage.GetDOMStorageItemsParamsT
    ) -> dom_storage.GetDOMStorageItemsReturnT:
        ...

    @overload
    async def remove_dom_storage_item(
            self,
            *,
            storage_id: dom_storage.StorageId,
            key: str
    ) -> None:
        ...

    @overload
    async def remove_dom_storage_item(
            self,
            params: dom_storage.RemoveDOMStorageItemParamsT
    ) -> None:
        ...

    @overload
    async def set_dom_storage_item(
            self,
            *,
            storage_id: dom_storage.StorageId,
            key: str,
            value: str
    ) -> None:
        ...

    @overload
    async def set_dom_storage_item(
            self,
            params: dom_storage.SetDOMStorageItemParamsT
    ) -> None:
        ...


@dataclass
class Database:
    domains: 'Domains'

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def execute_sql(
            self,
            *,
            database_id: database.DatabaseId,
            query: str
    ) -> database.ExecuteSQLReturnT:
        ...

    @overload
    async def execute_sql(
            self,
            params: database.ExecuteSQLParamsT
    ) -> database.ExecuteSQLReturnT:
        ...

    @overload
    async def get_database_table_names(
            self,
            *,
            database_id: database.DatabaseId
    ) -> database.GetDatabaseTableNamesReturnT:
        ...

    @overload
    async def get_database_table_names(
            self,
            params: database.GetDatabaseTableNamesParamsT
    ) -> database.GetDatabaseTableNamesReturnT:
        ...


@dataclass
class DeviceOrientation:
    domains: 'Domains'

    @overload
    async def clear_device_orientation_override(
            self
    ) -> None:
        ...

    @overload
    async def set_device_orientation_override(
            self,
            *,
            alpha: float,
            beta: float,
            gamma: float
    ) -> None:
        ...

    @overload
    async def set_device_orientation_override(
            self,
            params: device_orientation.SetDeviceOrientationOverrideParamsT
    ) -> None:
        ...


@dataclass
class Emulation:
    domains: 'Domains'

    @overload
    async def can_emulate(
            self
    ) -> emulation.CanEmulateReturnT:
        ...

    @overload
    async def clear_device_metrics_override(
            self
    ) -> None:
        ...

    @overload
    async def clear_geolocation_override(
            self
    ) -> None:
        ...

    @overload
    async def reset_page_scale_factor(
            self
    ) -> None:
        ...

    @overload
    async def set_focus_emulation_enabled(
            self,
            *,
            enabled: bool
    ) -> None:
        ...

    @overload
    async def set_focus_emulation_enabled(
            self,
            params: emulation.SetFocusEmulationEnabledParamsT
    ) -> None:
        ...

    @overload
    async def set_auto_dark_mode_override(
            self,
            *,
            enabled: Optional[bool] = ...
    ) -> None:
        ...

    @overload
    async def set_auto_dark_mode_override(
            self,
            params: emulation.SetAutoDarkModeOverrideParamsT
    ) -> None:
        ...

    @overload
    async def set_cpu_throttling_rate(
            self,
            *,
            rate: float
    ) -> None:
        ...

    @overload
    async def set_cpu_throttling_rate(
            self,
            params: emulation.SetCPUThrottlingRateParamsT
    ) -> None:
        ...

    @overload
    async def set_default_background_color_override(
            self,
            *,
            color: Optional[dom.RGBA] = ...
    ) -> None:
        ...

    @overload
    async def set_default_background_color_override(
            self,
            params: emulation.SetDefaultBackgroundColorOverrideParamsT
    ) -> None:
        ...

    @overload
    async def set_device_metrics_override(
            self,
            *,
            width: int,
            height: int,
            device_scale_factor: float,
            mobile: bool,
            scale: Optional[float] = ...,
            screen_width: Optional[int] = ...,
            screen_height: Optional[int] = ...,
            position_x: Optional[int] = ...,
            position_y: Optional[int] = ...,
            dont_set_visible_size: Optional[bool] = ...,
            screen_orientation: Optional[emulation.ScreenOrientation] = ...,
            viewport: Optional[page.Viewport] = ...,
            display_feature: Optional[emulation.DisplayFeature] = ...
    ) -> None:
        ...

    @overload
    async def set_device_metrics_override(
            self,
            params: emulation.SetDeviceMetricsOverrideParamsT
    ) -> None:
        ...

    @overload
    async def set_scrollbars_hidden(
            self,
            *,
            hidden: bool
    ) -> None:
        ...

    @overload
    async def set_scrollbars_hidden(
            self,
            params: emulation.SetScrollbarsHiddenParamsT
    ) -> None:
        ...

    @overload
    async def set_document_cookie_disabled(
            self,
            *,
            disabled: bool
    ) -> None:
        ...

    @overload
    async def set_document_cookie_disabled(
            self,
            params: emulation.SetDocumentCookieDisabledParamsT
    ) -> None:
        ...

    @overload
    async def set_emit_touch_events_for_mouse(
            self,
            *,
            enabled: bool,
            configuration: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def set_emit_touch_events_for_mouse(
            self,
            params: emulation.SetEmitTouchEventsForMouseParamsT
    ) -> None:
        ...

    @overload
    async def set_emulated_media(
            self,
            *,
            media: Optional[str] = ...,
            features: Optional[list] = ...
    ) -> None:
        ...

    @overload
    async def set_emulated_media(
            self,
            params: emulation.SetEmulatedMediaParamsT
    ) -> None:
        ...

    @overload
    async def set_emulated_vision_deficiency(
            self,
            *,
            type: str
    ) -> None:
        ...

    @overload
    async def set_emulated_vision_deficiency(
            self,
            params: emulation.SetEmulatedVisionDeficiencyParamsT
    ) -> None:
        ...

    @overload
    async def set_geolocation_override(
            self,
            *,
            latitude: Optional[float] = ...,
            longitude: Optional[float] = ...,
            accuracy: Optional[float] = ...
    ) -> None:
        ...

    @overload
    async def set_geolocation_override(
            self,
            params: emulation.SetGeolocationOverrideParamsT
    ) -> None:
        ...

    @overload
    async def set_idle_override(
            self,
            *,
            is_user_active: bool,
            is_screen_unlocked: bool
    ) -> None:
        ...

    @overload
    async def set_idle_override(
            self,
            params: emulation.SetIdleOverrideParamsT
    ) -> None:
        ...

    @overload
    async def clear_idle_override(
            self
    ) -> None:
        ...

    @overload
    async def set_navigator_overrides(
            self,
            *,
            platform: str
    ) -> None:
        ...

    @overload
    async def set_navigator_overrides(
            self,
            params: emulation.SetNavigatorOverridesParamsT
    ) -> None:
        ...

    @overload
    async def set_page_scale_factor(
            self,
            *,
            page_scale_factor: float
    ) -> None:
        ...

    @overload
    async def set_page_scale_factor(
            self,
            params: emulation.SetPageScaleFactorParamsT
    ) -> None:
        ...

    @overload
    async def set_script_execution_disabled(
            self,
            *,
            value: bool
    ) -> None:
        ...

    @overload
    async def set_script_execution_disabled(
            self,
            params: emulation.SetScriptExecutionDisabledParamsT
    ) -> None:
        ...

    @overload
    async def set_touch_emulation_enabled(
            self,
            *,
            enabled: bool,
            max_touch_points: Optional[int] = ...
    ) -> None:
        ...

    @overload
    async def set_touch_emulation_enabled(
            self,
            params: emulation.SetTouchEmulationEnabledParamsT
    ) -> None:
        ...

    @overload
    async def set_virtual_time_policy(
            self,
            *,
            policy: emulation.VirtualTimePolicy,
            budget: Optional[float] = ...,
            max_virtual_time_task_starvation_count: Optional[int] = ...,
            initial_virtual_time: Optional[network.TimeSinceEpoch] = ...
    ) -> emulation.SetVirtualTimePolicyReturnT:
        ...

    @overload
    async def set_virtual_time_policy(
            self,
            params: emulation.SetVirtualTimePolicyParamsT
    ) -> emulation.SetVirtualTimePolicyReturnT:
        ...

    @overload
    async def set_locale_override(
            self,
            *,
            locale: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def set_locale_override(
            self,
            params: emulation.SetLocaleOverrideParamsT
    ) -> None:
        ...

    @overload
    async def set_timezone_override(
            self,
            *,
            timezone_id: str
    ) -> None:
        ...

    @overload
    async def set_timezone_override(
            self,
            params: emulation.SetTimezoneOverrideParamsT
    ) -> None:
        ...

    @overload
    async def set_visible_size(
            self,
            *,
            width: int,
            height: int
    ) -> None:
        ...

    @overload
    async def set_visible_size(
            self,
            params: emulation.SetVisibleSizeParamsT
    ) -> None:
        ...

    @overload
    async def set_disabled_image_types(
            self,
            *,
            image_types: list
    ) -> None:
        ...

    @overload
    async def set_disabled_image_types(
            self,
            params: emulation.SetDisabledImageTypesParamsT
    ) -> None:
        ...

    @overload
    async def set_hardware_concurrency_override(
            self,
            *,
            hardware_concurrency: int
    ) -> None:
        ...

    @overload
    async def set_hardware_concurrency_override(
            self,
            params: emulation.SetHardwareConcurrencyOverrideParamsT
    ) -> None:
        ...

    @overload
    async def set_user_agent_override(
            self,
            *,
            user_agent: str,
            accept_language: Optional[str] = ...,
            platform: Optional[str] = ...,
            user_agent_metadata: Optional[emulation.UserAgentMetadata] = ...
    ) -> None:
        ...

    @overload
    async def set_user_agent_override(
            self,
            params: emulation.SetUserAgentOverrideParamsT
    ) -> None:
        ...

    @overload
    async def set_automation_override(
            self,
            *,
            enabled: bool
    ) -> None:
        ...

    @overload
    async def set_automation_override(
            self,
            params: emulation.SetAutomationOverrideParamsT
    ) -> None:
        ...


@dataclass
class HeadlessExperimental:
    domains: 'Domains'

    @overload
    async def begin_frame(
            self,
            *,
            frame_time_ticks: Optional[float] = ...,
            interval: Optional[float] = ...,
            no_display_updates: Optional[bool] = ...,
            screenshot: Optional[headless_experimental.ScreenshotParams] = ...
    ) -> headless_experimental.BeginFrameReturnT:
        ...

    @overload
    async def begin_frame(
            self,
            params: headless_experimental.BeginFrameParamsT
    ) -> headless_experimental.BeginFrameReturnT:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...


@dataclass
class IO:
    domains: 'Domains'

    @overload
    async def close(
            self,
            *,
            handle: io.StreamHandle
    ) -> None:
        ...

    @overload
    async def close(
            self,
            params: io.CloseParamsT
    ) -> None:
        ...

    @overload
    async def read(
            self,
            *,
            handle: io.StreamHandle,
            offset: Optional[int] = ...,
            size: Optional[int] = ...
    ) -> io.ReadReturnT:
        ...

    @overload
    async def read(
            self,
            params: io.ReadParamsT
    ) -> io.ReadReturnT:
        ...

    @overload
    async def resolve_blob(
            self,
            *,
            object_id: runtime.RemoteObjectId
    ) -> io.ResolveBlobReturnT:
        ...

    @overload
    async def resolve_blob(
            self,
            params: io.ResolveBlobParamsT
    ) -> io.ResolveBlobReturnT:
        ...


@dataclass
class IndexedDB:
    domains: 'Domains'

    @overload
    async def clear_object_store(
            self,
            *,
            security_origin: Optional[str],
            storage_key: Optional[str],
            storage_bucket: Optional[storage.StorageBucket] = ...,
            database_name: str = ...,
            object_store_name: str = ...
    ) -> None:
        ...

    @overload
    async def clear_object_store(
            self,
            params: indexed_db.ClearObjectStoreParamsT
    ) -> None:
        ...

    @overload
    async def delete_database(
            self,
            *,
            security_origin: Optional[str],
            storage_key: Optional[str] = ...,
            storage_bucket: Optional[storage.StorageBucket] = ...,
            database_name: str = ...
    ) -> None:
        ...

    @overload
    async def delete_database(
            self,
            params: indexed_db.DeleteDatabaseParamsT
    ) -> None:
        ...

    @overload
    async def delete_object_store_entries(
            self,
            *,
            security_origin: Optional[str],
            storage_key: Optional[str],
            storage_bucket: Optional[storage.StorageBucket],
            database_name: str = ...,
            object_store_name: str = ...,
            key_range: indexed_db.KeyRange = ...
    ) -> None:
        ...

    @overload
    async def delete_object_store_entries(
            self,
            params: indexed_db.DeleteObjectStoreEntriesParamsT
    ) -> None:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def request_data(
            self,
            *,
            security_origin: Optional[str],
            storage_key: Optional[str],
            storage_bucket: Optional[storage.StorageBucket],
            database_name: str,
            object_store_name: str,
            index_name: str = ...,
            skip_count: int = ...,
            page_size: int = ...,
            key_range: Optional[indexed_db.KeyRange] = ...
    ) -> indexed_db.RequestDataReturnT:
        ...

    @overload
    async def request_data(
            self,
            params: indexed_db.RequestDataParamsT
    ) -> indexed_db.RequestDataReturnT:
        ...

    @overload
    async def get_metadata(
            self,
            *,
            security_origin: Optional[str],
            storage_key: Optional[str],
            storage_bucket: Optional[storage.StorageBucket] = ...,
            database_name: str = ...,
            object_store_name: str = ...
    ) -> indexed_db.GetMetadataReturnT:
        ...

    @overload
    async def get_metadata(
            self,
            params: indexed_db.GetMetadataParamsT
    ) -> indexed_db.GetMetadataReturnT:
        ...

    @overload
    async def request_database(
            self,
            *,
            security_origin: Optional[str],
            storage_key: Optional[str] = ...,
            storage_bucket: Optional[storage.StorageBucket] = ...,
            database_name: str = ...
    ) -> indexed_db.RequestDatabaseReturnT:
        ...

    @overload
    async def request_database(
            self,
            params: indexed_db.RequestDatabaseParamsT
    ) -> indexed_db.RequestDatabaseReturnT:
        ...

    @overload
    async def request_database_names(
            self,
            *,
            security_origin: Optional[str] = ...,
            storage_key: Optional[str] = ...,
            storage_bucket: Optional[storage.StorageBucket] = ...
    ) -> indexed_db.RequestDatabaseNamesReturnT:
        ...

    @overload
    async def request_database_names(
            self,
            params: indexed_db.RequestDatabaseNamesParamsT
    ) -> indexed_db.RequestDatabaseNamesReturnT:
        ...


@dataclass
class Input:
    domains: 'Domains'

    @overload
    async def dispatch_drag_event(
            self,
            *,
            type: str,
            x: float,
            y: float,
            data: input.DragData,
            modifiers: Optional[int] = ...
    ) -> None:
        ...

    @overload
    async def dispatch_drag_event(
            self,
            params: input.DispatchDragEventParamsT
    ) -> None:
        ...

    @overload
    async def dispatch_key_event(
            self,
            *,
            type: str,
            modifiers: Optional[int] = ...,
            timestamp: Optional[input.TimeSinceEpoch] = ...,
            text: Optional[str] = ...,
            unmodified_text: Optional[str] = ...,
            key_identifier: Optional[str] = ...,
            code: Optional[str] = ...,
            key: Optional[str] = ...,
            windows_virtual_key_code: Optional[int] = ...,
            native_virtual_key_code: Optional[int] = ...,
            auto_repeat: Optional[bool] = ...,
            is_keypad: Optional[bool] = ...,
            is_system_key: Optional[bool] = ...,
            location: Optional[int] = ...,
            commands: Optional[list] = ...
    ) -> None:
        ...

    @overload
    async def dispatch_key_event(
            self,
            params: input.DispatchKeyEventParamsT
    ) -> None:
        ...

    @overload
    async def insert_text(
            self,
            *,
            text: str
    ) -> None:
        ...

    @overload
    async def insert_text(
            self,
            params: input.InsertTextParamsT
    ) -> None:
        ...

    @overload
    async def ime_set_composition(
            self,
            *,
            text: str,
            selection_start: int,
            selection_end: int,
            replacement_start: Optional[int] = ...,
            replacement_end: Optional[int] = ...
    ) -> None:
        ...

    @overload
    async def ime_set_composition(
            self,
            params: input.ImeSetCompositionParamsT
    ) -> None:
        ...

    @overload
    async def dispatch_mouse_event(
            self,
            *,
            type: str,
            x: float,
            y: float,
            modifiers: Optional[int] = ...,
            timestamp: Optional[input.TimeSinceEpoch] = ...,
            button: Optional[input.MouseButton] = ...,
            buttons: Optional[int] = ...,
            click_count: Optional[int] = ...,
            force: Optional[float] = ...,
            tangential_pressure: Optional[float] = ...,
            tilt_x: Optional[int] = ...,
            tilt_y: Optional[int] = ...,
            twist: Optional[int] = ...,
            delta_x: Optional[float] = ...,
            delta_y: Optional[float] = ...,
            pointer_type: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def dispatch_mouse_event(
            self,
            params: input.DispatchMouseEventParamsT
    ) -> None:
        ...

    @overload
    async def dispatch_touch_event(
            self,
            *,
            type: str,
            touch_points: list,
            modifiers: Optional[int] = ...,
            timestamp: Optional[input.TimeSinceEpoch] = ...
    ) -> None:
        ...

    @overload
    async def dispatch_touch_event(
            self,
            params: input.DispatchTouchEventParamsT
    ) -> None:
        ...

    @overload
    async def cancel_dragging(
            self
    ) -> None:
        ...

    @overload
    async def emulate_touch_from_mouse_event(
            self,
            *,
            type: str,
            x: int,
            y: int,
            button: input.MouseButton,
            timestamp: Optional[input.TimeSinceEpoch] = ...,
            delta_x: Optional[float] = ...,
            delta_y: Optional[float] = ...,
            modifiers: Optional[int] = ...,
            click_count: Optional[int] = ...
    ) -> None:
        ...

    @overload
    async def emulate_touch_from_mouse_event(
            self,
            params: input.EmulateTouchFromMouseEventParamsT
    ) -> None:
        ...

    @overload
    async def set_ignore_input_events(
            self,
            *,
            ignore: bool
    ) -> None:
        ...

    @overload
    async def set_ignore_input_events(
            self,
            params: input.SetIgnoreInputEventsParamsT
    ) -> None:
        ...

    @overload
    async def set_intercept_drags(
            self,
            *,
            enabled: bool
    ) -> None:
        ...

    @overload
    async def set_intercept_drags(
            self,
            params: input.SetInterceptDragsParamsT
    ) -> None:
        ...

    @overload
    async def synthesize_pinch_gesture(
            self,
            *,
            x: float,
            y: float,
            scale_factor: float,
            relative_speed: Optional[int] = ...,
            gesture_source_type: Optional[input.GestureSourceType] = ...
    ) -> None:
        ...

    @overload
    async def synthesize_pinch_gesture(
            self,
            params: input.SynthesizePinchGestureParamsT
    ) -> None:
        ...

    @overload
    async def synthesize_scroll_gesture(
            self,
            *,
            x: float,
            y: float,
            x_distance: Optional[float] = ...,
            y_distance: Optional[float] = ...,
            x_overscroll: Optional[float] = ...,
            y_overscroll: Optional[float] = ...,
            prevent_fling: Optional[bool] = ...,
            speed: Optional[int] = ...,
            gesture_source_type: Optional[input.GestureSourceType] = ...,
            repeat_count: Optional[int] = ...,
            repeat_delay_ms: Optional[int] = ...,
            interaction_marker_name: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def synthesize_scroll_gesture(
            self,
            params: input.SynthesizeScrollGestureParamsT
    ) -> None:
        ...

    @overload
    async def synthesize_tap_gesture(
            self,
            *,
            x: float,
            y: float,
            duration: Optional[int] = ...,
            tap_count: Optional[int] = ...,
            gesture_source_type: Optional[input.GestureSourceType] = ...
    ) -> None:
        ...

    @overload
    async def synthesize_tap_gesture(
            self,
            params: input.SynthesizeTapGestureParamsT
    ) -> None:
        ...


@dataclass
class Inspector:
    domains: 'Domains'

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...


@dataclass
class LayerTree:
    domains: 'Domains'

    @overload
    async def compositing_reasons(
            self,
            *,
            layer_id: layer_tree.LayerId
    ) -> layer_tree.CompositingReasonsReturnT:
        ...

    @overload
    async def compositing_reasons(
            self,
            params: layer_tree.CompositingReasonsParamsT
    ) -> layer_tree.CompositingReasonsReturnT:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def load_snapshot(
            self,
            *,
            tiles: list
    ) -> layer_tree.LoadSnapshotReturnT:
        ...

    @overload
    async def load_snapshot(
            self,
            params: layer_tree.LoadSnapshotParamsT
    ) -> layer_tree.LoadSnapshotReturnT:
        ...

    @overload
    async def make_snapshot(
            self,
            *,
            layer_id: layer_tree.LayerId
    ) -> layer_tree.MakeSnapshotReturnT:
        ...

    @overload
    async def make_snapshot(
            self,
            params: layer_tree.MakeSnapshotParamsT
    ) -> layer_tree.MakeSnapshotReturnT:
        ...

    @overload
    async def profile_snapshot(
            self,
            *,
            snapshot_id: layer_tree.SnapshotId,
            min_repeat_count: Optional[int] = ...,
            min_duration: Optional[float] = ...,
            clip_rect: Optional[dom.Rect] = ...
    ) -> layer_tree.ProfileSnapshotReturnT:
        ...

    @overload
    async def profile_snapshot(
            self,
            params: layer_tree.ProfileSnapshotParamsT
    ) -> layer_tree.ProfileSnapshotReturnT:
        ...

    @overload
    async def release_snapshot(
            self,
            *,
            snapshot_id: layer_tree.SnapshotId
    ) -> None:
        ...

    @overload
    async def release_snapshot(
            self,
            params: layer_tree.ReleaseSnapshotParamsT
    ) -> None:
        ...

    @overload
    async def replay_snapshot(
            self,
            *,
            snapshot_id: layer_tree.SnapshotId,
            from_step: Optional[int] = ...,
            to_step: Optional[int] = ...,
            scale: Optional[float] = ...
    ) -> layer_tree.ReplaySnapshotReturnT:
        ...

    @overload
    async def replay_snapshot(
            self,
            params: layer_tree.ReplaySnapshotParamsT
    ) -> layer_tree.ReplaySnapshotReturnT:
        ...

    @overload
    async def snapshot_command_log(
            self,
            *,
            snapshot_id: layer_tree.SnapshotId
    ) -> layer_tree.SnapshotCommandLogReturnT:
        ...

    @overload
    async def snapshot_command_log(
            self,
            params: layer_tree.SnapshotCommandLogParamsT
    ) -> layer_tree.SnapshotCommandLogReturnT:
        ...


@dataclass
class Log:
    domains: 'Domains'

    @overload
    async def clear(
            self
    ) -> None:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def start_violations_report(
            self,
            *,
            config: list
    ) -> None:
        ...

    @overload
    async def start_violations_report(
            self,
            params: log.StartViolationsReportParamsT
    ) -> None:
        ...

    @overload
    async def stop_violations_report(
            self
    ) -> None:
        ...


@dataclass
class Memory:
    domains: 'Domains'

    @overload
    async def get_dom_counters(
            self
    ) -> memory.GetDOMCountersReturnT:
        ...

    @overload
    async def prepare_for_leak_detection(
            self
    ) -> None:
        ...

    @overload
    async def forcibly_purge_java_script_memory(
            self
    ) -> None:
        ...

    @overload
    async def set_pressure_notifications_suppressed(
            self,
            *,
            suppressed: bool
    ) -> None:
        ...

    @overload
    async def set_pressure_notifications_suppressed(
            self,
            params: memory.SetPressureNotificationsSuppressedParamsT
    ) -> None:
        ...

    @overload
    async def simulate_pressure_notification(
            self,
            *,
            level: memory.PressureLevel
    ) -> None:
        ...

    @overload
    async def simulate_pressure_notification(
            self,
            params: memory.SimulatePressureNotificationParamsT
    ) -> None:
        ...

    @overload
    async def start_sampling(
            self,
            *,
            sampling_interval: Optional[int] = ...,
            suppress_randomness: Optional[bool] = ...
    ) -> None:
        ...

    @overload
    async def start_sampling(
            self,
            params: memory.StartSamplingParamsT
    ) -> None:
        ...

    @overload
    async def stop_sampling(
            self
    ) -> None:
        ...

    @overload
    async def get_all_time_sampling_profile(
            self
    ) -> memory.GetAllTimeSamplingProfileReturnT:
        ...

    @overload
    async def get_browser_sampling_profile(
            self
    ) -> memory.GetBrowserSamplingProfileReturnT:
        ...

    @overload
    async def get_sampling_profile(
            self
    ) -> memory.GetSamplingProfileReturnT:
        ...


@dataclass
class Network:
    domains: 'Domains'

    @overload
    async def set_accepted_encodings(
            self,
            *,
            encodings: list
    ) -> None:
        ...

    @overload
    async def set_accepted_encodings(
            self,
            params: network.SetAcceptedEncodingsParamsT
    ) -> None:
        ...

    @overload
    async def clear_accepted_encodings_override(
            self
    ) -> None:
        ...

    @overload
    async def can_clear_browser_cache(
            self
    ) -> network.CanClearBrowserCacheReturnT:
        ...

    @overload
    async def can_clear_browser_cookies(
            self
    ) -> network.CanClearBrowserCookiesReturnT:
        ...

    @overload
    async def can_emulate_network_conditions(
            self
    ) -> network.CanEmulateNetworkConditionsReturnT:
        ...

    @overload
    async def clear_browser_cache(
            self
    ) -> None:
        ...

    @overload
    async def clear_browser_cookies(
            self
    ) -> None:
        ...

    @overload
    async def continue_intercepted_request(
            self,
            *,
            interception_id: network.InterceptionId,
            error_reason: Optional[network.ErrorReason] = ...,
            raw_response: Optional[str] = ...,
            url: Optional[str] = ...,
            method: Optional[str] = ...,
            post_data: Optional[str] = ...,
            headers: Optional[network.Headers] = ...,
            auth_challenge_response: Optional[network.AuthChallengeResponse] = ...
    ) -> None:
        ...

    @overload
    async def continue_intercepted_request(
            self,
            params: network.ContinueInterceptedRequestParamsT
    ) -> None:
        ...

    @overload
    async def delete_cookies(
            self,
            *,
            name: str,
            url: Optional[str] = ...,
            domain: Optional[str] = ...,
            path: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def delete_cookies(
            self,
            params: network.DeleteCookiesParamsT
    ) -> None:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def emulate_network_conditions(
            self,
            *,
            offline: bool,
            latency: float,
            download_throughput: float,
            upload_throughput: float,
            connection_type: Optional[network.ConnectionType] = ...
    ) -> None:
        ...

    @overload
    async def emulate_network_conditions(
            self,
            params: network.EmulateNetworkConditionsParamsT
    ) -> None:
        ...

    @overload
    async def enable(
            self,
            *,
            max_total_buffer_size: Optional[int] = ...,
            max_resource_buffer_size: Optional[int] = ...,
            max_post_data_size: Optional[int] = ...
    ) -> None:
        ...

    @overload
    async def enable(
            self,
            params: network.EnableParamsT
    ) -> None:
        ...

    @overload
    async def get_all_cookies(
            self
    ) -> network.GetAllCookiesReturnT:
        ...

    @overload
    async def get_certificate(
            self,
            *,
            origin: str
    ) -> network.GetCertificateReturnT:
        ...

    @overload
    async def get_certificate(
            self,
            params: network.GetCertificateParamsT
    ) -> network.GetCertificateReturnT:
        ...

    @overload
    async def get_cookies(
            self,
            *,
            urls: Optional[list] = ...
    ) -> network.GetCookiesReturnT:
        ...

    @overload
    async def get_cookies(
            self,
            params: network.GetCookiesParamsT
    ) -> network.GetCookiesReturnT:
        ...

    @overload
    async def get_response_body(
            self,
            *,
            request_id: network.RequestId
    ) -> network.GetResponseBodyReturnT:
        ...

    @overload
    async def get_response_body(
            self,
            params: network.GetResponseBodyParamsT
    ) -> network.GetResponseBodyReturnT:
        ...

    @overload
    async def get_request_post_data(
            self,
            *,
            request_id: network.RequestId
    ) -> network.GetRequestPostDataReturnT:
        ...

    @overload
    async def get_request_post_data(
            self,
            params: network.GetRequestPostDataParamsT
    ) -> network.GetRequestPostDataReturnT:
        ...

    @overload
    async def get_response_body_for_interception(
            self,
            *,
            interception_id: network.InterceptionId
    ) -> network.GetResponseBodyForInterceptionReturnT:
        ...

    @overload
    async def get_response_body_for_interception(
            self,
            params: network.GetResponseBodyForInterceptionParamsT
    ) -> network.GetResponseBodyForInterceptionReturnT:
        ...

    @overload
    async def take_response_body_for_interception_as_stream(
            self,
            *,
            interception_id: network.InterceptionId
    ) -> network.TakeResponseBodyForInterceptionAsStreamReturnT:
        ...

    @overload
    async def take_response_body_for_interception_as_stream(
            self,
            params: network.TakeResponseBodyForInterceptionAsStreamParamsT
    ) -> network.TakeResponseBodyForInterceptionAsStreamReturnT:
        ...

    @overload
    async def replay_xhr(
            self,
            *,
            request_id: network.RequestId
    ) -> None:
        ...

    @overload
    async def replay_xhr(
            self,
            params: network.ReplayXHRParamsT
    ) -> None:
        ...

    @overload
    async def search_in_response_body(
            self,
            *,
            request_id: network.RequestId,
            query: str,
            case_sensitive: Optional[bool] = ...,
            is_regex: Optional[bool] = ...
    ) -> network.SearchInResponseBodyReturnT:
        ...

    @overload
    async def search_in_response_body(
            self,
            params: network.SearchInResponseBodyParamsT
    ) -> network.SearchInResponseBodyReturnT:
        ...

    @overload
    async def set_blocked_ur_ls(
            self,
            *,
            urls: list
    ) -> None:
        ...

    @overload
    async def set_blocked_ur_ls(
            self,
            params: network.SetBlockedURLsParamsT
    ) -> None:
        ...

    @overload
    async def set_bypass_service_worker(
            self,
            *,
            bypass: bool
    ) -> None:
        ...

    @overload
    async def set_bypass_service_worker(
            self,
            params: network.SetBypassServiceWorkerParamsT
    ) -> None:
        ...

    @overload
    async def set_cache_disabled(
            self,
            *,
            cache_disabled: bool
    ) -> None:
        ...

    @overload
    async def set_cache_disabled(
            self,
            params: network.SetCacheDisabledParamsT
    ) -> None:
        ...

    @overload
    async def set_cookie(
            self,
            *,
            name: str,
            value: str,
            url: Optional[str] = ...,
            domain: Optional[str] = ...,
            path: Optional[str] = ...,
            secure: Optional[bool] = ...,
            http_only: Optional[bool] = ...,
            same_site: Optional[network.CookieSameSite] = ...,
            expires: Optional[network.TimeSinceEpoch] = ...,
            priority: Optional[network.CookiePriority] = ...,
            same_party: Optional[bool] = ...,
            source_scheme: Optional[network.CookieSourceScheme] = ...,
            source_port: Optional[int] = ...,
            partition_key: Optional[str] = ...
    ) -> network.SetCookieReturnT:
        ...

    @overload
    async def set_cookie(
            self,
            params: network.SetCookieParamsT
    ) -> network.SetCookieReturnT:
        ...

    @overload
    async def set_cookies(
            self,
            *,
            cookies: list
    ) -> None:
        ...

    @overload
    async def set_cookies(
            self,
            params: network.SetCookiesParamsT
    ) -> None:
        ...

    @overload
    async def set_extra_http_headers(
            self,
            *,
            headers: network.Headers
    ) -> None:
        ...

    @overload
    async def set_extra_http_headers(
            self,
            params: network.SetExtraHTTPHeadersParamsT
    ) -> None:
        ...

    @overload
    async def set_attach_debug_stack(
            self,
            *,
            enabled: bool
    ) -> None:
        ...

    @overload
    async def set_attach_debug_stack(
            self,
            params: network.SetAttachDebugStackParamsT
    ) -> None:
        ...

    @overload
    async def set_request_interception(
            self,
            *,
            patterns: list
    ) -> None:
        ...

    @overload
    async def set_request_interception(
            self,
            params: network.SetRequestInterceptionParamsT
    ) -> None:
        ...

    @overload
    async def set_user_agent_override(
            self,
            *,
            user_agent: str,
            accept_language: Optional[str] = ...,
            platform: Optional[str] = ...,
            user_agent_metadata: Optional[emulation.UserAgentMetadata] = ...
    ) -> None:
        ...

    @overload
    async def set_user_agent_override(
            self,
            params: network.SetUserAgentOverrideParamsT
    ) -> None:
        ...

    @overload
    async def get_security_isolation_status(
            self,
            *,
            frame_id: Optional[page.FrameId] = ...
    ) -> network.GetSecurityIsolationStatusReturnT:
        ...

    @overload
    async def get_security_isolation_status(
            self,
            params: network.GetSecurityIsolationStatusParamsT
    ) -> network.GetSecurityIsolationStatusReturnT:
        ...

    @overload
    async def enable_reporting_api(
            self,
            *,
            enable: bool
    ) -> None:
        ...

    @overload
    async def enable_reporting_api(
            self,
            params: network.EnableReportingApiParamsT
    ) -> None:
        ...

    @overload
    async def load_network_resource(
            self,
            *,
            frame_id: Optional[page.FrameId],
            url: str,
            options: network.LoadNetworkResourceOptions = ...
    ) -> network.LoadNetworkResourceReturnT:
        ...

    @overload
    async def load_network_resource(
            self,
            params: network.LoadNetworkResourceParamsT
    ) -> network.LoadNetworkResourceReturnT:
        ...


@dataclass
class Overlay:
    domains: 'Domains'

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def get_highlight_object_for_test(
            self,
            *,
            node_id: dom.NodeId,
            include_distance: Optional[bool] = ...,
            include_style: Optional[bool] = ...,
            color_format: Optional[overlay.ColorFormat] = ...,
            show_accessibility_info: Optional[bool] = ...
    ) -> overlay.GetHighlightObjectForTestReturnT:
        ...

    @overload
    async def get_highlight_object_for_test(
            self,
            params: overlay.GetHighlightObjectForTestParamsT
    ) -> overlay.GetHighlightObjectForTestReturnT:
        ...

    @overload
    async def get_grid_highlight_objects_for_test(
            self,
            *,
            node_ids: list
    ) -> overlay.GetGridHighlightObjectsForTestReturnT:
        ...

    @overload
    async def get_grid_highlight_objects_for_test(
            self,
            params: overlay.GetGridHighlightObjectsForTestParamsT
    ) -> overlay.GetGridHighlightObjectsForTestReturnT:
        ...

    @overload
    async def get_source_order_highlight_object_for_test(
            self,
            *,
            node_id: dom.NodeId
    ) -> overlay.GetSourceOrderHighlightObjectForTestReturnT:
        ...

    @overload
    async def get_source_order_highlight_object_for_test(
            self,
            params: overlay.GetSourceOrderHighlightObjectForTestParamsT
    ) -> overlay.GetSourceOrderHighlightObjectForTestReturnT:
        ...

    @overload
    async def hide_highlight(
            self
    ) -> None:
        ...

    @overload
    async def highlight_frame(
            self,
            *,
            frame_id: page.FrameId,
            content_color: Optional[dom.RGBA] = ...,
            content_outline_color: Optional[dom.RGBA] = ...
    ) -> None:
        ...

    @overload
    async def highlight_frame(
            self,
            params: overlay.HighlightFrameParamsT
    ) -> None:
        ...

    @overload
    async def highlight_node(
            self,
            *,
            highlight_config: overlay.HighlightConfig,
            node_id: Optional[dom.NodeId] = ...,
            backend_node_id: Optional[dom.BackendNodeId] = ...,
            object_id: Optional[runtime.RemoteObjectId] = ...,
            selector: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def highlight_node(
            self,
            params: overlay.HighlightNodeParamsT
    ) -> None:
        ...

    @overload
    async def highlight_quad(
            self,
            *,
            quad: dom.Quad,
            color: Optional[dom.RGBA] = ...,
            outline_color: Optional[dom.RGBA] = ...
    ) -> None:
        ...

    @overload
    async def highlight_quad(
            self,
            params: overlay.HighlightQuadParamsT
    ) -> None:
        ...

    @overload
    async def highlight_rect(
            self,
            *,
            x: int,
            y: int,
            width: int,
            height: int,
            color: Optional[dom.RGBA] = ...,
            outline_color: Optional[dom.RGBA] = ...
    ) -> None:
        ...

    @overload
    async def highlight_rect(
            self,
            params: overlay.HighlightRectParamsT
    ) -> None:
        ...

    @overload
    async def highlight_source_order(
            self,
            *,
            source_order_config: overlay.SourceOrderConfig,
            node_id: Optional[dom.NodeId] = ...,
            backend_node_id: Optional[dom.BackendNodeId] = ...,
            object_id: Optional[runtime.RemoteObjectId] = ...
    ) -> None:
        ...

    @overload
    async def highlight_source_order(
            self,
            params: overlay.HighlightSourceOrderParamsT
    ) -> None:
        ...

    @overload
    async def set_inspect_mode(
            self,
            *,
            mode: overlay.InspectMode,
            highlight_config: Optional[overlay.HighlightConfig] = ...
    ) -> None:
        ...

    @overload
    async def set_inspect_mode(
            self,
            params: overlay.SetInspectModeParamsT
    ) -> None:
        ...

    @overload
    async def set_show_ad_highlights(
            self,
            *,
            show: bool
    ) -> None:
        ...

    @overload
    async def set_show_ad_highlights(
            self,
            params: overlay.SetShowAdHighlightsParamsT
    ) -> None:
        ...

    @overload
    async def set_paused_in_debugger_message(
            self,
            *,
            message: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def set_paused_in_debugger_message(
            self,
            params: overlay.SetPausedInDebuggerMessageParamsT
    ) -> None:
        ...

    @overload
    async def set_show_debug_borders(
            self,
            *,
            show: bool
    ) -> None:
        ...

    @overload
    async def set_show_debug_borders(
            self,
            params: overlay.SetShowDebugBordersParamsT
    ) -> None:
        ...

    @overload
    async def set_show_fps_counter(
            self,
            *,
            show: bool
    ) -> None:
        ...

    @overload
    async def set_show_fps_counter(
            self,
            params: overlay.SetShowFPSCounterParamsT
    ) -> None:
        ...

    @overload
    async def set_show_grid_overlays(
            self,
            *,
            grid_node_highlight_configs: list
    ) -> None:
        ...

    @overload
    async def set_show_grid_overlays(
            self,
            params: overlay.SetShowGridOverlaysParamsT
    ) -> None:
        ...

    @overload
    async def set_show_flex_overlays(
            self,
            *,
            flex_node_highlight_configs: list
    ) -> None:
        ...

    @overload
    async def set_show_flex_overlays(
            self,
            params: overlay.SetShowFlexOverlaysParamsT
    ) -> None:
        ...

    @overload
    async def set_show_scroll_snap_overlays(
            self,
            *,
            scroll_snap_highlight_configs: list
    ) -> None:
        ...

    @overload
    async def set_show_scroll_snap_overlays(
            self,
            params: overlay.SetShowScrollSnapOverlaysParamsT
    ) -> None:
        ...

    @overload
    async def set_show_container_query_overlays(
            self,
            *,
            container_query_highlight_configs: list
    ) -> None:
        ...

    @overload
    async def set_show_container_query_overlays(
            self,
            params: overlay.SetShowContainerQueryOverlaysParamsT
    ) -> None:
        ...

    @overload
    async def set_show_paint_rects(
            self,
            *,
            result: bool
    ) -> None:
        ...

    @overload
    async def set_show_paint_rects(
            self,
            params: overlay.SetShowPaintRectsParamsT
    ) -> None:
        ...

    @overload
    async def set_show_layout_shift_regions(
            self,
            *,
            result: bool
    ) -> None:
        ...

    @overload
    async def set_show_layout_shift_regions(
            self,
            params: overlay.SetShowLayoutShiftRegionsParamsT
    ) -> None:
        ...

    @overload
    async def set_show_scroll_bottleneck_rects(
            self,
            *,
            show: bool
    ) -> None:
        ...

    @overload
    async def set_show_scroll_bottleneck_rects(
            self,
            params: overlay.SetShowScrollBottleneckRectsParamsT
    ) -> None:
        ...

    @overload
    async def set_show_hit_test_borders(
            self,
            *,
            show: bool
    ) -> None:
        ...

    @overload
    async def set_show_hit_test_borders(
            self,
            params: overlay.SetShowHitTestBordersParamsT
    ) -> None:
        ...

    @overload
    async def set_show_web_vitals(
            self,
            *,
            show: bool
    ) -> None:
        ...

    @overload
    async def set_show_web_vitals(
            self,
            params: overlay.SetShowWebVitalsParamsT
    ) -> None:
        ...

    @overload
    async def set_show_viewport_size_on_resize(
            self,
            *,
            show: bool
    ) -> None:
        ...

    @overload
    async def set_show_viewport_size_on_resize(
            self,
            params: overlay.SetShowViewportSizeOnResizeParamsT
    ) -> None:
        ...

    @overload
    async def set_show_hinge(
            self,
            *,
            hinge_config: Optional[overlay.HingeConfig] = ...
    ) -> None:
        ...

    @overload
    async def set_show_hinge(
            self,
            params: overlay.SetShowHingeParamsT
    ) -> None:
        ...

    @overload
    async def set_show_isolated_elements(
            self,
            *,
            isolated_element_highlight_configs: list
    ) -> None:
        ...

    @overload
    async def set_show_isolated_elements(
            self,
            params: overlay.SetShowIsolatedElementsParamsT
    ) -> None:
        ...


@dataclass
class Page:
    domains: 'Domains'

    @overload
    async def add_script_to_evaluate_on_load(
            self,
            *,
            script_source: str
    ) -> page.AddScriptToEvaluateOnLoadReturnT:
        ...

    @overload
    async def add_script_to_evaluate_on_load(
            self,
            params: page.AddScriptToEvaluateOnLoadParamsT
    ) -> page.AddScriptToEvaluateOnLoadReturnT:
        ...

    @overload
    async def add_script_to_evaluate_on_new_document(
            self,
            *,
            source: str,
            world_name: Optional[str] = ...,
            include_command_line_api: Optional[bool] = ...,
            run_immediately: Optional[bool] = ...
    ) -> page.AddScriptToEvaluateOnNewDocumentReturnT:
        ...

    @overload
    async def add_script_to_evaluate_on_new_document(
            self,
            params: page.AddScriptToEvaluateOnNewDocumentParamsT
    ) -> page.AddScriptToEvaluateOnNewDocumentReturnT:
        ...

    @overload
    async def bring_to_front(
            self
    ) -> None:
        ...

    @overload
    async def capture_screenshot(
            self,
            *,
            format: Optional[str] = ...,
            quality: Optional[int] = ...,
            clip: Optional[page.Viewport] = ...,
            from_surface: Optional[bool] = ...,
            capture_beyond_viewport: Optional[bool] = ...,
            optimize_for_speed: Optional[bool] = ...
    ) -> page.CaptureScreenshotReturnT:
        ...

    @overload
    async def capture_screenshot(
            self,
            params: page.CaptureScreenshotParamsT
    ) -> page.CaptureScreenshotReturnT:
        ...

    @overload
    async def capture_snapshot(
            self,
            *,
            format: Optional[str] = ...
    ) -> page.CaptureSnapshotReturnT:
        ...

    @overload
    async def capture_snapshot(
            self,
            params: page.CaptureSnapshotParamsT
    ) -> page.CaptureSnapshotReturnT:
        ...

    @overload
    async def clear_device_metrics_override(
            self
    ) -> None:
        ...

    @overload
    async def clear_device_orientation_override(
            self
    ) -> None:
        ...

    @overload
    async def clear_geolocation_override(
            self
    ) -> None:
        ...

    @overload
    async def create_isolated_world(
            self,
            *,
            frame_id: page.FrameId,
            world_name: Optional[str] = ...,
            grant_univeral_access: Optional[bool] = ...
    ) -> page.CreateIsolatedWorldReturnT:
        ...

    @overload
    async def create_isolated_world(
            self,
            params: page.CreateIsolatedWorldParamsT
    ) -> page.CreateIsolatedWorldReturnT:
        ...

    @overload
    async def delete_cookie(
            self,
            *,
            cookie_name: str,
            url: str
    ) -> None:
        ...

    @overload
    async def delete_cookie(
            self,
            params: page.DeleteCookieParamsT
    ) -> None:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def get_app_manifest(
            self
    ) -> page.GetAppManifestReturnT:
        ...

    @overload
    async def get_installability_errors(
            self
    ) -> page.GetInstallabilityErrorsReturnT:
        ...

    @overload
    async def get_manifest_icons(
            self
    ) -> page.GetManifestIconsReturnT:
        ...

    @overload
    async def get_app_id(
            self
    ) -> page.GetAppIdReturnT:
        ...

    @overload
    async def get_ad_script_id(
            self,
            *,
            frame_id: page.FrameId
    ) -> page.GetAdScriptIdReturnT:
        ...

    @overload
    async def get_ad_script_id(
            self,
            params: page.GetAdScriptIdParamsT
    ) -> page.GetAdScriptIdReturnT:
        ...

    @overload
    async def get_cookies(
            self
    ) -> page.GetCookiesReturnT:
        ...

    @overload
    async def get_frame_tree(
            self
    ) -> page.GetFrameTreeReturnT:
        ...

    @overload
    async def get_layout_metrics(
            self
    ) -> page.GetLayoutMetricsReturnT:
        ...

    @overload
    async def get_navigation_history(
            self
    ) -> page.GetNavigationHistoryReturnT:
        ...

    @overload
    async def reset_navigation_history(
            self
    ) -> None:
        ...

    @overload
    async def get_resource_content(
            self,
            *,
            frame_id: page.FrameId,
            url: str
    ) -> page.GetResourceContentReturnT:
        ...

    @overload
    async def get_resource_content(
            self,
            params: page.GetResourceContentParamsT
    ) -> page.GetResourceContentReturnT:
        ...

    @overload
    async def get_resource_tree(
            self
    ) -> page.GetResourceTreeReturnT:
        ...

    @overload
    async def handle_java_script_dialog(
            self,
            *,
            accept: bool,
            prompt_text: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def handle_java_script_dialog(
            self,
            params: page.HandleJavaScriptDialogParamsT
    ) -> None:
        ...

    @overload
    async def navigate(
            self,
            *,
            url: str,
            referrer: Optional[str] = ...,
            transition_type: Optional[page.TransitionType] = ...,
            frame_id: Optional[page.FrameId] = ...,
            referrer_policy: Optional[page.ReferrerPolicy] = ...
    ) -> page.NavigateReturnT:
        ...

    @overload
    async def navigate(
            self,
            params: page.NavigateParamsT
    ) -> page.NavigateReturnT:
        ...

    @overload
    async def navigate_to_history_entry(
            self,
            *,
            entry_id: int
    ) -> None:
        ...

    @overload
    async def navigate_to_history_entry(
            self,
            params: page.NavigateToHistoryEntryParamsT
    ) -> None:
        ...

    @overload
    async def print_to_pdf(
            self,
            *,
            landscape: Optional[bool] = ...,
            display_header_footer: Optional[bool] = ...,
            print_background: Optional[bool] = ...,
            scale: Optional[float] = ...,
            paper_width: Optional[float] = ...,
            paper_height: Optional[float] = ...,
            margin_top: Optional[float] = ...,
            margin_bottom: Optional[float] = ...,
            margin_left: Optional[float] = ...,
            margin_right: Optional[float] = ...,
            page_ranges: Optional[str] = ...,
            header_template: Optional[str] = ...,
            footer_template: Optional[str] = ...,
            prefer_css_page_size: Optional[bool] = ...,
            transfer_mode: Optional[str] = ...,
            generate_tagged_pdf: Optional[bool] = ...
    ) -> page.PrintToPDFReturnT:
        ...

    @overload
    async def print_to_pdf(
            self,
            params: page.PrintToPDFParamsT
    ) -> page.PrintToPDFReturnT:
        ...

    @overload
    async def reload(
            self,
            *,
            ignore_cache: Optional[bool] = ...,
            script_to_evaluate_on_load: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def reload(
            self,
            params: page.ReloadParamsT
    ) -> None:
        ...

    @overload
    async def remove_script_to_evaluate_on_load(
            self,
            *,
            identifier: page.ScriptIdentifier
    ) -> None:
        ...

    @overload
    async def remove_script_to_evaluate_on_load(
            self,
            params: page.RemoveScriptToEvaluateOnLoadParamsT
    ) -> None:
        ...

    @overload
    async def remove_script_to_evaluate_on_new_document(
            self,
            *,
            identifier: page.ScriptIdentifier
    ) -> None:
        ...

    @overload
    async def remove_script_to_evaluate_on_new_document(
            self,
            params: page.RemoveScriptToEvaluateOnNewDocumentParamsT
    ) -> None:
        ...

    @overload
    async def screencast_frame_ack(
            self,
            *,
            session_id: int
    ) -> None:
        ...

    @overload
    async def screencast_frame_ack(
            self,
            params: page.ScreencastFrameAckParamsT
    ) -> None:
        ...

    @overload
    async def search_in_resource(
            self,
            *,
            frame_id: page.FrameId,
            url: str,
            query: str,
            case_sensitive: Optional[bool] = ...,
            is_regex: Optional[bool] = ...
    ) -> page.SearchInResourceReturnT:
        ...

    @overload
    async def search_in_resource(
            self,
            params: page.SearchInResourceParamsT
    ) -> page.SearchInResourceReturnT:
        ...

    @overload
    async def set_ad_blocking_enabled(
            self,
            *,
            enabled: bool
    ) -> None:
        ...

    @overload
    async def set_ad_blocking_enabled(
            self,
            params: page.SetAdBlockingEnabledParamsT
    ) -> None:
        ...

    @overload
    async def set_bypass_csp(
            self,
            *,
            enabled: bool
    ) -> None:
        ...

    @overload
    async def set_bypass_csp(
            self,
            params: page.SetBypassCSPParamsT
    ) -> None:
        ...

    @overload
    async def get_permissions_policy_state(
            self,
            *,
            frame_id: page.FrameId
    ) -> page.GetPermissionsPolicyStateReturnT:
        ...

    @overload
    async def get_permissions_policy_state(
            self,
            params: page.GetPermissionsPolicyStateParamsT
    ) -> page.GetPermissionsPolicyStateReturnT:
        ...

    @overload
    async def get_origin_trials(
            self,
            *,
            frame_id: page.FrameId
    ) -> page.GetOriginTrialsReturnT:
        ...

    @overload
    async def get_origin_trials(
            self,
            params: page.GetOriginTrialsParamsT
    ) -> page.GetOriginTrialsReturnT:
        ...

    @overload
    async def set_device_metrics_override(
            self,
            *,
            width: int,
            height: int,
            device_scale_factor: float,
            mobile: bool,
            scale: Optional[float] = ...,
            screen_width: Optional[int] = ...,
            screen_height: Optional[int] = ...,
            position_x: Optional[int] = ...,
            position_y: Optional[int] = ...,
            dont_set_visible_size: Optional[bool] = ...,
            screen_orientation: Optional[emulation.ScreenOrientation] = ...,
            viewport: Optional[page.Viewport] = ...
    ) -> None:
        ...

    @overload
    async def set_device_metrics_override(
            self,
            params: page.SetDeviceMetricsOverrideParamsT
    ) -> None:
        ...

    @overload
    async def set_device_orientation_override(
            self,
            *,
            alpha: float,
            beta: float,
            gamma: float
    ) -> None:
        ...

    @overload
    async def set_device_orientation_override(
            self,
            params: page.SetDeviceOrientationOverrideParamsT
    ) -> None:
        ...

    @overload
    async def set_font_families(
            self,
            *,
            font_families: page.FontFamilies,
            for_scripts: Optional[list] = ...
    ) -> None:
        ...

    @overload
    async def set_font_families(
            self,
            params: page.SetFontFamiliesParamsT
    ) -> None:
        ...

    @overload
    async def set_font_sizes(
            self,
            *,
            font_sizes: page.FontSizes
    ) -> None:
        ...

    @overload
    async def set_font_sizes(
            self,
            params: page.SetFontSizesParamsT
    ) -> None:
        ...

    @overload
    async def set_document_content(
            self,
            *,
            frame_id: page.FrameId,
            html: str
    ) -> None:
        ...

    @overload
    async def set_document_content(
            self,
            params: page.SetDocumentContentParamsT
    ) -> None:
        ...

    @overload
    async def set_download_behavior(
            self,
            *,
            behavior: str,
            download_path: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def set_download_behavior(
            self,
            params: page.SetDownloadBehaviorParamsT
    ) -> None:
        ...

    @overload
    async def set_geolocation_override(
            self,
            *,
            latitude: Optional[float] = ...,
            longitude: Optional[float] = ...,
            accuracy: Optional[float] = ...
    ) -> None:
        ...

    @overload
    async def set_geolocation_override(
            self,
            params: page.SetGeolocationOverrideParamsT
    ) -> None:
        ...

    @overload
    async def set_lifecycle_events_enabled(
            self,
            *,
            enabled: bool
    ) -> None:
        ...

    @overload
    async def set_lifecycle_events_enabled(
            self,
            params: page.SetLifecycleEventsEnabledParamsT
    ) -> None:
        ...

    @overload
    async def set_touch_emulation_enabled(
            self,
            *,
            enabled: bool,
            configuration: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def set_touch_emulation_enabled(
            self,
            params: page.SetTouchEmulationEnabledParamsT
    ) -> None:
        ...

    @overload
    async def start_screencast(
            self,
            *,
            format: Optional[str] = ...,
            quality: Optional[int] = ...,
            max_width: Optional[int] = ...,
            max_height: Optional[int] = ...,
            every_nth_frame: Optional[int] = ...
    ) -> None:
        ...

    @overload
    async def start_screencast(
            self,
            params: page.StartScreencastParamsT
    ) -> None:
        ...

    @overload
    async def stop_loading(
            self
    ) -> None:
        ...

    @overload
    async def crash(
            self
    ) -> None:
        ...

    @overload
    async def close(
            self
    ) -> None:
        ...

    @overload
    async def set_web_lifecycle_state(
            self,
            *,
            state: str
    ) -> None:
        ...

    @overload
    async def set_web_lifecycle_state(
            self,
            params: page.SetWebLifecycleStateParamsT
    ) -> None:
        ...

    @overload
    async def stop_screencast(
            self
    ) -> None:
        ...

    @overload
    async def produce_compilation_cache(
            self,
            *,
            scripts: list
    ) -> None:
        ...

    @overload
    async def produce_compilation_cache(
            self,
            params: page.ProduceCompilationCacheParamsT
    ) -> None:
        ...

    @overload
    async def add_compilation_cache(
            self,
            *,
            url: str,
            data: str
    ) -> None:
        ...

    @overload
    async def add_compilation_cache(
            self,
            params: page.AddCompilationCacheParamsT
    ) -> None:
        ...

    @overload
    async def clear_compilation_cache(
            self
    ) -> None:
        ...

    @overload
    async def set_spc_transaction_mode(
            self,
            *,
            mode: page.AutoResponseMode
    ) -> None:
        ...

    @overload
    async def set_spc_transaction_mode(
            self,
            params: page.SetSPCTransactionModeParamsT
    ) -> None:
        ...

    @overload
    async def set_rph_registration_mode(
            self,
            *,
            mode: page.AutoResponseMode
    ) -> None:
        ...

    @overload
    async def set_rph_registration_mode(
            self,
            params: page.SetRPHRegistrationModeParamsT
    ) -> None:
        ...

    @overload
    async def generate_test_report(
            self,
            *,
            message: str,
            group: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def generate_test_report(
            self,
            params: page.GenerateTestReportParamsT
    ) -> None:
        ...

    @overload
    async def wait_for_debugger(
            self
    ) -> None:
        ...

    @overload
    async def set_intercept_file_chooser_dialog(
            self,
            *,
            enabled: bool
    ) -> None:
        ...

    @overload
    async def set_intercept_file_chooser_dialog(
            self,
            params: page.SetInterceptFileChooserDialogParamsT
    ) -> None:
        ...

    @overload
    async def set_prerendering_allowed(
            self,
            *,
            is_allowed: bool
    ) -> None:
        ...

    @overload
    async def set_prerendering_allowed(
            self,
            params: page.SetPrerenderingAllowedParamsT
    ) -> None:
        ...


@dataclass
class Performance:
    domains: 'Domains'

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self,
            *,
            time_domain: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def enable(
            self,
            params: performance.EnableParamsT
    ) -> None:
        ...

    @overload
    async def set_time_domain(
            self,
            *,
            time_domain: str
    ) -> None:
        ...

    @overload
    async def set_time_domain(
            self,
            params: performance.SetTimeDomainParamsT
    ) -> None:
        ...

    @overload
    async def get_metrics(
            self
    ) -> performance.GetMetricsReturnT:
        ...


@dataclass
class PerformanceTimeline:
    domains: 'Domains'

    @overload
    async def enable(
            self,
            *,
            event_types: list
    ) -> None:
        ...

    @overload
    async def enable(
            self,
            params: performance_timeline.EnableParamsT
    ) -> None:
        ...


@dataclass
class Security:
    domains: 'Domains'

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def set_ignore_certificate_errors(
            self,
            *,
            ignore: bool
    ) -> None:
        ...

    @overload
    async def set_ignore_certificate_errors(
            self,
            params: security.SetIgnoreCertificateErrorsParamsT
    ) -> None:
        ...

    @overload
    async def handle_certificate_error(
            self,
            *,
            event_id: int,
            action: security.CertificateErrorAction
    ) -> None:
        ...

    @overload
    async def handle_certificate_error(
            self,
            params: security.HandleCertificateErrorParamsT
    ) -> None:
        ...

    @overload
    async def set_override_certificate_errors(
            self,
            *,
            override: bool
    ) -> None:
        ...

    @overload
    async def set_override_certificate_errors(
            self,
            params: security.SetOverrideCertificateErrorsParamsT
    ) -> None:
        ...


@dataclass
class ServiceWorker:
    domains: 'Domains'

    @overload
    async def deliver_push_message(
            self,
            *,
            origin: str,
            registration_id: service_worker.RegistrationID,
            data: str
    ) -> None:
        ...

    @overload
    async def deliver_push_message(
            self,
            params: service_worker.DeliverPushMessageParamsT
    ) -> None:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def dispatch_sync_event(
            self,
            *,
            origin: str,
            registration_id: service_worker.RegistrationID,
            tag: str,
            last_chance: bool
    ) -> None:
        ...

    @overload
    async def dispatch_sync_event(
            self,
            params: service_worker.DispatchSyncEventParamsT
    ) -> None:
        ...

    @overload
    async def dispatch_periodic_sync_event(
            self,
            *,
            origin: str,
            registration_id: service_worker.RegistrationID,
            tag: str
    ) -> None:
        ...

    @overload
    async def dispatch_periodic_sync_event(
            self,
            params: service_worker.DispatchPeriodicSyncEventParamsT
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def inspect_worker(
            self,
            *,
            version_id: str
    ) -> None:
        ...

    @overload
    async def inspect_worker(
            self,
            params: service_worker.InspectWorkerParamsT
    ) -> None:
        ...

    @overload
    async def set_force_update_on_page_load(
            self,
            *,
            force_update_on_page_load: bool
    ) -> None:
        ...

    @overload
    async def set_force_update_on_page_load(
            self,
            params: service_worker.SetForceUpdateOnPageLoadParamsT
    ) -> None:
        ...

    @overload
    async def skip_waiting(
            self,
            *,
            scope_url: str
    ) -> None:
        ...

    @overload
    async def skip_waiting(
            self,
            params: service_worker.SkipWaitingParamsT
    ) -> None:
        ...

    @overload
    async def start_worker(
            self,
            *,
            scope_url: str
    ) -> None:
        ...

    @overload
    async def start_worker(
            self,
            params: service_worker.StartWorkerParamsT
    ) -> None:
        ...

    @overload
    async def stop_all_workers(
            self
    ) -> None:
        ...

    @overload
    async def stop_worker(
            self,
            *,
            version_id: str
    ) -> None:
        ...

    @overload
    async def stop_worker(
            self,
            params: service_worker.StopWorkerParamsT
    ) -> None:
        ...

    @overload
    async def unregister(
            self,
            *,
            scope_url: str
    ) -> None:
        ...

    @overload
    async def unregister(
            self,
            params: service_worker.UnregisterParamsT
    ) -> None:
        ...

    @overload
    async def update_registration(
            self,
            *,
            scope_url: str
    ) -> None:
        ...

    @overload
    async def update_registration(
            self,
            params: service_worker.UpdateRegistrationParamsT
    ) -> None:
        ...


@dataclass
class Storage:
    domains: 'Domains'

    @overload
    async def get_storage_key_for_frame(
            self,
            *,
            frame_id: page.FrameId
    ) -> storage.GetStorageKeyForFrameReturnT:
        ...

    @overload
    async def get_storage_key_for_frame(
            self,
            params: storage.GetStorageKeyForFrameParamsT
    ) -> storage.GetStorageKeyForFrameReturnT:
        ...

    @overload
    async def clear_data_for_origin(
            self,
            *,
            origin: str,
            storage_types: str
    ) -> None:
        ...

    @overload
    async def clear_data_for_origin(
            self,
            params: storage.ClearDataForOriginParamsT
    ) -> None:
        ...

    @overload
    async def clear_data_for_storage_key(
            self,
            *,
            storage_key: str,
            storage_types: str
    ) -> None:
        ...

    @overload
    async def clear_data_for_storage_key(
            self,
            params: storage.ClearDataForStorageKeyParamsT
    ) -> None:
        ...

    @overload
    async def get_cookies(
            self,
            *,
            browser_context_id: Optional[browser.BrowserContextID] = ...
    ) -> storage.GetCookiesReturnT:
        ...

    @overload
    async def get_cookies(
            self,
            params: storage.GetCookiesParamsT
    ) -> storage.GetCookiesReturnT:
        ...

    @overload
    async def set_cookies(
            self,
            *,
            cookies: list,
            browser_context_id: Optional[browser.BrowserContextID] = ...
    ) -> None:
        ...

    @overload
    async def set_cookies(
            self,
            params: storage.SetCookiesParamsT
    ) -> None:
        ...

    @overload
    async def clear_cookies(
            self,
            *,
            browser_context_id: Optional[browser.BrowserContextID] = ...
    ) -> None:
        ...

    @overload
    async def clear_cookies(
            self,
            params: storage.ClearCookiesParamsT
    ) -> None:
        ...

    @overload
    async def get_usage_and_quota(
            self,
            *,
            origin: str
    ) -> storage.GetUsageAndQuotaReturnT:
        ...

    @overload
    async def get_usage_and_quota(
            self,
            params: storage.GetUsageAndQuotaParamsT
    ) -> storage.GetUsageAndQuotaReturnT:
        ...

    @overload
    async def override_quota_for_origin(
            self,
            *,
            origin: str,
            quota_size: Optional[float] = ...
    ) -> None:
        ...

    @overload
    async def override_quota_for_origin(
            self,
            params: storage.OverrideQuotaForOriginParamsT
    ) -> None:
        ...

    @overload
    async def track_cache_storage_for_origin(
            self,
            *,
            origin: str
    ) -> None:
        ...

    @overload
    async def track_cache_storage_for_origin(
            self,
            params: storage.TrackCacheStorageForOriginParamsT
    ) -> None:
        ...

    @overload
    async def track_cache_storage_for_storage_key(
            self,
            *,
            storage_key: str
    ) -> None:
        ...

    @overload
    async def track_cache_storage_for_storage_key(
            self,
            params: storage.TrackCacheStorageForStorageKeyParamsT
    ) -> None:
        ...

    @overload
    async def track_indexed_db_for_origin(
            self,
            *,
            origin: str
    ) -> None:
        ...

    @overload
    async def track_indexed_db_for_origin(
            self,
            params: storage.TrackIndexedDBForOriginParamsT
    ) -> None:
        ...

    @overload
    async def track_indexed_db_for_storage_key(
            self,
            *,
            storage_key: str
    ) -> None:
        ...

    @overload
    async def track_indexed_db_for_storage_key(
            self,
            params: storage.TrackIndexedDBForStorageKeyParamsT
    ) -> None:
        ...

    @overload
    async def untrack_cache_storage_for_origin(
            self,
            *,
            origin: str
    ) -> None:
        ...

    @overload
    async def untrack_cache_storage_for_origin(
            self,
            params: storage.UntrackCacheStorageForOriginParamsT
    ) -> None:
        ...

    @overload
    async def untrack_cache_storage_for_storage_key(
            self,
            *,
            storage_key: str
    ) -> None:
        ...

    @overload
    async def untrack_cache_storage_for_storage_key(
            self,
            params: storage.UntrackCacheStorageForStorageKeyParamsT
    ) -> None:
        ...

    @overload
    async def untrack_indexed_db_for_origin(
            self,
            *,
            origin: str
    ) -> None:
        ...

    @overload
    async def untrack_indexed_db_for_origin(
            self,
            params: storage.UntrackIndexedDBForOriginParamsT
    ) -> None:
        ...

    @overload
    async def untrack_indexed_db_for_storage_key(
            self,
            *,
            storage_key: str
    ) -> None:
        ...

    @overload
    async def untrack_indexed_db_for_storage_key(
            self,
            params: storage.UntrackIndexedDBForStorageKeyParamsT
    ) -> None:
        ...

    @overload
    async def get_trust_tokens(
            self
    ) -> storage.GetTrustTokensReturnT:
        ...

    @overload
    async def clear_trust_tokens(
            self,
            *,
            issuer_origin: str
    ) -> storage.ClearTrustTokensReturnT:
        ...

    @overload
    async def clear_trust_tokens(
            self,
            params: storage.ClearTrustTokensParamsT
    ) -> storage.ClearTrustTokensReturnT:
        ...

    @overload
    async def get_interest_group_details(
            self,
            *,
            owner_origin: str,
            name: str
    ) -> storage.GetInterestGroupDetailsReturnT:
        ...

    @overload
    async def get_interest_group_details(
            self,
            params: storage.GetInterestGroupDetailsParamsT
    ) -> storage.GetInterestGroupDetailsReturnT:
        ...

    @overload
    async def set_interest_group_tracking(
            self,
            *,
            enable: bool
    ) -> None:
        ...

    @overload
    async def set_interest_group_tracking(
            self,
            params: storage.SetInterestGroupTrackingParamsT
    ) -> None:
        ...

    @overload
    async def get_shared_storage_metadata(
            self,
            *,
            owner_origin: str
    ) -> storage.GetSharedStorageMetadataReturnT:
        ...

    @overload
    async def get_shared_storage_metadata(
            self,
            params: storage.GetSharedStorageMetadataParamsT
    ) -> storage.GetSharedStorageMetadataReturnT:
        ...

    @overload
    async def get_shared_storage_entries(
            self,
            *,
            owner_origin: str
    ) -> storage.GetSharedStorageEntriesReturnT:
        ...

    @overload
    async def get_shared_storage_entries(
            self,
            params: storage.GetSharedStorageEntriesParamsT
    ) -> storage.GetSharedStorageEntriesReturnT:
        ...

    @overload
    async def set_shared_storage_entry(
            self,
            *,
            owner_origin: str,
            key: str,
            value: str,
            ignore_if_present: Optional[bool] = ...
    ) -> None:
        ...

    @overload
    async def set_shared_storage_entry(
            self,
            params: storage.SetSharedStorageEntryParamsT
    ) -> None:
        ...

    @overload
    async def delete_shared_storage_entry(
            self,
            *,
            owner_origin: str,
            key: str
    ) -> None:
        ...

    @overload
    async def delete_shared_storage_entry(
            self,
            params: storage.DeleteSharedStorageEntryParamsT
    ) -> None:
        ...

    @overload
    async def clear_shared_storage_entries(
            self,
            *,
            owner_origin: str
    ) -> None:
        ...

    @overload
    async def clear_shared_storage_entries(
            self,
            params: storage.ClearSharedStorageEntriesParamsT
    ) -> None:
        ...

    @overload
    async def reset_shared_storage_budget(
            self,
            *,
            owner_origin: str
    ) -> None:
        ...

    @overload
    async def reset_shared_storage_budget(
            self,
            params: storage.ResetSharedStorageBudgetParamsT
    ) -> None:
        ...

    @overload
    async def set_shared_storage_tracking(
            self,
            *,
            enable: bool
    ) -> None:
        ...

    @overload
    async def set_shared_storage_tracking(
            self,
            params: storage.SetSharedStorageTrackingParamsT
    ) -> None:
        ...

    @overload
    async def set_storage_bucket_tracking(
            self,
            *,
            storage_key: str,
            enable: bool
    ) -> None:
        ...

    @overload
    async def set_storage_bucket_tracking(
            self,
            params: storage.SetStorageBucketTrackingParamsT
    ) -> None:
        ...

    @overload
    async def delete_storage_bucket(
            self,
            *,
            bucket: storage.StorageBucket
    ) -> None:
        ...

    @overload
    async def delete_storage_bucket(
            self,
            params: storage.DeleteStorageBucketParamsT
    ) -> None:
        ...

    @overload
    async def run_bounce_tracking_mitigations(
            self
    ) -> storage.RunBounceTrackingMitigationsReturnT:
        ...

    @overload
    async def set_attribution_reporting_local_testing_mode(
            self,
            *,
            enabled: bool
    ) -> None:
        ...

    @overload
    async def set_attribution_reporting_local_testing_mode(
            self,
            params: storage.SetAttributionReportingLocalTestingModeParamsT
    ) -> None:
        ...

    @overload
    async def set_attribution_reporting_tracking(
            self,
            *,
            enable: bool
    ) -> None:
        ...

    @overload
    async def set_attribution_reporting_tracking(
            self,
            params: storage.SetAttributionReportingTrackingParamsT
    ) -> None:
        ...


@dataclass
class SystemInfo:
    domains: 'Domains'

    @overload
    async def get_info(
            self
    ) -> system_info.GetInfoReturnT:
        ...

    @overload
    async def get_feature_state(
            self,
            *,
            feature_state: str
    ) -> system_info.GetFeatureStateReturnT:
        ...

    @overload
    async def get_feature_state(
            self,
            params: system_info.GetFeatureStateParamsT
    ) -> system_info.GetFeatureStateReturnT:
        ...

    @overload
    async def get_process_info(
            self
    ) -> system_info.GetProcessInfoReturnT:
        ...


@dataclass
class Target:
    domains: 'Domains'

    @overload
    async def activate_target(
            self,
            *,
            target_id: target.TargetID
    ) -> None:
        ...

    @overload
    async def activate_target(
            self,
            params: target.ActivateTargetParamsT
    ) -> None:
        ...

    @overload
    async def attach_to_target(
            self,
            *,
            target_id: target.TargetID,
            flatten: Optional[bool] = ...
    ) -> target.AttachToTargetReturnT:
        ...

    @overload
    async def attach_to_target(
            self,
            params: target.AttachToTargetParamsT
    ) -> target.AttachToTargetReturnT:
        ...

    @overload
    async def attach_to_browser_target(
            self
    ) -> target.AttachToBrowserTargetReturnT:
        ...

    @overload
    async def close_target(
            self,
            *,
            target_id: target.TargetID
    ) -> target.CloseTargetReturnT:
        ...

    @overload
    async def close_target(
            self,
            params: target.CloseTargetParamsT
    ) -> target.CloseTargetReturnT:
        ...

    @overload
    async def expose_dev_tools_protocol(
            self,
            *,
            target_id: target.TargetID,
            binding_name: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def expose_dev_tools_protocol(
            self,
            params: target.ExposeDevToolsProtocolParamsT
    ) -> None:
        ...

    @overload
    async def create_browser_context(
            self,
            *,
            dispose_on_detach: Optional[bool] = ...,
            proxy_server: Optional[str] = ...,
            proxy_bypass_list: Optional[str] = ...,
            origins_with_universal_network_access: Optional[list] = ...
    ) -> target.CreateBrowserContextReturnT:
        ...

    @overload
    async def create_browser_context(
            self,
            params: target.CreateBrowserContextParamsT
    ) -> target.CreateBrowserContextReturnT:
        ...

    @overload
    async def get_browser_contexts(
            self
    ) -> target.GetBrowserContextsReturnT:
        ...

    @overload
    async def create_target(
            self,
            *,
            url: str,
            width: Optional[int] = ...,
            height: Optional[int] = ...,
            browser_context_id: Optional[browser.BrowserContextID] = ...,
            enable_begin_frame_control: Optional[bool] = ...,
            new_window: Optional[bool] = ...,
            background: Optional[bool] = ...,
            for_tab: Optional[bool] = ...
    ) -> target.CreateTargetReturnT:
        ...

    @overload
    async def create_target(
            self,
            params: target.CreateTargetParamsT
    ) -> target.CreateTargetReturnT:
        ...

    @overload
    async def detach_from_target(
            self,
            *,
            session_id: Optional[target.SessionID] = ...,
            target_id: Optional[target.TargetID] = ...
    ) -> None:
        ...

    @overload
    async def detach_from_target(
            self,
            params: target.DetachFromTargetParamsT
    ) -> None:
        ...

    @overload
    async def dispose_browser_context(
            self,
            *,
            browser_context_id: browser.BrowserContextID
    ) -> None:
        ...

    @overload
    async def dispose_browser_context(
            self,
            params: target.DisposeBrowserContextParamsT
    ) -> None:
        ...

    @overload
    async def get_target_info(
            self,
            *,
            target_id: Optional[target.TargetID] = ...
    ) -> target.GetTargetInfoReturnT:
        ...

    @overload
    async def get_target_info(
            self,
            params: target.GetTargetInfoParamsT
    ) -> target.GetTargetInfoReturnT:
        ...

    @overload
    async def get_targets(
            self,
            *,
            filter: Optional[target.TargetFilter] = ...
    ) -> target.GetTargetsReturnT:
        ...

    @overload
    async def get_targets(
            self,
            params: target.GetTargetsParamsT
    ) -> target.GetTargetsReturnT:
        ...

    @overload
    async def send_message_to_target(
            self,
            *,
            message: str,
            session_id: Optional[target.SessionID] = ...,
            target_id: Optional[target.TargetID] = ...
    ) -> None:
        ...

    @overload
    async def send_message_to_target(
            self,
            params: target.SendMessageToTargetParamsT
    ) -> None:
        ...

    @overload
    async def set_auto_attach(
            self,
            *,
            auto_attach: bool,
            wait_for_debugger_on_start: bool,
            flatten: Optional[bool] = ...,
            filter: Optional[target.TargetFilter] = ...
    ) -> None:
        ...

    @overload
    async def set_auto_attach(
            self,
            params: target.SetAutoAttachParamsT
    ) -> None:
        ...

    @overload
    async def auto_attach_related(
            self,
            *,
            target_id: target.TargetID,
            wait_for_debugger_on_start: bool,
            filter: Optional[target.TargetFilter] = ...
    ) -> None:
        ...

    @overload
    async def auto_attach_related(
            self,
            params: target.AutoAttachRelatedParamsT
    ) -> None:
        ...

    @overload
    async def set_discover_targets(
            self,
            *,
            discover: bool,
            filter: Optional[target.TargetFilter] = ...
    ) -> None:
        ...

    @overload
    async def set_discover_targets(
            self,
            params: target.SetDiscoverTargetsParamsT
    ) -> None:
        ...

    @overload
    async def set_remote_locations(
            self,
            *,
            locations: list
    ) -> None:
        ...

    @overload
    async def set_remote_locations(
            self,
            params: target.SetRemoteLocationsParamsT
    ) -> None:
        ...


@dataclass
class Tethering:
    domains: 'Domains'

    @overload
    async def bind(
            self,
            *,
            port: int
    ) -> None:
        ...

    @overload
    async def bind(
            self,
            params: tethering.BindParamsT
    ) -> None:
        ...

    @overload
    async def unbind(
            self,
            *,
            port: int
    ) -> None:
        ...

    @overload
    async def unbind(
            self,
            params: tethering.UnbindParamsT
    ) -> None:
        ...


@dataclass
class Tracing:
    domains: 'Domains'

    @overload
    async def end(
            self
    ) -> None:
        ...

    @overload
    async def get_categories(
            self
    ) -> tracing.GetCategoriesReturnT:
        ...

    @overload
    async def record_clock_sync_marker(
            self,
            *,
            sync_id: str
    ) -> None:
        ...

    @overload
    async def record_clock_sync_marker(
            self,
            params: tracing.RecordClockSyncMarkerParamsT
    ) -> None:
        ...

    @overload
    async def request_memory_dump(
            self,
            *,
            deterministic: Optional[bool] = ...,
            level_of_detail: Optional[tracing.MemoryDumpLevelOfDetail] = ...
    ) -> tracing.RequestMemoryDumpReturnT:
        ...

    @overload
    async def request_memory_dump(
            self,
            params: tracing.RequestMemoryDumpParamsT
    ) -> tracing.RequestMemoryDumpReturnT:
        ...

    @overload
    async def start(
            self,
            *,
            categories: Optional[str] = ...,
            options: Optional[str] = ...,
            buffer_usage_reporting_interval: Optional[float] = ...,
            transfer_mode: Optional[str] = ...,
            stream_format: Optional[tracing.StreamFormat] = ...,
            stream_compression: Optional[tracing.StreamCompression] = ...,
            trace_config: Optional[tracing.TraceConfig] = ...,
            perfetto_config: Optional[str] = ...,
            tracing_backend: Optional[tracing.TracingBackend] = ...
    ) -> None:
        ...

    @overload
    async def start(
            self,
            params: tracing.StartParamsT
    ) -> None:
        ...


@dataclass
class Fetch:
    domains: 'Domains'

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self,
            *,
            patterns: Optional[list] = ...,
            handle_auth_requests: Optional[bool] = ...
    ) -> None:
        ...

    @overload
    async def enable(
            self,
            params: fetch.EnableParamsT
    ) -> None:
        ...

    @overload
    async def fail_request(
            self,
            *,
            request_id: fetch.RequestId,
            error_reason: network.ErrorReason
    ) -> None:
        ...

    @overload
    async def fail_request(
            self,
            params: fetch.FailRequestParamsT
    ) -> None:
        ...

    @overload
    async def fulfill_request(
            self,
            *,
            request_id: fetch.RequestId,
            response_code: int,
            response_headers: Optional[list] = ...,
            binary_response_headers: Optional[str] = ...,
            body: Optional[str] = ...,
            response_phrase: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def fulfill_request(
            self,
            params: fetch.FulfillRequestParamsT
    ) -> None:
        ...

    @overload
    async def continue_request(
            self,
            *,
            request_id: fetch.RequestId,
            url: Optional[str] = ...,
            method: Optional[str] = ...,
            post_data: Optional[str] = ...,
            headers: Optional[list] = ...,
            intercept_response: Optional[bool] = ...
    ) -> None:
        ...

    @overload
    async def continue_request(
            self,
            params: fetch.ContinueRequestParamsT
    ) -> None:
        ...

    @overload
    async def continue_with_auth(
            self,
            *,
            request_id: fetch.RequestId,
            auth_challenge_response: fetch.AuthChallengeResponse
    ) -> None:
        ...

    @overload
    async def continue_with_auth(
            self,
            params: fetch.ContinueWithAuthParamsT
    ) -> None:
        ...

    @overload
    async def continue_response(
            self,
            *,
            request_id: fetch.RequestId,
            response_code: Optional[int] = ...,
            response_phrase: Optional[str] = ...,
            response_headers: Optional[list] = ...,
            binary_response_headers: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def continue_response(
            self,
            params: fetch.ContinueResponseParamsT
    ) -> None:
        ...

    @overload
    async def get_response_body(
            self,
            *,
            request_id: fetch.RequestId
    ) -> fetch.GetResponseBodyReturnT:
        ...

    @overload
    async def get_response_body(
            self,
            params: fetch.GetResponseBodyParamsT
    ) -> fetch.GetResponseBodyReturnT:
        ...

    @overload
    async def take_response_body_as_stream(
            self,
            *,
            request_id: fetch.RequestId
    ) -> fetch.TakeResponseBodyAsStreamReturnT:
        ...

    @overload
    async def take_response_body_as_stream(
            self,
            params: fetch.TakeResponseBodyAsStreamParamsT
    ) -> fetch.TakeResponseBodyAsStreamReturnT:
        ...


@dataclass
class WebAudio:
    domains: 'Domains'

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def get_realtime_data(
            self,
            *,
            context_id: web_audio.GraphObjectId
    ) -> web_audio.GetRealtimeDataReturnT:
        ...

    @overload
    async def get_realtime_data(
            self,
            params: web_audio.GetRealtimeDataParamsT
    ) -> web_audio.GetRealtimeDataReturnT:
        ...


@dataclass
class WebAuthn:
    domains: 'Domains'

    @overload
    async def enable(
            self,
            *,
            enable_ui: Optional[bool] = ...
    ) -> None:
        ...

    @overload
    async def enable(
            self,
            params: web_authn.EnableParamsT
    ) -> None:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def add_virtual_authenticator(
            self,
            *,
            options: web_authn.VirtualAuthenticatorOptions
    ) -> web_authn.AddVirtualAuthenticatorReturnT:
        ...

    @overload
    async def add_virtual_authenticator(
            self,
            params: web_authn.AddVirtualAuthenticatorParamsT
    ) -> web_authn.AddVirtualAuthenticatorReturnT:
        ...

    @overload
    async def set_response_override_bits(
            self,
            *,
            authenticator_id: web_authn.AuthenticatorId,
            is_bogus_signature: Optional[bool] = ...,
            is_bad_uv: Optional[bool] = ...,
            is_bad_up: Optional[bool] = ...
    ) -> None:
        ...

    @overload
    async def set_response_override_bits(
            self,
            params: web_authn.SetResponseOverrideBitsParamsT
    ) -> None:
        ...

    @overload
    async def remove_virtual_authenticator(
            self,
            *,
            authenticator_id: web_authn.AuthenticatorId
    ) -> None:
        ...

    @overload
    async def remove_virtual_authenticator(
            self,
            params: web_authn.RemoveVirtualAuthenticatorParamsT
    ) -> None:
        ...

    @overload
    async def add_credential(
            self,
            *,
            authenticator_id: web_authn.AuthenticatorId,
            credential: web_authn.Credential
    ) -> None:
        ...

    @overload
    async def add_credential(
            self,
            params: web_authn.AddCredentialParamsT
    ) -> None:
        ...

    @overload
    async def get_credential(
            self,
            *,
            authenticator_id: web_authn.AuthenticatorId,
            credential_id: str
    ) -> web_authn.GetCredentialReturnT:
        ...

    @overload
    async def get_credential(
            self,
            params: web_authn.GetCredentialParamsT
    ) -> web_authn.GetCredentialReturnT:
        ...

    @overload
    async def get_credentials(
            self,
            *,
            authenticator_id: web_authn.AuthenticatorId
    ) -> web_authn.GetCredentialsReturnT:
        ...

    @overload
    async def get_credentials(
            self,
            params: web_authn.GetCredentialsParamsT
    ) -> web_authn.GetCredentialsReturnT:
        ...

    @overload
    async def remove_credential(
            self,
            *,
            authenticator_id: web_authn.AuthenticatorId,
            credential_id: str
    ) -> None:
        ...

    @overload
    async def remove_credential(
            self,
            params: web_authn.RemoveCredentialParamsT
    ) -> None:
        ...

    @overload
    async def clear_credentials(
            self,
            *,
            authenticator_id: web_authn.AuthenticatorId
    ) -> None:
        ...

    @overload
    async def clear_credentials(
            self,
            params: web_authn.ClearCredentialsParamsT
    ) -> None:
        ...

    @overload
    async def set_user_verified(
            self,
            *,
            authenticator_id: web_authn.AuthenticatorId,
            is_user_verified: bool
    ) -> None:
        ...

    @overload
    async def set_user_verified(
            self,
            params: web_authn.SetUserVerifiedParamsT
    ) -> None:
        ...

    @overload
    async def set_automatic_presence_simulation(
            self,
            *,
            authenticator_id: web_authn.AuthenticatorId,
            enabled: bool
    ) -> None:
        ...

    @overload
    async def set_automatic_presence_simulation(
            self,
            params: web_authn.SetAutomaticPresenceSimulationParamsT
    ) -> None:
        ...


@dataclass
class Media:
    domains: 'Domains'

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...


@dataclass
class DeviceAccess:
    domains: 'Domains'

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def select_prompt(
            self,
            *,
            id: device_access.RequestId,
            device_id: device_access.DeviceId
    ) -> None:
        ...

    @overload
    async def select_prompt(
            self,
            params: device_access.SelectPromptParamsT
    ) -> None:
        ...

    @overload
    async def cancel_prompt(
            self,
            *,
            id: device_access.RequestId
    ) -> None:
        ...

    @overload
    async def cancel_prompt(
            self,
            params: device_access.CancelPromptParamsT
    ) -> None:
        ...


@dataclass
class Preload:
    domains: 'Domains'

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...


@dataclass
class FedCm:
    domains: 'Domains'

    @overload
    async def enable(
            self,
            *,
            disable_rejection_delay: Optional[bool] = ...
    ) -> None:
        ...

    @overload
    async def enable(
            self,
            params: fed_cm.EnableParamsT
    ) -> None:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def select_account(
            self,
            *,
            dialog_id: str,
            account_index: int
    ) -> None:
        ...

    @overload
    async def select_account(
            self,
            params: fed_cm.SelectAccountParamsT
    ) -> None:
        ...

    @overload
    async def confirm_idp_signin(
            self,
            *,
            dialog_id: str
    ) -> None:
        ...

    @overload
    async def confirm_idp_signin(
            self,
            params: fed_cm.ConfirmIdpSigninParamsT
    ) -> None:
        ...

    @overload
    async def dismiss_dialog(
            self,
            *,
            dialog_id: str,
            trigger_cooldown: Optional[bool] = ...
    ) -> None:
        ...

    @overload
    async def dismiss_dialog(
            self,
            params: fed_cm.DismissDialogParamsT
    ) -> None:
        ...

    @overload
    async def reset_cooldown(
            self
    ) -> None:
        ...


@dataclass
class Console:
    domains: 'Domains'

    @overload
    async def clear_messages(
            self
    ) -> None:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...


@dataclass
class Debugger:
    domains: 'Domains'

    @overload
    async def continue_to_location(
            self,
            *,
            location: debugger.Location,
            target_call_frames: Optional[str] = ...
    ) -> None:
        ...

    @overload
    async def continue_to_location(
            self,
            params: debugger.ContinueToLocationParamsT
    ) -> None:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self,
            *,
            max_scripts_cache_size: Optional[float] = ...
    ) -> debugger.EnableReturnT:
        ...

    @overload
    async def enable(
            self,
            params: debugger.EnableParamsT
    ) -> debugger.EnableReturnT:
        ...

    @overload
    async def evaluate_on_call_frame(
            self,
            *,
            call_frame_id: debugger.CallFrameId,
            expression: str,
            object_group: Optional[str] = ...,
            include_command_line_api: Optional[bool] = ...,
            silent: Optional[bool] = ...,
            return_by_value: Optional[bool] = ...,
            generate_preview: Optional[bool] = ...,
            throw_on_side_effect: Optional[bool] = ...,
            timeout: Optional[runtime.TimeDelta] = ...
    ) -> debugger.EvaluateOnCallFrameReturnT:
        ...

    @overload
    async def evaluate_on_call_frame(
            self,
            params: debugger.EvaluateOnCallFrameParamsT
    ) -> debugger.EvaluateOnCallFrameReturnT:
        ...

    @overload
    async def get_possible_breakpoints(
            self,
            *,
            start: debugger.Location,
            end: Optional[debugger.Location] = ...,
            restrict_to_function: Optional[bool] = ...
    ) -> debugger.GetPossibleBreakpointsReturnT:
        ...

    @overload
    async def get_possible_breakpoints(
            self,
            params: debugger.GetPossibleBreakpointsParamsT
    ) -> debugger.GetPossibleBreakpointsReturnT:
        ...

    @overload
    async def get_script_source(
            self,
            *,
            script_id: runtime.ScriptId
    ) -> debugger.GetScriptSourceReturnT:
        ...

    @overload
    async def get_script_source(
            self,
            params: debugger.GetScriptSourceParamsT
    ) -> debugger.GetScriptSourceReturnT:
        ...

    @overload
    async def get_stack_trace(
            self,
            *,
            stack_trace_id: runtime.StackTraceId
    ) -> debugger.GetStackTraceReturnT:
        ...

    @overload
    async def get_stack_trace(
            self,
            params: debugger.GetStackTraceParamsT
    ) -> debugger.GetStackTraceReturnT:
        ...

    @overload
    async def pause(
            self
    ) -> None:
        ...

    @overload
    async def pause_on_async_call(
            self,
            *,
            parent_stack_trace_id: runtime.StackTraceId
    ) -> None:
        ...

    @overload
    async def pause_on_async_call(
            self,
            params: debugger.PauseOnAsyncCallParamsT
    ) -> None:
        ...

    @overload
    async def remove_breakpoint(
            self,
            *,
            breakpoint_id: debugger.BreakpointId
    ) -> None:
        ...

    @overload
    async def remove_breakpoint(
            self,
            params: debugger.RemoveBreakpointParamsT
    ) -> None:
        ...

    @overload
    async def restart_frame(
            self,
            *,
            call_frame_id: debugger.CallFrameId
    ) -> debugger.RestartFrameReturnT:
        ...

    @overload
    async def restart_frame(
            self,
            params: debugger.RestartFrameParamsT
    ) -> debugger.RestartFrameReturnT:
        ...

    @overload
    async def resume(
            self
    ) -> None:
        ...

    @overload
    async def search_in_content(
            self,
            *,
            script_id: runtime.ScriptId,
            query: str,
            case_sensitive: Optional[bool] = ...,
            is_regex: Optional[bool] = ...
    ) -> debugger.SearchInContentReturnT:
        ...

    @overload
    async def search_in_content(
            self,
            params: debugger.SearchInContentParamsT
    ) -> debugger.SearchInContentReturnT:
        ...

    @overload
    async def set_async_call_stack_depth(
            self,
            *,
            max_depth: int
    ) -> None:
        ...

    @overload
    async def set_async_call_stack_depth(
            self,
            params: debugger.SetAsyncCallStackDepthParamsT
    ) -> None:
        ...

    @overload
    async def set_blackbox_patterns(
            self,
            *,
            patterns: list
    ) -> None:
        ...

    @overload
    async def set_blackbox_patterns(
            self,
            params: debugger.SetBlackboxPatternsParamsT
    ) -> None:
        ...

    @overload
    async def set_blackboxed_ranges(
            self,
            *,
            script_id: runtime.ScriptId,
            positions: list
    ) -> None:
        ...

    @overload
    async def set_blackboxed_ranges(
            self,
            params: debugger.SetBlackboxedRangesParamsT
    ) -> None:
        ...

    @overload
    async def set_breakpoint(
            self,
            *,
            location: debugger.Location,
            condition: Optional[str] = ...
    ) -> debugger.SetBreakpointReturnT:
        ...

    @overload
    async def set_breakpoint(
            self,
            params: debugger.SetBreakpointParamsT
    ) -> debugger.SetBreakpointReturnT:
        ...

    @overload
    async def set_instrumentation_breakpoint(
            self,
            *,
            instrumentation: str
    ) -> debugger.SetInstrumentationBreakpointReturnT:
        ...

    @overload
    async def set_instrumentation_breakpoint(
            self,
            params: debugger.SetInstrumentationBreakpointParamsT
    ) -> debugger.SetInstrumentationBreakpointReturnT:
        ...

    @overload
    async def set_breakpoint_by_url(
            self,
            *,
            line_number: int,
            url: Optional[str] = ...,
            url_regex: Optional[str] = ...,
            script_hash: Optional[str] = ...,
            column_number: Optional[int] = ...,
            condition: Optional[str] = ...
    ) -> debugger.SetBreakpointByUrlReturnT:
        ...

    @overload
    async def set_breakpoint_by_url(
            self,
            params: debugger.SetBreakpointByUrlParamsT
    ) -> debugger.SetBreakpointByUrlReturnT:
        ...

    @overload
    async def set_breakpoint_on_function_call(
            self,
            *,
            object_id: runtime.RemoteObjectId,
            condition: Optional[str] = ...
    ) -> debugger.SetBreakpointOnFunctionCallReturnT:
        ...

    @overload
    async def set_breakpoint_on_function_call(
            self,
            params: debugger.SetBreakpointOnFunctionCallParamsT
    ) -> debugger.SetBreakpointOnFunctionCallReturnT:
        ...

    @overload
    async def set_breakpoints_active(
            self,
            *,
            active: bool
    ) -> None:
        ...

    @overload
    async def set_breakpoints_active(
            self,
            params: debugger.SetBreakpointsActiveParamsT
    ) -> None:
        ...

    @overload
    async def set_pause_on_exceptions(
            self,
            *,
            state: str
    ) -> None:
        ...

    @overload
    async def set_pause_on_exceptions(
            self,
            params: debugger.SetPauseOnExceptionsParamsT
    ) -> None:
        ...

    @overload
    async def set_return_value(
            self,
            *,
            new_value: runtime.CallArgument
    ) -> None:
        ...

    @overload
    async def set_return_value(
            self,
            params: debugger.SetReturnValueParamsT
    ) -> None:
        ...

    @overload
    async def set_script_source(
            self,
            *,
            script_id: runtime.ScriptId,
            script_source: str,
            dry_run: Optional[bool] = ...
    ) -> debugger.SetScriptSourceReturnT:
        ...

    @overload
    async def set_script_source(
            self,
            params: debugger.SetScriptSourceParamsT
    ) -> debugger.SetScriptSourceReturnT:
        ...

    @overload
    async def set_skip_all_pauses(
            self,
            *,
            skip: bool
    ) -> None:
        ...

    @overload
    async def set_skip_all_pauses(
            self,
            params: debugger.SetSkipAllPausesParamsT
    ) -> None:
        ...

    @overload
    async def set_variable_value(
            self,
            *,
            scope_number: int,
            variable_name: str,
            new_value: runtime.CallArgument,
            call_frame_id: debugger.CallFrameId
    ) -> None:
        ...

    @overload
    async def set_variable_value(
            self,
            params: debugger.SetVariableValueParamsT
    ) -> None:
        ...

    @overload
    async def step_into(
            self,
            *,
            break_on_async_call: Optional[bool] = ...
    ) -> None:
        ...

    @overload
    async def step_into(
            self,
            params: debugger.StepIntoParamsT
    ) -> None:
        ...

    @overload
    async def step_out(
            self
    ) -> None:
        ...

    @overload
    async def step_over(
            self
    ) -> None:
        ...


@dataclass
class HeapProfiler:
    domains: 'Domains'

    @overload
    async def add_inspected_heap_object(
            self,
            *,
            heap_object_id: heap_profiler.HeapSnapshotObjectId
    ) -> None:
        ...

    @overload
    async def add_inspected_heap_object(
            self,
            params: heap_profiler.AddInspectedHeapObjectParamsT
    ) -> None:
        ...

    @overload
    async def collect_garbage(
            self
    ) -> None:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def get_heap_object_id(
            self,
            *,
            object_id: runtime.RemoteObjectId
    ) -> heap_profiler.GetHeapObjectIdReturnT:
        ...

    @overload
    async def get_heap_object_id(
            self,
            params: heap_profiler.GetHeapObjectIdParamsT
    ) -> heap_profiler.GetHeapObjectIdReturnT:
        ...

    @overload
    async def get_object_by_heap_object_id(
            self,
            *,
            object_id: heap_profiler.HeapSnapshotObjectId,
            object_group: Optional[str] = ...
    ) -> heap_profiler.GetObjectByHeapObjectIdReturnT:
        ...

    @overload
    async def get_object_by_heap_object_id(
            self,
            params: heap_profiler.GetObjectByHeapObjectIdParamsT
    ) -> heap_profiler.GetObjectByHeapObjectIdReturnT:
        ...

    @overload
    async def get_sampling_profile(
            self
    ) -> heap_profiler.GetSamplingProfileReturnT:
        ...

    @overload
    async def start_sampling(
            self,
            *,
            sampling_interval: Optional[float] = ...
    ) -> None:
        ...

    @overload
    async def start_sampling(
            self,
            params: heap_profiler.StartSamplingParamsT
    ) -> None:
        ...

    @overload
    async def start_tracking_heap_objects(
            self,
            *,
            track_allocations: Optional[bool] = ...
    ) -> None:
        ...

    @overload
    async def start_tracking_heap_objects(
            self,
            params: heap_profiler.StartTrackingHeapObjectsParamsT
    ) -> None:
        ...

    @overload
    async def stop_sampling(
            self
    ) -> heap_profiler.StopSamplingReturnT:
        ...

    @overload
    async def stop_tracking_heap_objects(
            self,
            *,
            report_progress: Optional[bool] = ...
    ) -> None:
        ...

    @overload
    async def stop_tracking_heap_objects(
            self,
            params: heap_profiler.StopTrackingHeapObjectsParamsT
    ) -> None:
        ...

    @overload
    async def take_heap_snapshot(
            self,
            *,
            report_progress: Optional[bool] = ...
    ) -> None:
        ...

    @overload
    async def take_heap_snapshot(
            self,
            params: heap_profiler.TakeHeapSnapshotParamsT
    ) -> None:
        ...


@dataclass
class Profiler:
    domains: 'Domains'

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def get_best_effort_coverage(
            self
    ) -> profiler.GetBestEffortCoverageReturnT:
        ...

    @overload
    async def set_sampling_interval(
            self,
            *,
            interval: int
    ) -> None:
        ...

    @overload
    async def set_sampling_interval(
            self,
            params: profiler.SetSamplingIntervalParamsT
    ) -> None:
        ...

    @overload
    async def start(
            self
    ) -> None:
        ...

    @overload
    async def start_precise_coverage(
            self,
            *,
            call_count: Optional[bool] = ...,
            detailed: Optional[bool] = ...
    ) -> None:
        ...

    @overload
    async def start_precise_coverage(
            self,
            params: profiler.StartPreciseCoverageParamsT
    ) -> None:
        ...

    @overload
    async def start_type_profile(
            self
    ) -> None:
        ...

    @overload
    async def stop(
            self
    ) -> profiler.StopReturnT:
        ...

    @overload
    async def stop_precise_coverage(
            self
    ) -> None:
        ...

    @overload
    async def stop_type_profile(
            self
    ) -> None:
        ...

    @overload
    async def take_precise_coverage(
            self
    ) -> profiler.TakePreciseCoverageReturnT:
        ...

    @overload
    async def take_type_profile(
            self
    ) -> profiler.TakeTypeProfileReturnT:
        ...


@dataclass
class Runtime:
    domains: 'Domains'

    @overload
    async def await_promise(
            self,
            *,
            promise_object_id: runtime.RemoteObjectId,
            return_by_value: Optional[bool] = ...,
            generate_preview: Optional[bool] = ...
    ) -> runtime.AwaitPromiseReturnT:
        ...

    @overload
    async def await_promise(
            self,
            params: runtime.AwaitPromiseParamsT
    ) -> runtime.AwaitPromiseReturnT:
        ...

    @overload
    async def call_function_on(
            self,
            *,
            function_declaration: str,
            object_id: Optional[runtime.RemoteObjectId] = ...,
            arguments: Optional[list] = ...,
            silent: Optional[bool] = ...,
            return_by_value: Optional[bool] = ...,
            generate_preview: Optional[bool] = ...,
            user_gesture: Optional[bool] = ...,
            await_promise: Optional[bool] = ...,
            execution_context_id: Optional[runtime.ExecutionContextId] = ...,
            object_group: Optional[str] = ...
    ) -> runtime.CallFunctionOnReturnT:
        ...

    @overload
    async def call_function_on(
            self,
            params: runtime.CallFunctionOnParamsT
    ) -> runtime.CallFunctionOnReturnT:
        ...

    @overload
    async def compile_script(
            self,
            *,
            expression: str,
            source_url: str,
            persist_script: bool,
            execution_context_id: Optional[runtime.ExecutionContextId] = ...
    ) -> runtime.CompileScriptReturnT:
        ...

    @overload
    async def compile_script(
            self,
            params: runtime.CompileScriptParamsT
    ) -> runtime.CompileScriptReturnT:
        ...

    @overload
    async def disable(
            self
    ) -> None:
        ...

    @overload
    async def discard_console_entries(
            self
    ) -> None:
        ...

    @overload
    async def enable(
            self
    ) -> None:
        ...

    @overload
    async def evaluate(
            self,
            *,
            expression: str,
            object_group: Optional[str] = ...,
            include_command_line_api: Optional[bool] = ...,
            silent: Optional[bool] = ...,
            context_id: Optional[runtime.ExecutionContextId] = ...,
            return_by_value: Optional[bool] = ...,
            generate_preview: Optional[bool] = ...,
            user_gesture: Optional[bool] = ...,
            await_promise: Optional[bool] = ...,
            throw_on_side_effect: Optional[bool] = ...,
            timeout: Optional[runtime.TimeDelta] = ...
    ) -> runtime.EvaluateReturnT:
        ...

    @overload
    async def evaluate(
            self,
            params: runtime.EvaluateParamsT
    ) -> runtime.EvaluateReturnT:
        ...

    @overload
    async def get_isolate_id(
            self
    ) -> runtime.GetIsolateIdReturnT:
        ...

    @overload
    async def get_heap_usage(
            self
    ) -> runtime.GetHeapUsageReturnT:
        ...

    @overload
    async def get_properties(
            self,
            *,
            object_id: runtime.RemoteObjectId,
            own_properties: Optional[bool] = ...,
            accessor_properties_only: Optional[bool] = ...,
            generate_preview: Optional[bool] = ...
    ) -> runtime.GetPropertiesReturnT:
        ...

    @overload
    async def get_properties(
            self,
            params: runtime.GetPropertiesParamsT
    ) -> runtime.GetPropertiesReturnT:
        ...

    @overload
    async def global_lexical_scope_names(
            self,
            *,
            execution_context_id: Optional[runtime.ExecutionContextId] = ...
    ) -> runtime.GlobalLexicalScopeNamesReturnT:
        ...

    @overload
    async def global_lexical_scope_names(
            self,
            params: runtime.GlobalLexicalScopeNamesParamsT
    ) -> runtime.GlobalLexicalScopeNamesReturnT:
        ...

    @overload
    async def query_objects(
            self,
            *,
            prototype_object_id: runtime.RemoteObjectId,
            object_group: Optional[str] = ...
    ) -> runtime.QueryObjectsReturnT:
        ...

    @overload
    async def query_objects(
            self,
            params: runtime.QueryObjectsParamsT
    ) -> runtime.QueryObjectsReturnT:
        ...

    @overload
    async def release_object(
            self,
            *,
            object_id: runtime.RemoteObjectId
    ) -> None:
        ...

    @overload
    async def release_object(
            self,
            params: runtime.ReleaseObjectParamsT
    ) -> None:
        ...

    @overload
    async def release_object_group(
            self,
            *,
            object_group: str
    ) -> None:
        ...

    @overload
    async def release_object_group(
            self,
            params: runtime.ReleaseObjectGroupParamsT
    ) -> None:
        ...

    @overload
    async def run_if_waiting_for_debugger(
            self
    ) -> None:
        ...

    @overload
    async def run_script(
            self,
            *,
            script_id: runtime.ScriptId,
            execution_context_id: Optional[runtime.ExecutionContextId] = ...,
            object_group: Optional[str] = ...,
            silent: Optional[bool] = ...,
            include_command_line_api: Optional[bool] = ...,
            return_by_value: Optional[bool] = ...,
            generate_preview: Optional[bool] = ...,
            await_promise: Optional[bool] = ...
    ) -> runtime.RunScriptReturnT:
        ...

    @overload
    async def run_script(
            self,
            params: runtime.RunScriptParamsT
    ) -> runtime.RunScriptReturnT:
        ...

    @overload
    async def set_async_call_stack_depth(
            self,
            *,
            max_depth: int
    ) -> None:
        ...

    @overload
    async def set_async_call_stack_depth(
            self,
            params: runtime.SetAsyncCallStackDepthParamsT
    ) -> None:
        ...

    @overload
    async def set_custom_object_formatter_enabled(
            self,
            *,
            enabled: bool
    ) -> None:
        ...

    @overload
    async def set_custom_object_formatter_enabled(
            self,
            params: runtime.SetCustomObjectFormatterEnabledParamsT
    ) -> None:
        ...

    @overload
    async def set_max_call_stack_size_to_capture(
            self,
            *,
            size: int
    ) -> None:
        ...

    @overload
    async def set_max_call_stack_size_to_capture(
            self,
            params: runtime.SetMaxCallStackSizeToCaptureParamsT
    ) -> None:
        ...

    @overload
    async def terminate_execution(
            self
    ) -> None:
        ...

    @overload
    async def add_binding(
            self,
            *,
            name: str,
            execution_context_id: Optional[runtime.ExecutionContextId] = ...
    ) -> None:
        ...

    @overload
    async def add_binding(
            self,
            params: runtime.AddBindingParamsT
    ) -> None:
        ...

    @overload
    async def remove_binding(
            self,
            *,
            name: str
    ) -> None:
        ...

    @overload
    async def remove_binding(
            self,
            params: runtime.RemoveBindingParamsT
    ) -> None:
        ...


@dataclass
class Schema:
    domains: 'Domains'

    @overload
    async def get_domains(
            self
    ) -> schema.GetDomainsReturnT:
        ...


@dataclass
class Domains:
    accessibility: Accessibility = field(
        init=False,
        repr=False
    )
    animation: Animation = field(
        init=False,
        repr=False
    )
    audits: Audits = field(
        init=False,
        repr=False
    )
    autofill: Autofill = field(
        init=False,
        repr=False
    )
    background_service: BackgroundService = field(
        init=False,
        repr=False
    )
    browser: Browser = field(
        init=False,
        repr=False
    )
    css: CSS = field(
        init=False,
        repr=False
    )
    cache_storage: CacheStorage = field(
        init=False,
        repr=False
    )
    cast: Cast = field(
        init=False,
        repr=False
    )
    dom: DOM = field(
        init=False,
        repr=False
    )
    dom_debugger: DOMDebugger = field(
        init=False,
        repr=False
    )
    event_breakpoints: EventBreakpoints = field(
        init=False,
        repr=False
    )
    dom_snapshot: DOMSnapshot = field(
        init=False,
        repr=False
    )
    dom_storage: DOMStorage = field(
        init=False,
        repr=False
    )
    database: Database = field(
        init=False,
        repr=False
    )
    device_orientation: DeviceOrientation = field(
        init=False,
        repr=False
    )
    emulation: Emulation = field(
        init=False,
        repr=False
    )
    headless_experimental: HeadlessExperimental = field(
        init=False,
        repr=False
    )
    io: IO = field(
        init=False,
        repr=False
    )
    indexed_db: IndexedDB = field(
        init=False,
        repr=False
    )
    input: Input = field(
        init=False,
        repr=False
    )
    inspector: Inspector = field(
        init=False,
        repr=False
    )
    layer_tree: LayerTree = field(
        init=False,
        repr=False
    )
    log: Log = field(
        init=False,
        repr=False
    )
    memory: Memory = field(
        init=False,
        repr=False
    )
    network: Network = field(
        init=False,
        repr=False
    )
    overlay: Overlay = field(
        init=False,
        repr=False
    )
    page: Page = field(
        init=False,
        repr=False
    )
    performance: Performance = field(
        init=False,
        repr=False
    )
    performance_timeline: PerformanceTimeline = field(
        init=False,
        repr=False
    )
    security: Security = field(
        init=False,
        repr=False
    )
    service_worker: ServiceWorker = field(
        init=False,
        repr=False
    )
    storage: Storage = field(
        init=False,
        repr=False
    )
    system_info: SystemInfo = field(
        init=False,
        repr=False
    )
    target: Target = field(
        init=False,
        repr=False
    )
    tethering: Tethering = field(
        init=False,
        repr=False
    )
    tracing: Tracing = field(
        init=False,
        repr=False
    )
    fetch: Fetch = field(
        init=False,
        repr=False
    )
    web_audio: WebAudio = field(
        init=False,
        repr=False
    )
    web_authn: WebAuthn = field(
        init=False,
        repr=False
    )
    media: Media = field(
        init=False,
        repr=False
    )
    device_access: DeviceAccess = field(
        init=False,
        repr=False
    )
    preload: Preload = field(
        init=False,
        repr=False
    )
    fed_cm: FedCm = field(
        init=False,
        repr=False
    )
    console: Console = field(
        init=False,
        repr=False
    )
    debugger: Debugger = field(
        init=False,
        repr=False
    )
    heap_profiler: HeapProfiler = field(
        init=False,
        repr=False
    )
    profiler: Profiler = field(
        init=False,
        repr=False
    )
    runtime: Runtime = field(
        init=False,
        repr=False
    )
    schema: Schema = field(
        init=False,
        repr=False
    )

    ws_target: 'WSTarget'
