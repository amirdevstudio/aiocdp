# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.types import (
    dom,
    network,
    page,
    runtime
)
from typing import (
    Literal,
    TypedDict
)

IssueId = str

CookieExclusionReason = Literal[
    'ExcludeSameSiteUnspecifiedTreatedAsLax',
    'ExcludeSameSiteNoneInsecure',
    'ExcludeSameSiteLax',
    'ExcludeSameSiteStrict',
    'ExcludeInvalidSameParty',
    'ExcludeSamePartyCrossPartyContext',
    'ExcludeDomainNonASCII',
    'ExcludeThirdPartyCookieBlockedInFirstPartySet',
    'ExcludeThirdPartyPhaseout'
]

CookieWarningReason = Literal[
    'WarnSameSiteUnspecifiedCrossSiteContext',
    'WarnSameSiteNoneInsecure',
    'WarnSameSiteUnspecifiedLaxAllowUnsafe',
    'WarnSameSiteStrictLaxDowngradeStrict',
    'WarnSameSiteStrictCrossDowngradeStrict',
    'WarnSameSiteStrictCrossDowngradeLax',
    'WarnSameSiteLaxCrossDowngradeStrict',
    'WarnSameSiteLaxCrossDowngradeLax',
    'WarnAttributeValueExceedsMaxSize',
    'WarnDomainNonASCII',
    'WarnThirdPartyPhaseout'
]

CookieOperation = Literal[
    'SetCookie',
    'ReadCookie'
]

MixedContentResolutionStatus = Literal[
    'MixedContentBlocked',
    'MixedContentAutomaticallyUpgraded',
    'MixedContentWarning'
]

MixedContentResourceType = Literal[
    'AttributionSrc',
    'Audio',
    'Beacon',
    'CSPReport',
    'Download',
    'EventSource',
    'Favicon',
    'Font',
    'Form',
    'Frame',
    'Image',
    'Import',
    'Manifest',
    'Ping',
    'PluginData',
    'PluginResource',
    'Prefetch',
    'Resource',
    'Script',
    'ServiceWorker',
    'SharedWorker',
    'Stylesheet',
    'Track',
    'Video',
    'Worker',
    'XMLHttpRequest',
    'XSLT'
]

BlockedByResponseReason = Literal[
    'CoepFrameResourceNeedsCoepHeader',
    'CoopSandboxedIFrameCannotNavigateToCoopPage',
    'CorpNotSameOrigin',
    'CorpNotSameOriginAfterDefaultedToSameOriginByCoep',
    'CorpNotSameSite'
]

HeavyAdResolutionStatus = Literal[
    'HeavyAdBlocked',
    'HeavyAdWarning'
]

HeavyAdReason = Literal[
    'NetworkTotalLimit',
    'CpuTotalLimit',
    'CpuPeakLimit'
]

ContentSecurityPolicyViolationType = Literal[
    'kInlineViolation',
    'kEvalViolation',
    'kURLViolation',
    'kTrustedTypesSinkViolation',
    'kTrustedTypesPolicyViolation',
    'kWasmEvalViolation'
]

SharedArrayBufferIssueType = Literal[
    'TransferIssue',
    'CreationIssue'
]

AttributionReportingIssueType = Literal[
    'PermissionPolicyDisabled',
    'UntrustworthyReportingOrigin',
    'InsecureContext',
    'InvalidHeader',
    'InvalidRegisterTriggerHeader',
    'SourceAndTriggerHeaders',
    'SourceIgnored',
    'TriggerIgnored',
    'OsSourceIgnored',
    'OsTriggerIgnored',
    'InvalidRegisterOsSourceHeader',
    'InvalidRegisterOsTriggerHeader',
    'WebAndOsHeaders',
    'NoWebOrOsSupport',
    'NavigationRegistrationWithoutTransientUserActivation'
]

GenericIssueErrorType = Literal[
    'CrossOriginPortalPostMessageError',
    'FormLabelForNameError',
    'FormDuplicateIdForInputError',
    'FormInputWithNoLabelError',
    'FormAutocompleteAttributeEmptyError',
    'FormEmptyIdAndNameAttributesForInputError',
    'FormAriaLabelledByToNonExistingId',
    'FormInputAssignedAutocompleteValueToIdOrNameAttributeError',
    'FormLabelHasNeitherForNorNestedInput',
    'FormLabelForMatchesNonExistingIdError',
    'FormInputHasWrongButWellIntendedAutocompleteValueError',
    'ResponseWasBlockedByORB'
]

ClientHintIssueReason = Literal[
    'MetaTagAllowListInvalidOrigin',
    'MetaTagModifiedHTML'
]

FederatedAuthRequestIssueReason = Literal[
    'ShouldEmbargo',
    'TooManyRequests',
    'WellKnownHttpNotFound',
    'WellKnownNoResponse',
    'WellKnownInvalidResponse',
    'WellKnownListEmpty',
    'WellKnownInvalidContentType',
    'ConfigNotInWellKnown',
    'WellKnownTooBig',
    'ConfigHttpNotFound',
    'ConfigNoResponse',
    'ConfigInvalidResponse',
    'ConfigInvalidContentType',
    'ClientMetadataHttpNotFound',
    'ClientMetadataNoResponse',
    'ClientMetadataInvalidResponse',
    'ClientMetadataInvalidContentType',
    'DisabledInSettings',
    'ErrorFetchingSignin',
    'InvalidSigninResponse',
    'AccountsHttpNotFound',
    'AccountsNoResponse',
    'AccountsInvalidResponse',
    'AccountsListEmpty',
    'AccountsInvalidContentType',
    'IdTokenHttpNotFound',
    'IdTokenNoResponse',
    'IdTokenInvalidResponse',
    'IdTokenInvalidRequest',
    'IdTokenInvalidContentType',
    'ErrorIdToken',
    'Canceled',
    'RpPageNotVisible',
    'SilentMediationFailure',
    'ThirdPartyCookiesBlocked'
]

FederatedAuthUserInfoRequestIssueReason = Literal[
    'NotSameOrigin',
    'NotIframe',
    'NotPotentiallyTrustworthy',
    'NoApiPermission',
    'NotSignedInWithIdp',
    'NoAccountSharingPermission',
    'InvalidConfigOrWellKnown',
    'InvalidAccountsResponse',
    'NoReturningUserFromFetchedAccounts'
]

StyleSheetLoadingIssueReason = Literal[
    'LateImportRule',
    'RequestFailed'
]

InspectorIssueCode = Literal[
    'CookieIssue',
    'MixedContentIssue',
    'BlockedByResponseIssue',
    'HeavyAdIssue',
    'ContentSecurityPolicyIssue',
    'SharedArrayBufferIssue',
    'LowTextContrastIssue',
    'CorsIssue',
    'AttributionReportingIssue',
    'QuirksModeIssue',
    'NavigatorUserAgentIssue',
    'GenericIssue',
    'DeprecationIssue',
    'ClientHintIssue',
    'FederatedAuthRequestIssue',
    'BounceTrackingIssue',
    'StylesheetLoadingIssue',
    'FederatedAuthUserInfoRequestIssue'
]


class AffectedCookie(TypedDict):
    name: str
    path: str
    domain: str


class AffectedRequest(TypedDict):
    requestId: 'network.RequestId'
    url: str


class AffectedFrame(TypedDict):
    frameId: 'page.FrameId'


class CookieIssueDetails(TypedDict):
    cookieWarningReasons: list
    cookieExclusionReasons: list
    operation: 'CookieOperation'
    cookie: 'AffectedCookie'
    rawCookieLine: str
    siteForCookies: str
    cookieUrl: str
    request: 'AffectedRequest'


class MixedContentIssueDetails(TypedDict):
    resolutionStatus: 'MixedContentResolutionStatus'
    insecureURL: str
    mainResourceURL: str
    resourceType: 'MixedContentResourceType'
    request: 'AffectedRequest'
    frame: 'AffectedFrame'


class BlockedByResponseIssueDetails(TypedDict):
    request: 'AffectedRequest'
    reason: 'BlockedByResponseReason'
    parentFrame: 'AffectedFrame'
    blockedFrame: 'AffectedFrame'


class HeavyAdIssueDetails(TypedDict):
    resolution: 'HeavyAdResolutionStatus'
    reason: 'HeavyAdReason'
    frame: 'AffectedFrame'


class SourceCodeLocation(TypedDict):
    url: str
    lineNumber: int
    columnNumber: int
    scriptId: 'runtime.ScriptId'


class ContentSecurityPolicyIssueDetails(TypedDict):
    violatedDirective: str
    isReportOnly: bool
    contentSecurityPolicyViolationType: 'ContentSecurityPolicyViolationType'
    blockedURL: str
    frameAncestor: 'AffectedFrame'
    sourceCodeLocation: 'SourceCodeLocation'
    violatingNodeId: 'dom.BackendNodeId'


class SharedArrayBufferIssueDetails(TypedDict):
    sourceCodeLocation: 'SourceCodeLocation'
    isWarning: bool
    type: 'SharedArrayBufferIssueType'


class LowTextContrastIssueDetails(TypedDict):
    violatingNodeId: 'dom.BackendNodeId'
    violatingNodeSelector: str
    contrastRatio: float
    thresholdAA: float
    thresholdAAA: float
    fontSize: str
    fontWeight: str


class CorsIssueDetails(TypedDict):
    corsErrorStatus: 'network.CorsErrorStatus'
    isWarning: bool
    request: 'AffectedRequest'
    location: 'SourceCodeLocation'
    initiatorOrigin: str
    resourceIPAddressSpace: 'network.IPAddressSpace'
    clientSecurityState: 'network.ClientSecurityState'


class AttributionReportingIssueDetails(TypedDict):
    violationType: 'AttributionReportingIssueType'
    request: 'AffectedRequest'
    violatingNodeId: 'dom.BackendNodeId'
    invalidParameter: str


class QuirksModeIssueDetails(TypedDict):
    isLimitedQuirksMode: bool
    documentNodeId: 'dom.BackendNodeId'
    url: str
    frameId: 'page.FrameId'
    loaderId: 'network.LoaderId'


class NavigatorUserAgentIssueDetails(TypedDict):
    url: str
    location: 'SourceCodeLocation'


class GenericIssueDetails(TypedDict):
    errorType: 'GenericIssueErrorType'
    frameId: 'page.FrameId'
    violatingNodeId: 'dom.BackendNodeId'
    violatingNodeAttribute: str
    request: 'AffectedRequest'


class DeprecationIssueDetails(TypedDict):
    sourceCodeLocation: 'SourceCodeLocation'
    type: str
    affectedFrame: 'AffectedFrame'


class BounceTrackingIssueDetails(TypedDict):
    trackingSites: list


class FederatedAuthRequestIssueDetails(TypedDict):
    federatedAuthRequestIssueReason: 'FederatedAuthRequestIssueReason'


class FederatedAuthUserInfoRequestIssueDetails(TypedDict):
    federatedAuthUserInfoRequestIssueReason: 'FederatedAuthUserInfoRequestIssueReason'


class ClientHintIssueDetails(TypedDict):
    sourceCodeLocation: 'SourceCodeLocation'
    clientHintIssueReason: 'ClientHintIssueReason'


class FailedRequestInfo(TypedDict):
    url: str
    failureMessage: str
    requestId: 'network.RequestId'


class StylesheetLoadingIssueDetails(TypedDict):
    sourceCodeLocation: 'SourceCodeLocation'
    styleSheetLoadingIssueReason: 'StyleSheetLoadingIssueReason'
    failedRequestInfo: 'FailedRequestInfo'


class InspectorIssueDetails(TypedDict):
    cookieIssueDetails: 'CookieIssueDetails'
    mixedContentIssueDetails: 'MixedContentIssueDetails'
    blockedByResponseIssueDetails: 'BlockedByResponseIssueDetails'
    heavyAdIssueDetails: 'HeavyAdIssueDetails'
    contentSecurityPolicyIssueDetails: 'ContentSecurityPolicyIssueDetails'
    sharedArrayBufferIssueDetails: 'SharedArrayBufferIssueDetails'
    lowTextContrastIssueDetails: 'LowTextContrastIssueDetails'
    corsIssueDetails: 'CorsIssueDetails'
    attributionReportingIssueDetails: 'AttributionReportingIssueDetails'
    quirksModeIssueDetails: 'QuirksModeIssueDetails'
    navigatorUserAgentIssueDetails: 'NavigatorUserAgentIssueDetails'
    genericIssueDetails: 'GenericIssueDetails'
    deprecationIssueDetails: 'DeprecationIssueDetails'
    clientHintIssueDetails: 'ClientHintIssueDetails'
    federatedAuthRequestIssueDetails: 'FederatedAuthRequestIssueDetails'
    bounceTrackingIssueDetails: 'BounceTrackingIssueDetails'
    stylesheetLoadingIssueDetails: 'StylesheetLoadingIssueDetails'
    federatedAuthUserInfoRequestIssueDetails: 'FederatedAuthUserInfoRequestIssueDetails'


class InspectorIssue(TypedDict):
    code: 'InspectorIssueCode'
    details: 'InspectorIssueDetails'
    issueId: 'IssueId'
