# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.
from cdp.generated.types import (
    page,
    target
)
from typing import (
    Literal,
    NotRequired,
    TypedDict
)

BrowserContextID = str

WindowID = int

WindowState = Literal[
    'normal',
    'minimized',
    'maximized',
    'fullscreen'
]

PermissionType = Literal[
    'accessibilityEvents',
    'audioCapture',
    'backgroundSync',
    'backgroundFetch',
    'clipboardReadWrite',
    'clipboardSanitizedWrite',
    'displayCapture',
    'durableStorage',
    'flash',
    'geolocation',
    'idleDetection',
    'localFonts',
    'midi',
    'midiSysex',
    'nfc',
    'notifications',
    'paymentHandler',
    'periodicBackgroundSync',
    'protectedMediaIdentifier',
    'sensors',
    'storageAccess',
    'topLevelStorageAccess',
    'videoCapture',
    'videoCapturePanTiltZoom',
    'wakeLockScreen',
    'wakeLockSystem',
    'windowManagement'
]

PermissionSetting = Literal[
    'granted',
    'denied',
    'prompt'
]

BrowserCommandId = Literal[
    'openTabSearch',
    'closeTabSearch'
]


class Bounds(TypedDict):
    left: NotRequired[int]
    top: NotRequired[int]
    width: NotRequired[int]
    height: NotRequired[int]
    window_state: NotRequired['WindowState']


class PermissionDescriptor(TypedDict):
    name: str
    sysex: NotRequired[bool]
    user_visible_only: NotRequired[bool]
    allow_without_sanitization: NotRequired[bool]
    pan_tilt_zoom: NotRequired[bool]


class Bucket(TypedDict):
    low: int
    high: int
    count: int


class Histogram(TypedDict):
    name: str
    sum: int
    count: int
    buckets: list


class SetPermissionParamsT(TypedDict):
    permission: 'PermissionDescriptor'
    setting: 'PermissionSetting'
    origin: NotRequired[str]
    browser_context_id: NotRequired['BrowserContextID']


class GrantPermissionsParamsT(TypedDict):
    permissions: list
    origin: NotRequired[str]
    browser_context_id: NotRequired['BrowserContextID']


class ResetPermissionsParamsT(TypedDict):
    browser_context_id: NotRequired['BrowserContextID']


class SetDownloadBehaviorParamsT(TypedDict):
    behavior: str
    browser_context_id: NotRequired['BrowserContextID']
    download_path: NotRequired[str]
    events_enabled: NotRequired[bool]


class CancelDownloadParamsT(TypedDict):
    guid: str
    browser_context_id: NotRequired['BrowserContextID']


class GetHistogramsParamsT(TypedDict):
    query: NotRequired[str]
    delta: NotRequired[bool]


class GetHistogramParamsT(TypedDict):
    name: str
    delta: NotRequired[bool]


class GetWindowBoundsParamsT(TypedDict):
    window_id: 'WindowID'


class GetWindowForTargetParamsT(TypedDict):
    target_id: NotRequired['target.TargetID']


class SetWindowBoundsParamsT(TypedDict):
    window_id: 'WindowID'
    bounds: 'Bounds'


class SetDockTileParamsT(TypedDict):
    badge_label: NotRequired[str]
    image: NotRequired[str]


class ExecuteBrowserCommandParamsT(TypedDict):
    command_id: 'BrowserCommandId'


class AddPrivacySandboxEnrollmentOverrideParamsT(TypedDict):
    url: str


class GetVersionReturnT(TypedDict):
    protocol_version: str
    product: str
    revision: str
    user_agent: str
    js_version: str


class GetBrowserCommandLineReturnT(TypedDict):
    arguments: list


class GetHistogramsReturnT(TypedDict):
    histograms: list


class GetHistogramReturnT(TypedDict):
    histogram: 'Histogram'


class GetWindowBoundsReturnT(TypedDict):
    bounds: 'Bounds'


class GetWindowForTargetReturnT(TypedDict):
    window_id: 'WindowID'
    bounds: 'Bounds'


class DownloadWillBeginEventT(TypedDict):
    name: Literal['download_will_begin']
    params: 'DownloadWillBeginParamsT'


class DownloadProgressEventT(TypedDict):
    name: Literal['download_progress']
    params: 'DownloadProgressParamsT'


class DownloadWillBeginParamsT(TypedDict):
    frame_id: 'page.FrameId'
    guid: str
    url: str
    suggested_filename: str


class DownloadProgressParamsT(TypedDict):
    guid: str
    total_bytes: float
    received_bytes: float
    state: str
