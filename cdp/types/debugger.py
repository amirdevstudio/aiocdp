# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.
from cdp.types import (
    runtime
)
from typing import (
    Literal,
    NotRequired,
    TypedDict
)

BreakpointId = str

CallFrameId = str


class Location(TypedDict):
    script_id: 'runtime.ScriptId'
    line_number: int
    column_number: NotRequired[int]


class ScriptPosition(TypedDict):
    line_number: int
    column_number: int


class CallFrame(TypedDict):
    call_frame_id: 'CallFrameId'
    function_name: str
    location: 'Location'
    url: str
    scope_chain: list
    this: 'runtime.RemoteObject'
    function_location: NotRequired['Location']
    return_value: NotRequired['runtime.RemoteObject']


class Scope(TypedDict):
    type: str
    object: 'runtime.RemoteObject'
    name: NotRequired[str]
    start_location: NotRequired['Location']
    end_location: NotRequired['Location']


class SearchMatch(TypedDict):
    line_number: float
    line_content: str


class BreakLocation(TypedDict):
    script_id: 'runtime.ScriptId'
    line_number: int
    column_number: NotRequired[int]
    type: NotRequired[str]


class ContinueToLocationParamsT(TypedDict):
    location: 'Location'
    target_call_frames: NotRequired[str]


class EnableParamsT(TypedDict):
    max_scripts_cache_size: NotRequired[float]


class EvaluateOnCallFrameParamsT(TypedDict):
    call_frame_id: 'CallFrameId'
    expression: str
    object_group: NotRequired[str]
    include_command_line_api: NotRequired[bool]
    silent: NotRequired[bool]
    return_by_value: NotRequired[bool]
    generate_preview: NotRequired[bool]
    throw_on_side_effect: NotRequired[bool]
    timeout: NotRequired['runtime.TimeDelta']


class GetPossibleBreakpointsParamsT(TypedDict):
    start: 'Location'
    end: NotRequired['Location']
    restrict_to_function: NotRequired[bool]


class GetScriptSourceParamsT(TypedDict):
    script_id: 'runtime.ScriptId'


class GetStackTraceParamsT(TypedDict):
    stack_trace_id: 'runtime.StackTraceId'


class PauseOnAsyncCallParamsT(TypedDict):
    parent_stack_trace_id: 'runtime.StackTraceId'


class RemoveBreakpointParamsT(TypedDict):
    breakpoint_id: 'BreakpointId'


class RestartFrameParamsT(TypedDict):
    call_frame_id: 'CallFrameId'


class SearchInContentParamsT(TypedDict):
    script_id: 'runtime.ScriptId'
    query: str
    case_sensitive: NotRequired[bool]
    is_regex: NotRequired[bool]


class SetAsyncCallStackDepthParamsT(TypedDict):
    max_depth: int


class SetBlackboxPatternsParamsT(TypedDict):
    patterns: list


class SetBlackboxedRangesParamsT(TypedDict):
    script_id: 'runtime.ScriptId'
    positions: list


class SetBreakpointParamsT(TypedDict):
    location: 'Location'
    condition: NotRequired[str]


class SetInstrumentationBreakpointParamsT(TypedDict):
    instrumentation: str


class SetBreakpointByUrlParamsT(TypedDict):
    line_number: int
    url: NotRequired[str]
    url_regex: NotRequired[str]
    script_hash: NotRequired[str]
    column_number: NotRequired[int]
    condition: NotRequired[str]


class SetBreakpointOnFunctionCallParamsT(TypedDict):
    object_id: 'runtime.RemoteObjectId'
    condition: NotRequired[str]


class SetBreakpointsActiveParamsT(TypedDict):
    active: bool


class SetPauseOnExceptionsParamsT(TypedDict):
    state: str


class SetReturnValueParamsT(TypedDict):
    new_value: 'runtime.CallArgument'


class SetScriptSourceParamsT(TypedDict):
    script_id: 'runtime.ScriptId'
    script_source: str
    dry_run: NotRequired[bool]


class SetSkipAllPausesParamsT(TypedDict):
    skip: bool


class SetVariableValueParamsT(TypedDict):
    scope_number: int
    variable_name: str
    new_value: 'runtime.CallArgument'
    call_frame_id: 'CallFrameId'


class StepIntoParamsT(TypedDict):
    break_on_async_call: NotRequired[bool]


class EnableReturnT(TypedDict):
    debugger_id: 'runtime.UniqueDebuggerId'


class EvaluateOnCallFrameReturnT(TypedDict):
    result: 'runtime.RemoteObject'
    exception_details: 'runtime.ExceptionDetails'


class GetPossibleBreakpointsReturnT(TypedDict):
    locations: list


class GetScriptSourceReturnT(TypedDict):
    script_source: str


class GetStackTraceReturnT(TypedDict):
    stack_trace: 'runtime.StackTrace'


class RestartFrameReturnT(TypedDict):
    call_frames: list
    async_stack_trace: 'runtime.StackTrace'
    async_stack_trace_id: 'runtime.StackTraceId'


class SearchInContentReturnT(TypedDict):
    result: list


class SetBreakpointReturnT(TypedDict):
    breakpoint_id: 'BreakpointId'
    actual_location: 'Location'


class SetInstrumentationBreakpointReturnT(TypedDict):
    breakpoint_id: 'BreakpointId'


class SetBreakpointByUrlReturnT(TypedDict):
    breakpoint_id: 'BreakpointId'
    locations: list


class SetBreakpointOnFunctionCallReturnT(TypedDict):
    breakpoint_id: 'BreakpointId'


class SetScriptSourceReturnT(TypedDict):
    call_frames: list
    stack_changed: bool
    async_stack_trace: 'runtime.StackTrace'
    async_stack_trace_id: 'runtime.StackTraceId'
    exception_details: 'runtime.ExceptionDetails'


class BreakpointResolvedEventT(TypedDict):
    name: Literal['breakpoint_resolved']
    params: 'BreakpointResolvedParamsT'


class PausedEventT(TypedDict):
    name: Literal['paused']
    params: 'PausedParamsT'


class ResumedEventT(TypedDict):
    name: Literal['resumed']
    params: None


class ScriptFailedToParseEventT(TypedDict):
    name: Literal['script_failed_to_parse']
    params: 'ScriptFailedToParseParamsT'


class ScriptParsedEventT(TypedDict):
    name: Literal['script_parsed']
    params: 'ScriptParsedParamsT'


class BreakpointResolvedParamsT(TypedDict):
    breakpoint_id: 'BreakpointId'
    location: 'Location'


class PausedParamsT(TypedDict):
    call_frames: list
    reason: str
    data: dict
    hit_breakpoints: list
    async_stack_trace: 'runtime.StackTrace'
    async_stack_trace_id: 'runtime.StackTraceId'
    async_call_stack_trace_id: 'runtime.StackTraceId'


class ScriptFailedToParseParamsT(TypedDict):
    script_id: 'runtime.ScriptId'
    url: str
    start_line: int
    start_column: int
    end_line: int
    end_column: int
    execution_context_id: 'runtime.ExecutionContextId'
    hash: str
    execution_context_aux_data: dict
    source_map_url: str
    has_source_url: bool
    is_module: bool
    length: int
    stack_trace: 'runtime.StackTrace'


class ScriptParsedParamsT(TypedDict):
    script_id: 'runtime.ScriptId'
    url: str
    start_line: int
    start_column: int
    end_line: int
    end_column: int
    execution_context_id: 'runtime.ExecutionContextId'
    hash: str
    execution_context_aux_data: dict
    is_live_edit: bool
    source_map_url: str
    has_source_url: bool
    is_module: bool
    length: int
    stack_trace: 'runtime.StackTrace'
