# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.types import (
    dom,
    page
)
from typing import (
    Literal,
    TypedDict
)

StyleSheetId = str

StyleSheetOrigin = Literal[
    'injected',
    'user-agent',
    'inspector',
    'regular'
]

CSSRuleType = Literal[
    'MediaRule',
    'SupportsRule',
    'ContainerRule',
    'LayerRule',
    'ScopeRule',
    'StyleRule'
]


class PseudoElementMatches(TypedDict):
    pseudoType: 'dom.PseudoType'
    matches: list
    pseudoIdentifier: str


class InheritedStyleEntry(TypedDict):
    matchedCSSRules: list
    inlineStyle: 'CSSStyle'


class InheritedPseudoElementMatches(TypedDict):
    pseudoElements: list


class RuleMatch(TypedDict):
    rule: 'CSSRule'
    matchingSelectors: list


class Value(TypedDict):
    text: str
    range: 'SourceRange'
    specificity: 'Specificity'


class Specificity(TypedDict):
    a: int
    b: int
    c: int


class SelectorList(TypedDict):
    selectors: list
    text: str


class CSSStyleSheetHeader(TypedDict):
    styleSheetId: 'StyleSheetId'
    frameId: 'page.FrameId'
    sourceURL: str
    origin: 'StyleSheetOrigin'
    title: str
    disabled: bool
    isInline: bool
    isMutable: bool
    isConstructed: bool
    startLine: float
    startColumn: float
    length: float
    endLine: float
    endColumn: float
    sourceMapURL: str
    ownerNode: 'dom.BackendNodeId'
    hasSourceURL: bool
    loadingFailed: bool


class CSSRule(TypedDict):
    selectorList: 'SelectorList'
    origin: 'StyleSheetOrigin'
    style: 'CSSStyle'
    styleSheetId: 'StyleSheetId'
    nestingSelectors: list
    media: list
    containerQueries: list
    supports: list
    layers: list
    scopes: list
    ruleTypes: list


class RuleUsage(TypedDict):
    styleSheetId: 'StyleSheetId'
    startOffset: float
    endOffset: float
    used: bool


class SourceRange(TypedDict):
    startLine: int
    startColumn: int
    endLine: int
    endColumn: int


class ShorthandEntry(TypedDict):
    name: str
    value: str
    important: bool


class CSSComputedStyleProperty(TypedDict):
    name: str
    value: str


class CSSStyle(TypedDict):
    cssProperties: list
    shorthandEntries: list
    styleSheetId: 'StyleSheetId'
    cssText: str
    range: 'SourceRange'


class CSSProperty(TypedDict):
    name: str
    value: str
    important: bool
    implicit: bool
    text: str
    parsedOk: bool
    disabled: bool
    range: 'SourceRange'
    longhandProperties: list


class CSSMedia(TypedDict):
    text: str
    source: str
    sourceURL: str
    range: 'SourceRange'
    styleSheetId: 'StyleSheetId'
    mediaList: list


class MediaQuery(TypedDict):
    expressions: list
    active: bool


class MediaQueryExpression(TypedDict):
    value: float
    unit: str
    feature: str
    valueRange: 'SourceRange'
    computedLength: float


class CSSContainerQuery(TypedDict):
    text: str
    range: 'SourceRange'
    styleSheetId: 'StyleSheetId'
    name: str
    physicalAxes: 'dom.PhysicalAxes'
    logicalAxes: 'dom.LogicalAxes'


class CSSSupports(TypedDict):
    text: str
    active: bool
    range: 'SourceRange'
    styleSheetId: 'StyleSheetId'


class CSSScope(TypedDict):
    text: str
    range: 'SourceRange'
    styleSheetId: 'StyleSheetId'


class CSSLayer(TypedDict):
    text: str
    range: 'SourceRange'
    styleSheetId: 'StyleSheetId'


class CSSLayerData(TypedDict):
    name: str
    order: float
    subLayers: list


class PlatformFontUsage(TypedDict):
    familyName: str
    isCustomFont: bool
    glyphCount: float


class FontVariationAxis(TypedDict):
    tag: str
    name: str
    minValue: float
    maxValue: float
    defaultValue: float


class FontFace(TypedDict):
    fontFamily: str
    fontStyle: str
    fontVariant: str
    fontWeight: str
    fontStretch: str
    fontDisplay: str
    unicodeRange: str
    src: str
    platformFontFamily: str
    fontVariationAxes: list


class CSSTryRule(TypedDict):
    origin: 'StyleSheetOrigin'
    style: 'CSSStyle'
    styleSheetId: 'StyleSheetId'


class CSSPositionFallbackRule(TypedDict):
    name: 'Value'
    tryRules: list


class CSSKeyframesRule(TypedDict):
    animationName: 'Value'
    keyframes: list


class CSSPropertyRegistration(TypedDict):
    propertyName: str
    inherits: bool
    syntax: str
    initialValue: 'Value'


class CSSPropertyRule(TypedDict):
    origin: 'StyleSheetOrigin'
    propertyName: 'Value'
    style: 'CSSStyle'
    styleSheetId: 'StyleSheetId'


class CSSKeyframeRule(TypedDict):
    origin: 'StyleSheetOrigin'
    keyText: 'Value'
    style: 'CSSStyle'
    styleSheetId: 'StyleSheetId'


class StyleDeclarationEdit(TypedDict):
    styleSheetId: 'StyleSheetId'
    range: 'SourceRange'
    text: str
