# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.
from cdp.types import (
    runtime
)
from cdp.types import page
from typing import (
    Literal,
    NotRequired,
    TypedDict
)

NodeId = int

BackendNodeId = int

Quad = list

PseudoType = Literal[
    'first-line',
    'first-letter',
    'before',
    'after',
    'marker',
    'backdrop',
    'selection',
    'target-text',
    'spelling-error',
    'grammar-error',
    'highlight',
    'first-line-inherited',
    'scrollbar',
    'scrollbar-thumb',
    'scrollbar-button',
    'scrollbar-track',
    'scrollbar-track-piece',
    'scrollbar-corner',
    'resizer',
    'input-list-button',
    'view-transition',
    'view-transition-group',
    'view-transition-image-pair',
    'view-transition-old',
    'view-transition-new'
]

ShadowRootType = Literal[
    'user-agent',
    'open',
    'closed'
]

CompatibilityMode = Literal[
    'QuirksMode',
    'LimitedQuirksMode',
    'NoQuirksMode'
]

PhysicalAxes = Literal[
    'Horizontal',
    'Vertical',
    'Both'
]

LogicalAxes = Literal[
    'Inline',
    'Block',
    'Both'
]


class BackendNode(TypedDict):
    node_type: int
    node_name: str
    backend_node_id: 'BackendNodeId'


class Node(TypedDict):
    node_id: 'NodeId'
    backend_node_id: 'BackendNodeId'
    node_type: int
    node_name: str
    local_name: str
    node_value: str
    parent_id: NotRequired['NodeId']
    child_node_count: NotRequired[int]
    children: NotRequired[list]
    attributes: NotRequired[list]
    document_url: NotRequired[str]
    base_url: NotRequired[str]
    public_id: NotRequired[str]
    system_id: NotRequired[str]
    internal_subset: NotRequired[str]
    xml_version: NotRequired[str]
    name: NotRequired[str]
    value: NotRequired[str]
    pseudo_type: NotRequired['PseudoType']
    pseudo_identifier: NotRequired[str]
    shadow_root_type: NotRequired['ShadowRootType']
    frame_id: NotRequired['page.FrameId']
    content_document: NotRequired['Node']
    shadow_roots: NotRequired[list]
    template_content: NotRequired['Node']
    pseudo_elements: NotRequired[list]
    imported_document: NotRequired['Node']
    distributed_nodes: NotRequired[list]
    is_svg: NotRequired[bool]
    compatibility_mode: NotRequired['CompatibilityMode']
    assigned_slot: NotRequired['BackendNode']


class RGBA(TypedDict):
    r: int
    g: int
    b: int
    a: NotRequired[float]


class BoxModel(TypedDict):
    content: 'Quad'
    padding: 'Quad'
    border: 'Quad'
    margin: 'Quad'
    width: int
    height: int
    shape_outside: NotRequired['ShapeOutsideInfo']


class ShapeOutsideInfo(TypedDict):
    bounds: 'Quad'
    shape: list
    margin_shape: list


class Rect(TypedDict):
    x: float
    y: float
    width: float
    height: float


class CSSComputedStyleProperty(TypedDict):
    name: str
    value: str


class CollectClassNamesFromSubtreeParamsT(TypedDict):
    node_id: 'NodeId'


class CopyToParamsT(TypedDict):
    node_id: 'NodeId'
    target_node_id: 'NodeId'
    insert_before_node_id: NotRequired['NodeId']


class DescribeNodeParamsT(TypedDict):
    node_id: NotRequired['NodeId']
    backend_node_id: NotRequired['BackendNodeId']
    object_id: NotRequired['runtime.RemoteObjectId']
    depth: NotRequired[int]
    pierce: NotRequired[bool]


class ScrollIntoViewIfNeededParamsT(TypedDict):
    node_id: NotRequired['NodeId']
    backend_node_id: NotRequired['BackendNodeId']
    object_id: NotRequired['runtime.RemoteObjectId']
    rect: NotRequired['Rect']


class DiscardSearchResultsParamsT(TypedDict):
    search_id: str


class EnableParamsT(TypedDict):
    include_whitespace: NotRequired[str]


class FocusParamsT(TypedDict):
    node_id: NotRequired['NodeId']
    backend_node_id: NotRequired['BackendNodeId']
    object_id: NotRequired['runtime.RemoteObjectId']


class GetAttributesParamsT(TypedDict):
    node_id: 'NodeId'


class GetBoxModelParamsT(TypedDict):
    node_id: NotRequired['NodeId']
    backend_node_id: NotRequired['BackendNodeId']
    object_id: NotRequired['runtime.RemoteObjectId']


class GetContentQuadsParamsT(TypedDict):
    node_id: NotRequired['NodeId']
    backend_node_id: NotRequired['BackendNodeId']
    object_id: NotRequired['runtime.RemoteObjectId']


class GetDocumentParamsT(TypedDict):
    depth: NotRequired[int]
    pierce: NotRequired[bool]


class GetFlattenedDocumentParamsT(TypedDict):
    depth: NotRequired[int]
    pierce: NotRequired[bool]


class GetNodesForSubtreeByStyleParamsT(TypedDict):
    node_id: 'NodeId'
    computed_styles: list
    pierce: NotRequired[bool]


class GetNodeForLocationParamsT(TypedDict):
    x: int
    y: int
    include_user_agent_shadow_dom: NotRequired[bool]
    ignore_pointer_events_none: NotRequired[bool]


class GetOuterHTMLParamsT(TypedDict):
    node_id: NotRequired['NodeId']
    backend_node_id: NotRequired['BackendNodeId']
    object_id: NotRequired['runtime.RemoteObjectId']


class GetRelayoutBoundaryParamsT(TypedDict):
    node_id: 'NodeId'


class GetSearchResultsParamsT(TypedDict):
    search_id: str
    from_index: int
    to_index: int


class MoveToParamsT(TypedDict):
    node_id: 'NodeId'
    target_node_id: 'NodeId'
    insert_before_node_id: NotRequired['NodeId']


class PerformSearchParamsT(TypedDict):
    query: str
    include_user_agent_shadow_dom: NotRequired[bool]


class PushNodeByPathToFrontendParamsT(TypedDict):
    path: str


class PushNodesByBackendIdsToFrontendParamsT(TypedDict):
    backend_node_ids: list


class QuerySelectorParamsT(TypedDict):
    node_id: 'NodeId'
    selector: str


class QuerySelectorAllParamsT(TypedDict):
    node_id: 'NodeId'
    selector: str


class RemoveAttributeParamsT(TypedDict):
    node_id: 'NodeId'
    name: str


class RemoveNodeParamsT(TypedDict):
    node_id: 'NodeId'


class RequestChildNodesParamsT(TypedDict):
    node_id: 'NodeId'
    depth: NotRequired[int]
    pierce: NotRequired[bool]


class RequestNodeParamsT(TypedDict):
    object_id: 'runtime.RemoteObjectId'


class ResolveNodeParamsT(TypedDict):
    node_id: NotRequired['NodeId']
    backend_node_id: NotRequired['BackendNodeId']
    object_group: NotRequired[str]
    execution_context_id: NotRequired['runtime.ExecutionContextId']


class SetAttributeValueParamsT(TypedDict):
    node_id: 'NodeId'
    name: str
    value: str


class SetAttributesAsTextParamsT(TypedDict):
    node_id: 'NodeId'
    text: str
    name: NotRequired[str]


class SetFileInputFilesParamsT(TypedDict):
    files: list
    node_id: NotRequired['NodeId']
    backend_node_id: NotRequired['BackendNodeId']
    object_id: NotRequired['runtime.RemoteObjectId']


class SetNodeStackTracesEnabledParamsT(TypedDict):
    enable: bool


class GetNodeStackTracesParamsT(TypedDict):
    node_id: 'NodeId'


class GetFileInfoParamsT(TypedDict):
    object_id: 'runtime.RemoteObjectId'


class SetInspectedNodeParamsT(TypedDict):
    node_id: 'NodeId'


class SetNodeNameParamsT(TypedDict):
    node_id: 'NodeId'
    name: str


class SetNodeValueParamsT(TypedDict):
    node_id: 'NodeId'
    value: str


class SetOuterHTMLParamsT(TypedDict):
    node_id: 'NodeId'
    outer_html: str


class GetFrameOwnerParamsT(TypedDict):
    frame_id: 'page.FrameId'


class GetContainerForNodeParamsT(TypedDict):
    node_id: 'NodeId'
    container_name: NotRequired[str]
    physical_axes: NotRequired['PhysicalAxes']
    logical_axes: NotRequired['LogicalAxes']


class GetQueryingDescendantsForContainerParamsT(TypedDict):
    node_id: 'NodeId'


class CollectClassNamesFromSubtreeReturnT(TypedDict):
    class_names: list


class CopyToReturnT(TypedDict):
    node_id: 'NodeId'


class DescribeNodeReturnT(TypedDict):
    node: 'Node'


class GetAttributesReturnT(TypedDict):
    attributes: list


class GetBoxModelReturnT(TypedDict):
    model: 'BoxModel'


class GetContentQuadsReturnT(TypedDict):
    quads: list


class GetDocumentReturnT(TypedDict):
    root: 'Node'


class GetFlattenedDocumentReturnT(TypedDict):
    nodes: list


class GetNodesForSubtreeByStyleReturnT(TypedDict):
    node_ids: list


class GetNodeForLocationReturnT(TypedDict):
    backend_node_id: 'BackendNodeId'
    frame_id: 'page.FrameId'
    node_id: 'NodeId'


class GetOuterHTMLReturnT(TypedDict):
    outer_html: str


class GetRelayoutBoundaryReturnT(TypedDict):
    node_id: 'NodeId'


class GetSearchResultsReturnT(TypedDict):
    node_ids: list


class MoveToReturnT(TypedDict):
    node_id: 'NodeId'


class PerformSearchReturnT(TypedDict):
    search_id: str
    result_count: int


class PushNodeByPathToFrontendReturnT(TypedDict):
    node_id: 'NodeId'


class PushNodesByBackendIdsToFrontendReturnT(TypedDict):
    node_ids: list


class QuerySelectorReturnT(TypedDict):
    node_id: 'NodeId'


class QuerySelectorAllReturnT(TypedDict):
    node_ids: list


class GetTopLayerElementsReturnT(TypedDict):
    node_ids: list


class RequestNodeReturnT(TypedDict):
    node_id: 'NodeId'


class ResolveNodeReturnT(TypedDict):
    object: 'runtime.RemoteObject'


class GetNodeStackTracesReturnT(TypedDict):
    creation: 'runtime.StackTrace'


class GetFileInfoReturnT(TypedDict):
    path: str


class SetNodeNameReturnT(TypedDict):
    node_id: 'NodeId'


class GetFrameOwnerReturnT(TypedDict):
    backend_node_id: 'BackendNodeId'
    node_id: 'NodeId'


class GetContainerForNodeReturnT(TypedDict):
    node_id: 'NodeId'


class GetQueryingDescendantsForContainerReturnT(TypedDict):
    node_ids: list


class AttributeModifiedEventT(TypedDict):
    name: Literal['attribute_modified']
    params: 'AttributeModifiedParamsT'


class AttributeRemovedEventT(TypedDict):
    name: Literal['attribute_removed']
    params: 'AttributeRemovedParamsT'


class CharacterDataModifiedEventT(TypedDict):
    name: Literal['character_data_modified']
    params: 'CharacterDataModifiedParamsT'


class ChildNodeCountUpdatedEventT(TypedDict):
    name: Literal['child_node_count_updated']
    params: 'ChildNodeCountUpdatedParamsT'


class ChildNodeInsertedEventT(TypedDict):
    name: Literal['child_node_inserted']
    params: 'ChildNodeInsertedParamsT'


class ChildNodeRemovedEventT(TypedDict):
    name: Literal['child_node_removed']
    params: 'ChildNodeRemovedParamsT'


class DistributedNodesUpdatedEventT(TypedDict):
    name: Literal['distributed_nodes_updated']
    params: 'DistributedNodesUpdatedParamsT'


class DocumentUpdatedEventT(TypedDict):
    name: Literal['document_updated']
    params: None


class InlineStyleInvalidatedEventT(TypedDict):
    name: Literal['inline_style_invalidated']
    params: 'InlineStyleInvalidatedParamsT'


class PseudoElementAddedEventT(TypedDict):
    name: Literal['pseudo_element_added']
    params: 'PseudoElementAddedParamsT'


class TopLayerElementsUpdatedEventT(TypedDict):
    name: Literal['top_layer_elements_updated']
    params: None


class PseudoElementRemovedEventT(TypedDict):
    name: Literal['pseudo_element_removed']
    params: 'PseudoElementRemovedParamsT'


class SetChildNodesEventT(TypedDict):
    name: Literal['set_child_nodes']
    params: 'SetChildNodesParamsT'


class ShadowRootPoppedEventT(TypedDict):
    name: Literal['shadow_root_popped']
    params: 'ShadowRootPoppedParamsT'


class ShadowRootPushedEventT(TypedDict):
    name: Literal['shadow_root_pushed']
    params: 'ShadowRootPushedParamsT'


class AttributeModifiedParamsT(TypedDict):
    node_id: 'NodeId'
    name: str
    value: str


class AttributeRemovedParamsT(TypedDict):
    node_id: 'NodeId'
    name: str


class CharacterDataModifiedParamsT(TypedDict):
    node_id: 'NodeId'
    character_data: str


class ChildNodeCountUpdatedParamsT(TypedDict):
    node_id: 'NodeId'
    child_node_count: int


class ChildNodeInsertedParamsT(TypedDict):
    parent_node_id: 'NodeId'
    previous_node_id: 'NodeId'
    node: 'Node'


class ChildNodeRemovedParamsT(TypedDict):
    parent_node_id: 'NodeId'
    node_id: 'NodeId'


class DistributedNodesUpdatedParamsT(TypedDict):
    insertion_point_id: 'NodeId'
    distributed_nodes: list


class InlineStyleInvalidatedParamsT(TypedDict):
    node_ids: list


class PseudoElementAddedParamsT(TypedDict):
    parent_id: 'NodeId'
    pseudo_element: 'Node'


class PseudoElementRemovedParamsT(TypedDict):
    parent_id: 'NodeId'
    pseudo_element_id: 'NodeId'


class SetChildNodesParamsT(TypedDict):
    parent_id: 'NodeId'
    nodes: list


class ShadowRootPoppedParamsT(TypedDict):
    host_id: 'NodeId'
    root_id: 'NodeId'


class ShadowRootPushedParamsT(TypedDict):
    host_id: 'NodeId'
    root: 'Node'
