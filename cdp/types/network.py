# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.types import (
    debugger,
    emulation,
    io,
    page,
    runtime,
    security
)
from typing import (
    Literal,
    TypedDict
)

LoaderId = str

RequestId = str

InterceptionId = str

TimeSinceEpoch = float

MonotonicTime = float

Headers = dict

ReportId = str

ResourceType = Literal[
    'Document',
    'Stylesheet',
    'Image',
    'Media',
    'Font',
    'Script',
    'TextTrack',
    'XHR',
    'Fetch',
    'Prefetch',
    'EventSource',
    'WebSocket',
    'Manifest',
    'SignedExchange',
    'Ping',
    'CSPViolationReport',
    'Preflight',
    'Other'
]

ErrorReason = Literal[
    'Failed',
    'Aborted',
    'TimedOut',
    'AccessDenied',
    'ConnectionClosed',
    'ConnectionReset',
    'ConnectionRefused',
    'ConnectionAborted',
    'ConnectionFailed',
    'NameNotResolved',
    'InternetDisconnected',
    'AddressUnreachable',
    'BlockedByClient',
    'BlockedByResponse'
]

ConnectionType = Literal[
    'none',
    'cellular2g',
    'cellular3g',
    'cellular4g',
    'bluetooth',
    'ethernet',
    'wifi',
    'wimax',
    'other'
]

CookieSameSite = Literal[
    'Strict',
    'Lax',
    'None'
]

CookiePriority = Literal[
    'Low',
    'Medium',
    'High'
]

CookieSourceScheme = Literal[
    'Unset',
    'NonSecure',
    'Secure'
]

ResourcePriority = Literal[
    'VeryLow',
    'Low',
    'Medium',
    'High',
    'VeryHigh'
]

CertificateTransparencyCompliance = Literal[
    'unknown',
    'not-compliant',
    'compliant'
]

BlockedReason = Literal[
    'other',
    'csp',
    'mixed-content',
    'origin',
    'inspector',
    'subresource-filter',
    'content-type',
    'coep-frame-resource-needs-coep-header',
    'coop-sandboxed-iframe-cannot-navigate-to-coop-page',
    'corp-not-same-origin',
    'corp-not-same-origin-after-defaulted-to-same-origin-by-coep',
    'corp-not-same-site'
]

CorsError = Literal[
    'DisallowedByMode',
    'InvalidResponse',
    'WildcardOriginNotAllowed',
    'MissingAllowOriginHeader',
    'MultipleAllowOriginValues',
    'InvalidAllowOriginValue',
    'AllowOriginMismatch',
    'InvalidAllowCredentials',
    'CorsDisabledScheme',
    'PreflightInvalidStatus',
    'PreflightDisallowedRedirect',
    'PreflightWildcardOriginNotAllowed',
    'PreflightMissingAllowOriginHeader',
    'PreflightMultipleAllowOriginValues',
    'PreflightInvalidAllowOriginValue',
    'PreflightAllowOriginMismatch',
    'PreflightInvalidAllowCredentials',
    'PreflightMissingAllowExternal',
    'PreflightInvalidAllowExternal',
    'PreflightMissingAllowPrivateNetwork',
    'PreflightInvalidAllowPrivateNetwork',
    'InvalidAllowMethodsPreflightResponse',
    'InvalidAllowHeadersPreflightResponse',
    'MethodDisallowedByPreflightResponse',
    'HeaderDisallowedByPreflightResponse',
    'RedirectContainsCredentials',
    'InsecurePrivateNetwork',
    'InvalidPrivateNetworkAccess',
    'UnexpectedPrivateNetworkAccess',
    'NoCorsRedirectModeNotFollow',
    'PreflightMissingPrivateNetworkAccessId',
    'PreflightMissingPrivateNetworkAccessName',
    'PrivateNetworkAccessPermissionUnavailable',
    'PrivateNetworkAccessPermissionDenied'
]

ServiceWorkerResponseSource = Literal[
    'cache-storage',
    'http-cache',
    'fallback-code',
    'network'
]

TrustTokenOperationType = Literal[
    'Issuance',
    'Redemption',
    'Signing'
]

AlternateProtocolUsage = Literal[
    'alternativeJobWonWithoutRace',
    'alternativeJobWonRace',
    'mainJobWonRace',
    'mappingMissing',
    'broken',
    'dnsAlpnH3JobWonWithoutRace',
    'dnsAlpnH3JobWonRace',
    'unspecifiedReason'
]

SetCookieBlockedReason = Literal[
    'SecureOnly',
    'SameSiteStrict',
    'SameSiteLax',
    'SameSiteUnspecifiedTreatedAsLax',
    'SameSiteNoneInsecure',
    'UserPreferences',
    'ThirdPartyBlockedInFirstPartySet',
    'SyntaxError',
    'SchemeNotSupported',
    'OverwriteSecure',
    'InvalidDomain',
    'InvalidPrefix',
    'UnknownError',
    'SchemefulSameSiteStrict',
    'SchemefulSameSiteLax',
    'SchemefulSameSiteUnspecifiedTreatedAsLax',
    'SamePartyFromCrossPartyContext',
    'SamePartyConflictsWithOtherAttributes',
    'NameValuePairExceedsMaxSize',
    'DisallowedCharacter'
]

CookieBlockedReason = Literal[
    'SecureOnly',
    'NotOnPath',
    'DomainMismatch',
    'SameSiteStrict',
    'SameSiteLax',
    'SameSiteUnspecifiedTreatedAsLax',
    'SameSiteNoneInsecure',
    'UserPreferences',
    'ThirdPartyBlockedInFirstPartySet',
    'UnknownError',
    'SchemefulSameSiteStrict',
    'SchemefulSameSiteLax',
    'SchemefulSameSiteUnspecifiedTreatedAsLax',
    'SamePartyFromCrossPartyContext',
    'NameValuePairExceedsMaxSize'
]

InterceptionStage = Literal[
    'Request',
    'HeadersReceived'
]

SignedExchangeErrorField = Literal[
    'signatureSig',
    'signatureIntegrity',
    'signatureCertUrl',
    'signatureCertSha256',
    'signatureValidityUrl',
    'signatureTimestamps'
]

ContentEncoding = Literal[
    'deflate',
    'gzip',
    'br',
    'zstd'
]

PrivateNetworkRequestPolicy = Literal[
    'Allow',
    'BlockFromInsecureToMorePrivate',
    'WarnFromInsecureToMorePrivate',
    'PreflightBlock',
    'PreflightWarn'
]

IPAddressSpace = Literal[
    'Local',
    'Private',
    'Public',
    'Unknown'
]

CrossOriginOpenerPolicyValue = Literal[
    'SameOrigin',
    'SameOriginAllowPopups',
    'RestrictProperties',
    'UnsafeNone',
    'SameOriginPlusCoep',
    'RestrictPropertiesPlusCoep'
]

CrossOriginEmbedderPolicyValue = Literal[
    'None',
    'Credentialless',
    'RequireCorp'
]

ContentSecurityPolicySource = Literal[
    'HTTP',
    'Meta'
]

ReportStatus = Literal[
    'Queued',
    'Pending',
    'MarkedForRemoval',
    'Success'
]


class ResourceTiming(TypedDict):
    requestTime: float
    proxyStart: float
    proxyEnd: float
    dnsStart: float
    dnsEnd: float
    connectStart: float
    connectEnd: float
    sslStart: float
    sslEnd: float
    workerStart: float
    workerReady: float
    workerFetchStart: float
    workerRespondWithSettled: float
    sendStart: float
    sendEnd: float
    pushStart: float
    pushEnd: float
    receiveHeadersStart: float
    receiveHeadersEnd: float


class PostDataEntry(TypedDict):
    bytes: str


class Request(TypedDict):
    url: str
    method: str
    headers: 'Headers'
    initialPriority: 'ResourcePriority'
    referrerPolicy: str
    urlFragment: str
    postData: str
    hasPostData: bool
    postDataEntries: list
    mixedContentType: 'security.MixedContentType'
    isLinkPreload: bool
    trustTokenParams: 'TrustTokenParams'
    isSameSite: bool


class SignedCertificateTimestamp(TypedDict):
    status: str
    origin: str
    logDescription: str
    logId: str
    timestamp: float
    hashAlgorithm: str
    signatureAlgorithm: str
    signatureData: str


class SecurityDetails(TypedDict):
    protocol: str
    keyExchange: str
    cipher: str
    certificateId: 'security.CertificateId'
    subjectName: str
    sanList: list
    issuer: str
    validFrom: 'TimeSinceEpoch'
    validTo: 'TimeSinceEpoch'
    signedCertificateTimestampList: list
    certificateTransparencyCompliance: 'CertificateTransparencyCompliance'
    encryptedClientHello: bool
    keyExchangeGroup: str
    mac: str
    serverSignatureAlgorithm: int


class CorsErrorStatus(TypedDict):
    corsError: 'CorsError'
    failedParameter: str


class TrustTokenParams(TypedDict):
    operation: 'TrustTokenOperationType'
    refreshPolicy: str
    issuers: list


class Response(TypedDict):
    url: str
    status: int
    statusText: str
    headers: 'Headers'
    mimeType: str
    connectionReused: bool
    connectionId: float
    encodedDataLength: float
    securityState: 'security.SecurityState'
    headersText: str
    requestHeaders: 'Headers'
    requestHeadersText: str
    remoteIPAddress: str
    remotePort: int
    fromDiskCache: bool
    fromServiceWorker: bool
    fromPrefetchCache: bool
    timing: 'ResourceTiming'
    serviceWorkerResponseSource: 'ServiceWorkerResponseSource'
    responseTime: 'TimeSinceEpoch'
    cacheStorageCacheName: str
    protocol: str
    alternateProtocolUsage: 'AlternateProtocolUsage'
    securityDetails: 'SecurityDetails'


class WebSocketRequest(TypedDict):
    headers: 'Headers'


class WebSocketResponse(TypedDict):
    status: int
    statusText: str
    headers: 'Headers'
    headersText: str
    requestHeaders: 'Headers'
    requestHeadersText: str


class WebSocketFrame(TypedDict):
    opcode: float
    mask: bool
    payloadData: str


class CachedResource(TypedDict):
    url: str
    type: 'ResourceType'
    bodySize: float
    response: 'Response'


class Initiator(TypedDict):
    type: str
    stack: 'runtime.StackTrace'
    url: str
    lineNumber: float
    columnNumber: float
    requestId: 'RequestId'


class Cookie(TypedDict):
    name: str
    value: str
    domain: str
    path: str
    expires: float
    size: int
    httpOnly: bool
    secure: bool
    session: bool
    priority: 'CookiePriority'
    sameParty: bool
    sourceScheme: 'CookieSourceScheme'
    sourcePort: int
    sameSite: 'CookieSameSite'
    partitionKey: str
    partitionKeyOpaque: bool


class BlockedSetCookieWithReason(TypedDict):
    blockedReasons: list
    cookieLine: str
    cookie: 'Cookie'


class BlockedCookieWithReason(TypedDict):
    blockedReasons: list
    cookie: 'Cookie'


class CookieParam(TypedDict):
    name: str
    value: str
    url: str
    domain: str
    path: str
    secure: bool
    httpOnly: bool
    sameSite: 'CookieSameSite'
    expires: 'TimeSinceEpoch'
    priority: 'CookiePriority'
    sameParty: bool
    sourceScheme: 'CookieSourceScheme'
    sourcePort: int
    partitionKey: str


class AuthChallenge(TypedDict):
    origin: str
    scheme: str
    realm: str
    source: str


class AuthChallengeResponse(TypedDict):
    response: str
    username: str
    password: str


class RequestPattern(TypedDict):
    urlPattern: str
    resourceType: 'ResourceType'
    interceptionStage: 'InterceptionStage'


class SignedExchangeSignature(TypedDict):
    label: str
    signature: str
    integrity: str
    validityUrl: str
    date: int
    expires: int
    certUrl: str
    certSha256: str
    certificates: list


class SignedExchangeHeader(TypedDict):
    requestUrl: str
    responseCode: int
    responseHeaders: 'Headers'
    signatures: list
    headerIntegrity: str


class SignedExchangeError(TypedDict):
    message: str
    signatureIndex: int
    errorField: 'SignedExchangeErrorField'


class SignedExchangeInfo(TypedDict):
    outerResponse: 'Response'
    header: 'SignedExchangeHeader'
    securityDetails: 'SecurityDetails'
    errors: list


class ConnectTiming(TypedDict):
    requestTime: float


class ClientSecurityState(TypedDict):
    initiatorIsSecureContext: bool
    initiatorIPAddressSpace: 'IPAddressSpace'
    privateNetworkRequestPolicy: 'PrivateNetworkRequestPolicy'


class CrossOriginOpenerPolicyStatus(TypedDict):
    value: 'CrossOriginOpenerPolicyValue'
    reportOnlyValue: 'CrossOriginOpenerPolicyValue'
    reportingEndpoint: str
    reportOnlyReportingEndpoint: str


class CrossOriginEmbedderPolicyStatus(TypedDict):
    value: 'CrossOriginEmbedderPolicyValue'
    reportOnlyValue: 'CrossOriginEmbedderPolicyValue'
    reportingEndpoint: str
    reportOnlyReportingEndpoint: str


class ContentSecurityPolicyStatus(TypedDict):
    effectiveDirectives: str
    isEnforced: bool
    source: 'ContentSecurityPolicySource'


class SecurityIsolationStatus(TypedDict):
    coop: 'CrossOriginOpenerPolicyStatus'
    coep: 'CrossOriginEmbedderPolicyStatus'
    csp: list


class ReportingApiReport(TypedDict):
    id: 'ReportId'
    initiatorUrl: str
    destination: str
    type: str
    timestamp: 'TimeSinceEpoch'
    depth: int
    completedAttempts: int
    body: dict
    status: 'ReportStatus'


class ReportingApiEndpoint(TypedDict):
    url: str
    groupName: str


class LoadNetworkResourcePageResult(TypedDict):
    success: bool
    netError: float
    netErrorName: str
    httpStatusCode: float
    stream: 'io.StreamHandle'
    headers: 'Headers'


class LoadNetworkResourceOptions(TypedDict):
    disableCache: bool
    includeCredentials: bool
