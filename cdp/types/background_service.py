# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.
from cdp.types import (
    service_worker
)
from cdp.types import network
from typing import (
    Literal,
    TypedDict
)

ServiceName = Literal[
    'backgroundFetch',
    'backgroundSync',
    'pushMessaging',
    'notifications',
    'paymentHandler',
    'periodicBackgroundSync'
]


class EventMetadata(TypedDict):
    key: str
    value: str


class BackgroundServiceEvent(TypedDict):
    timestamp: 'network.TimeSinceEpoch'
    origin: str
    service_worker_registration_id: 'service_worker.RegistrationID'
    service: 'ServiceName'
    event_name: str
    instance_id: str
    event_metadata: list
    storage_key: str


class StartObservingParamsT(TypedDict):
    service: 'ServiceName'


class StopObservingParamsT(TypedDict):
    service: 'ServiceName'


class SetRecordingParamsT(TypedDict):
    should_record: bool
    service: 'ServiceName'


class ClearEventsParamsT(TypedDict):
    service: 'ServiceName'


class RecordingStateChangedEventT(TypedDict):
    name: Literal['recording_state_changed']
    params: 'RecordingStateChangedParamsT'


class BackgroundServiceEventReceivedEventT(TypedDict):
    name: Literal['background_service_event_received']
    params: 'BackgroundServiceEventReceivedParamsT'


class RecordingStateChangedParamsT(TypedDict):
    is_recording: bool
    service: 'ServiceName'


class BackgroundServiceEventReceivedParamsT(TypedDict):
    background_service_event: 'BackgroundServiceEvent'
