# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.

from cdp.types import (
    browser,
    network,
    page
)
from typing import (
    Literal,
    TypedDict
)

SerializedStorageKey = str

UnsignedInt64AsBase10 = str

UnsignedInt128AsBase16 = str

SignedInt64AsBase10 = str

StorageType = Literal[
    'appcache',
    'cookies',
    'file_systems',
    'indexeddb',
    'local_storage',
    'shader_cache',
    'websql',
    'service_workers',
    'cache_storage',
    'interest_groups',
    'shared_storage',
    'storage_buckets',
    'all',
    'other'
]

InterestGroupAccessType = Literal[
    'join',
    'leave',
    'update',
    'loaded',
    'bid',
    'win'
]

SharedStorageAccessType = Literal[
    'documentAddModule',
    'documentSelectURL',
    'documentRun',
    'documentSet',
    'documentAppend',
    'documentDelete',
    'documentClear',
    'workletSet',
    'workletAppend',
    'workletDelete',
    'workletClear',
    'workletGet',
    'workletKeys',
    'workletEntries',
    'workletLength',
    'workletRemainingBudget'
]

StorageBucketsDurability = Literal[
    'relaxed',
    'strict'
]

AttributionReportingSourceType = Literal[
    'navigation',
    'event'
]

AttributionReportingSourceRegistrationResult = Literal[
    'success',
    'internalError',
    'insufficientSourceCapacity',
    'insufficientUniqueDestinationCapacity',
    'excessiveReportingOrigins',
    'prohibitedByBrowserPolicy',
    'successNoised',
    'destinationReportingLimitReached',
    'destinationGlobalLimitReached',
    'destinationBothLimitsReached',
    'reportingOriginsPerSiteLimitReached',
    'exceedsMaxChannelCapacity'
]


class UsageForType(TypedDict):
    storage_type: 'StorageType'
    usage: float


class TrustTokens(TypedDict):
    issuer_origin: str
    count: float


class InterestGroupAd(TypedDict):
    render_url: str
    metadata: str


class InterestGroupDetails(TypedDict):
    owner_origin: str
    name: str
    expiration_time: 'network.TimeSinceEpoch'
    joining_origin: str
    trusted_bidding_signals_keys: list
    ads: list
    ad_components: list
    bidding_url: str
    bidding_wasm_helper_url: str
    update_url: str
    trusted_bidding_signals_url: str
    user_bidding_signals: str


class SharedStorageEntry(TypedDict):
    key: str
    value: str


class SharedStorageMetadata(TypedDict):
    creation_time: 'network.TimeSinceEpoch'
    length: int
    remaining_budget: float


class SharedStorageReportingMetadata(TypedDict):
    event_type: str
    reporting_url: str


class SharedStorageUrlWithMetadata(TypedDict):
    url: str
    reporting_metadata: list


class SharedStorageAccessParams(TypedDict):
    script_source_url: str
    operation_name: str
    serialized_data: str
    urls_with_metadata: list
    key: str
    value: str
    ignore_if_present: bool


class StorageBucket(TypedDict):
    storage_key: 'SerializedStorageKey'
    name: str


class StorageBucketInfo(TypedDict):
    bucket: 'StorageBucket'
    id: str
    expiration: 'network.TimeSinceEpoch'
    quota: float
    persistent: bool
    durability: 'StorageBucketsDurability'


class AttributionReportingFilterDataEntry(TypedDict):
    key: str
    values: list


class AttributionReportingAggregationKeysEntry(TypedDict):
    key: str
    value: 'UnsignedInt128AsBase16'


class AttributionReportingEventReportWindows(TypedDict):
    start: int
    ends: list


class AttributionReportingSourceRegistration(TypedDict):
    time: 'network.TimeSinceEpoch'
    type: 'AttributionReportingSourceType'
    source_origin: str
    reporting_origin: str
    destination_sites: list
    event_id: 'UnsignedInt64AsBase10'
    priority: 'SignedInt64AsBase10'
    filter_data: list
    aggregation_keys: list
    expiry: int
    event_report_window: int
    event_report_windows: 'AttributionReportingEventReportWindows'
    aggregatable_report_window: int
    debug_key: 'UnsignedInt64AsBase10'
