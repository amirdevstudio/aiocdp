# DO NOT EDIT THIS FILE
#
# This file is generated by the generator. To make changes, edit the generator
# and run it again.
from cdp.types import network
from typing import (
    Literal,
    NotRequired,
    TypedDict
)

CertificateId = int

MixedContentType = Literal[
    'blockable',
    'optionally-blockable',
    'none'
]

SecurityState = Literal[
    'unknown',
    'neutral',
    'insecure',
    'secure',
    'info',
    'insecure-broken'
]

SafetyTipStatus = Literal[
    'badReputation',
    'lookalike'
]

CertificateErrorAction = Literal[
    'continue',
    'cancel'
]


class CertificateSecurityState(TypedDict):
    protocol: str
    key_exchange: str
    cipher: str
    certificate: list
    subject_name: str
    issuer: str
    valid_from: 'network.TimeSinceEpoch'
    valid_to: 'network.TimeSinceEpoch'
    certificate_has_weak_signature: bool
    certificate_has_sha1_signature: bool
    modern_ssl: bool
    obsolete_ssl_protocol: bool
    obsolete_ssl_key_exchange: bool
    obsolete_ssl_cipher: bool
    obsolete_ssl_signature: bool
    key_exchange_group: NotRequired[str]
    mac: NotRequired[str]
    certificate_network_error: NotRequired[str]


class SafetyTipInfo(TypedDict):
    safety_tip_status: 'SafetyTipStatus'
    safe_url: NotRequired[str]


class VisibleSecurityState(TypedDict):
    security_state: 'SecurityState'
    security_state_issue_ids: list
    certificate_security_state: NotRequired['CertificateSecurityState']
    safety_tip_info: NotRequired['SafetyTipInfo']


class SecurityStateExplanation(TypedDict):
    security_state: 'SecurityState'
    title: str
    summary: str
    description: str
    mixed_content_type: 'MixedContentType'
    certificate: list
    recommendations: NotRequired[list]


class InsecureContentStatus(TypedDict):
    ran_mixed_content: bool
    displayed_mixed_content: bool
    contained_mixed_form: bool
    ran_content_with_cert_errors: bool
    displayed_content_with_cert_errors: bool
    ran_insecure_content_style: 'SecurityState'
    displayed_insecure_content_style: 'SecurityState'


class SetIgnoreCertificateErrorsParamsT(TypedDict):
    ignore: bool


class HandleCertificateErrorParamsT(TypedDict):
    event_id: int
    action: 'CertificateErrorAction'


class SetOverrideCertificateErrorsParamsT(TypedDict):
    override: bool


class CertificateErrorEventT(TypedDict):
    name: Literal['certificate_error']
    params: 'CertificateErrorParamsT'


class VisibleSecurityStateChangedEventT(TypedDict):
    name: Literal['visible_security_state_changed']
    params: 'VisibleSecurityStateChangedParamsT'


class SecurityStateChangedEventT(TypedDict):
    name: Literal['security_state_changed']
    params: 'SecurityStateChangedParamsT'


class CertificateErrorParamsT(TypedDict):
    event_id: int
    error_type: str
    request_url: str


class VisibleSecurityStateChangedParamsT(TypedDict):
    visible_security_state: 'VisibleSecurityState'


class SecurityStateChangedParamsT(TypedDict):
    security_state: 'SecurityState'
    scheme_is_cryptographic: bool
    explanations: list
    insecure_content_status: 'InsecureContentStatus'
    summary: str
